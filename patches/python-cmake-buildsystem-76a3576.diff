--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,686 @@
+cmake_minimum_required(VERSION 2.8.6)
+
+set(PYTHON_VERSION "3.6.4" CACHE STRING "The version of Python to build.")
+
+string(REPLACE "." ";" VERSION_LIST ${PYTHON_VERSION})
+list(GET VERSION_LIST 0 PY_VERSION_MAJOR)
+list(GET VERSION_LIST 1 PY_VERSION_MINOR)
+list(GET VERSION_LIST 2 PY_VERSION_PATCH)
+set(PY_VERSION "${PY_VERSION_MAJOR}.${PY_VERSION_MINOR}.${PY_VERSION_PATCH}")
+
+if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
+    set(CMAKE_CONFIGURATION_TYPES Release CACHE STRING "Release configuration" FORCE)
+    set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build." FORCE)
+    # Set the possible values of build type for cmake-gui
+    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Release")
+endif()
+
+if(APPLE)
+  set(_msg "Checking which MACOSX_DEPLOYMENT_TARGET to use")
+  message(STATUS "${_msg}")
+  include(cmake/PythonAutoDetectOSX.cmake)
+  set(MACOSX_DEPLOYMENT_TARGET ${CMAKE_OSX_DEPLOYMENT_TARGET})
+  message(STATUS "${_msg} - ${MACOSX_DEPLOYMENT_TARGET}")
+endif()
+
+project(Python C ASM)
+
+if(POLICY CMP0042)
+    cmake_policy(SET CMP0042 OLD)
+endif()
+
+if(CMAKE_CROSSCOMPILING)
+    cmake_minimum_required(VERSION 3.3) # Version introducing CROSSCOMPILING_EMULATOR
+endif()
+
+# Include helper functions
+include(cmake/CMakeChecks.cmake)
+include(cmake/Extensions.cmake)
+include(CMakeDependentOption)
+include(CMakeParseArguments)
+include(CTest)
+
+# Options
+option(DOWNLOAD_SOURCES "Automatically download the Python sources" ON)
+set(_build_libpython_shared_default  0)
+set(_build_libpython_shared_desc "Build libpython as a shared library")
+
+if(DEFINED BUILD_SHARED OR DEFINED BUILD_STATIC)
+  message(AUTHOR_WARNING "Deprecated options `BUILD_SHARED` or `BUILD_STATIC` are set, "
+                         "please change configure options to use `BUILD_LIBPYTHON_SHARED` instead.")
+  if(BUILD_SHARED AND BUILD_STATIC)
+    message(AUTHOR_WARNING "Both BUILD_SHARED and BUILD_STATIC options are set to ON. Forcing BUILD_SHARED to OFF")
+  endif()
+  if(BUILD_STATIC)
+    set(_build_libpython_shared_default  0)
+    set(_build_libpython_shared_desc "Intialized from `BUILD_STATIC` (deprecated)")
+  elseif(BUILD_SHARED)
+    set(_build_libpython_shared_default  1)
+    set(_build_libpython_shared_desc "Intialized from `BUILD_SHARED` (deprecated)")
+  endif()
+  message(AUTHOR_WARNING "Unsetting cache variables BUILD_SHARED and BUILD_STATIC")
+  unset(BUILD_SHARED CACHE)
+  unset(BUILD_STATIC CACHE)
+endif()
+
+option(BUILD_LIBPYTHON_SHARED ${_build_libpython_shared_desc} ${_build_libpython_shared_default})
+option(BUILD_EXTENSIONS_AS_BUILTIN "Default all modules as builtin to libpython" OFF)
+option(USE_LIB64 "Search for dependencies and install to prefix/lib64 instead of prefix/lib" OFF)
+if(WIN32)
+  option(INSTALL_WINDOWS_TRADITIONAL "Install the executable and extensions in the traditional location" OFF)
+  set(_build_wininst_default ON)
+  if(CMAKE_CROSSCOMPILING)
+    set(_build_wininst_default OFF)
+  endif()
+  option(BUILD_WININST "Build 'Windows Installer' program for distutils if not already provided in the source tree." ${_build_wininst_default})
+  cmake_dependent_option(BUILD_WININST_ALWAYS "Always build 'Windows installer' program even if provided in the source tree." OFF "BUILD_WININST" OFF)
+else()
+  set(INSTALL_WINDOWS_TRADITIONAL OFF)
+  set(BUILD_WININST OFF)
+  set(BUILD_WININST_ALWAYS OFF)
+endif()
+option(INSTALL_DEVELOPMENT "Install files required to develop C extensions" ON)
+option(INSTALL_MANUAL "Install man files" ON)
+option(INSTALL_TEST "Install test files" ON)
+
+# Append an item to a string if it does not already contain it.  Any additional
+# arguments are treated as extra "set" arguments
+macro(append_if_absent VARNAME VALUE)
+    if(NOT ${VARNAME} MATCHES "(^| )${VALUE}($| )")
+        if(${VARNAME})
+            set(${VARNAME} "${${VARNAME}} ${VALUE}" ${ARGN})
+        else()
+            set(${VARNAME} "${VALUE}" ${ARGN})
+        endif()
+    endif()
+endmacro()
+
+option(USE_SYSTEM_LIBRARIES "Use system libraries" ON)
+
+# Set platform dependent defaults
+set(_use_builtin_zlib_default OFF)
+set(_use_system_zlib_default ON)
+if(WIN32)
+  set(_use_builtin_zlib_default ON)
+  set(_use_system_zlib_default OFF)
+endif()
+
+cmake_dependent_option(USE_SYSTEM_BZip2 "Use system BZip2" ON "USE_SYSTEM_LIBRARIES" OFF)
+cmake_dependent_option(USE_SYSTEM_Curses "Use system Curses" ON "USE_SYSTEM_LIBRARIES" OFF)
+cmake_dependent_option(USE_SYSTEM_EXPAT "Use system EXPAT" ON "USE_SYSTEM_LIBRARIES" OFF)
+cmake_dependent_option(USE_SYSTEM_OpenSSL "Use system OpenSSL" ON "USE_SYSTEM_LIBRARIES" OFF)
+cmake_dependent_option(USE_SYSTEM_TCL "Use system TCL" ON "USE_SYSTEM_LIBRARIES" OFF)
+cmake_dependent_option(USE_SYSTEM_ZLIB "Use system ZLIB" ${_use_system_zlib_default} "USE_SYSTEM_LIBRARIES" OFF)
+cmake_dependent_option(USE_SYSTEM_DB "Use system DB" ON "USE_SYSTEM_LIBRARIES" OFF)
+cmake_dependent_option(USE_SYSTEM_GDBM "Use system GDBM" ON "USE_SYSTEM_LIBRARIES" OFF)
+cmake_dependent_option(USE_SYSTEM_READLINE "Use system READLINE" ON "USE_SYSTEM_LIBRARIES" OFF)
+if(IS_PY3)
+  cmake_dependent_option(USE_SYSTEM_LIBMPDEC "Use system LIBMPDEC" ON "USE_SYSTEM_LIBRARIES" OFF)
+endif()
+
+cmake_dependent_option(USE_BUILTIN_ZLIB "Use builtin ZLIB" ${_use_builtin_zlib_default} "NOT USE_SYSTEM_ZLIB" OFF)
+
+cmake_dependent_option(USE_LIBEDIT "Use libedit instead of readline" OFF
+                       "USE_SYSTEM_READLINE" OFF)
+
+option(WITH_TSC "profile with the Pentium timestamp counter" OFF)
+option(ENABLE_IPV6 "Enable IP v6" ON)
+option(WITH_DOC_STRINGS "Enable if you want documentation strings in extension modules" ON)
+set(Py_DEBUG OFF) # TODO - Build debugging interpreter
+option(WITH_PYMALLOC "Define if you want to compile in Python-specific mallocs" ON)
+option(WITH_THREAD "Compile in rudimentary thread support" ON)
+if(UNIX)
+    option(WITH_STATIC_DEPENDENCIES "Restrict extensions and external dependencies to static libraries" OFF)
+    if(WITH_STATIC_DEPENDENCIES)
+        if(NOT POLICY CMP0065)
+            set(_reason " because option supported only with CMake >= 3.4. Current CMAKE_VERSION [${CMAKE_VERSION}]")
+            set(WITH_STATIC_DEPENDENCIES OFF CACHE BOOL "Forced to OFF${_reason}" FORCE)
+            message(WARNING "Forcing WITH_STATIC_DEPENDENCIES to OFF${_reason}")
+        else()
+            cmake_policy(SET CMP0065 NEW)
+
+            set(_reason " because of WITH_STATIC_DEPENDENCIES=ON")
+
+            set(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_STATIC_LIBRARY_SUFFIX})
+            message(STATUS "Setting CMAKE_FIND_LIBRARY_SUFFIXES to \"${CMAKE_STATIC_LIBRARY_SUFFIX}\"${_reason}")
+
+            set(BUILD_EXTENSIONS_AS_BUILTIN ON CACHE BOOL "Forced to ON${_reason}" FORCE)
+            message(STATUS "Setting BUILD_EXTENSIONS_AS_BUILTIN to ON${_reason}")
+
+            set(BUILD_LIBPYTHON_SHARED OFF CACHE BOOL "Forced to OFF${_reason}" FORCE)
+            message(STATUS "Setting BUILD_LIBPYTHON_SHARED to OFF${_reason}")
+        endif()
+    endif()
+else()
+    set(WITH_STATIC_DEPENDENCIES 0)
+endif()
+
+# Detect source directory
+set(_landmark "pyconfig.h.in") # CMake will look for this file.
+if(NOT (SRC_DIR AND EXISTS ${SRC_DIR}/${_landmark}))
+    foreach(dirname
+        ${CMAKE_CURRENT_SOURCE_DIR}
+        ${CMAKE_CURRENT_SOURCE_DIR}/cpython-${PY_VERSION}
+        ${CMAKE_CURRENT_SOURCE_DIR}/Python-${PY_VERSION}
+        ${CMAKE_CURRENT_BINARY_DIR}/../cpython-${PY_VERSION}
+        ${CMAKE_CURRENT_BINARY_DIR}/../Python-${PY_VERSION})
+        set(SRC_DIR ${dirname})
+        if(EXISTS ${SRC_DIR}/${_landmark})
+            break()
+        endif()
+    endforeach()
+endif()
+get_filename_component(SRC_DIR "${SRC_DIR}" ABSOLUTE)
+
+# Download sources
+get_filename_component(_parent_dir ${CMAKE_CURRENT_BINARY_DIR} PATH)
+string(REGEX REPLACE "rc[1-9]$" "" _py_version_patch_no_rc ${PY_VERSION_PATCH})
+set(_py_version_no_rc "${PY_VERSION_MAJOR}.${PY_VERSION_MINOR}.${_py_version_patch_no_rc}")
+set(_download_link "https://www.python.org/ftp/python/${_py_version_no_rc}/Python-${PY_VERSION}.tgz")
+# Variable below represent the set of available python version.
+# 2.7.x
+set(_download_2.7.3_md5 "2cf641732ac23b18d139be077bd906cd")
+set(_download_2.7.4_md5 "592603cfaf4490a980e93ecb92bde44a")
+set(_download_2.7.5_md5 "b4f01a1d0ba0b46b05c73b2ac909b1df")
+set(_download_2.7.6_md5 "1d8728eb0dfcac72a0fd99c17ec7f386")
+set(_download_2.7.7_md5 "cf842800b67841d64e7fb3cd8acb5663")
+set(_download_2.7.8_md5 "d4bca0159acb0b44a781292b5231936f")
+set(_download_2.7.9_md5 "5eebcaa0030dc4061156d3429657fb83")
+set(_download_2.7.10_md5 "d7547558fd673bd9d38e2108c6b42521")
+set(_download_2.7.11_md5 "6b6076ec9e93f05dd63e47eb9c15728b")
+set(_download_2.7.12_md5 "88d61f82e3616a4be952828b3694109d")
+set(_download_2.7.13_md5 "17add4bf0ad0ec2f08e0cae6d205c700")
+set(_download_2.7.14_md5 "cee2e4b33ad3750da77b2e85f2f8b724")
+# 3.5.x
+set(_download_3.5.1_md5 "be78e48cdfc1a7ad90efff146dce6cfe")
+set(_download_3.5.2_md5 "3fe8434643a78630c61c6464fe2e7e72")
+set(_download_3.5.3_md5 "6192f0e45f02575590760e68c621a488")
+set(_download_3.5.4_md5 "2ed4802b7a2a7e40d2e797272bf388ec")
+set(_download_3.5.5_md5 "7c825b747d25c11e669e99b912398585")
+# 3.6.x
+set(_download_3.6.0_md5 "3f7062ccf8be76491884d0e47ac8b251")
+set(_download_3.6.1_md5 "2d0fc9f3a5940707590e07f03ecb08b9")
+set(_download_3.6.2_md5 "e1a36bfffdd1d3a780b1825daf16e56c")
+set(_download_3.6.3_md5 "e9180c69ed9a878a4a8a3ab221e32fa9")
+set(_download_3.6.4_md5 "9de6494314ea199e3633211696735f65")
+
+set(_extracted_dir "Python-${PY_VERSION}")
+
+if(NOT EXISTS ${SRC_DIR}/${_landmark} AND DOWNLOAD_SOURCES)
+    get_filename_component(_filename ${_download_link} NAME)
+    set(_archive_filepath ${CMAKE_CURRENT_BINARY_DIR}/../${_filename})
+    if(EXISTS "${_archive_filepath}")
+        message(STATUS "${_filename} already downloaded")
+    else()
+        message(STATUS "Downloading ${_download_link}")
+        if(NOT DEFINED _download_${PY_VERSION}_md5)
+            message(FATAL_ERROR "Selected PY_VERSION [${PY_VERSION}] is not associated with any checksum. Consider updating this CMakeLists.txt setting _download_${PY_VERSION}_md5 variable")
+        endif()
+        file(
+          DOWNLOAD ${_download_link} ${_archive_filepath}
+          EXPECTED_MD5 ${_download_${PY_VERSION}_md5}
+          SHOW_PROGRESS
+          )
+    endif()
+
+    message(STATUS "Extracting ${_filename}")
+    execute_process(COMMAND ${CMAKE_COMMAND} -E tar xfz ${_archive_filepath}
+        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/..
+        RESULT_VARIABLE rv)
+    if(NOT rv EQUAL 0)
+        message(FATAL_ERROR "error: extraction of '${_filename}' failed")
+    endif()
+    set(SRC_DIR ${CMAKE_CURRENT_BINARY_DIR}/../${_extracted_dir})
+endif()
+
+if(NOT EXISTS ${SRC_DIR}/${_landmark})
+    message(FATAL_ERROR "Failed to locate python source.
+The searched locations were:
+   <CMAKE_CURRENT_SOURCE_DIR>
+   <CMAKE_CURRENT_SOURCE_DIR>/cpython-${PY_VERSION}
+   <CMAKE_CURRENT_SOURCE_DIR>/Python-${PY_VERSION}
+   <CMAKE_CURRENT_BINARY_DIR>/../cpython-${PY_VERSION}
+   <CMAKE_CURRENT_BINARY_DIR>/../Python-${PY_VERSION}
+   <SRC_DIR>
+You could try to:
+  1) download ${_download_link}
+  2) extract the archive in folder: ${_parent_dir}
+  3) Check that file \"${_parent_dir}/${_extracted_dir}/${_landmark}\" exists.
+  4) re-configure.
+If you already downloaded the source, you could try to re-configure this project passing -DSRC_DIR:PATH=/path/to/Python-{PY_VERSION} using cmake or adding an PATH entry named SRC_DIR from cmake-gui.")
+endif()
+message(STATUS "SRC_DIR: ${SRC_DIR}")
+
+# Extract version from python source (Copied from FindPythonLibs.cmake)
+file(STRINGS "${SRC_DIR}/Include/patchlevel.h" python_version_str
+    REGEX "^#define[ \t]+PY_VERSION[ \t]+\"[^\"]+\"")
+string(REGEX REPLACE "^#define[ \t]+PY_VERSION[ \t]+\"([^\"]+)\".*" "\\1"
+    _version "${python_version_str}")
+string(REGEX REPLACE "([0-9])\\..+" "\\1"
+    PY_VERSION_MAJOR ${_version})
+string(REGEX REPLACE "[0-9]\\.([0-9]+)\\..+" "\\1"
+    PY_VERSION_MINOR ${_version})
+string(REGEX REPLACE "[0-9]\\.[0-9]+\\.([0-9]+)[+]?" "\\1"
+    PY_VERSION_PATCH ${_version})
+set(PY_VERSION "${PY_VERSION_MAJOR}.${PY_VERSION_MINOR}.${PY_VERSION_PATCH}")
+message(STATUS "PY_VERSION: ${PY_VERSION}")
+if(NOT DEFINED _download_${PY_VERSION}_md5)
+    message(WARNING "warning: selected python version '${PY_VERSION}' is not tested. Tested versions match '2.7.[3-14]' or '3.5.[1-5]' or `3.6.[0-4]`")
+endif()
+
+set(PYTHON_VERSION "${PY_VERSION}" CACHE STRING "The version of Python to build." FORCE)
+
+# Apply patches
+option(PYTHON_APPLY_PATCHES "Apply patches" ON)
+if(PYTHON_APPLY_PATCHES)
+  include(cmake/PythonApplyPatches.cmake)
+endif()
+
+# Convenience boolean variables to easily test python version
+set(IS_PY3 0)
+set(IS_PY2 1)
+if(PY_VERSION_MAJOR VERSION_GREATER 2)
+    set(IS_PY3 1)
+    set(IS_PY2 0)
+endif()
+
+# Options depending of the python version
+if(IS_PY2)
+  option(Py_USING_UNICODE "Enable unicode support" ON)
+else()
+  if(DEFINED Py_USING_UNICODE)
+    message(AUTHOR_WARNING "Py_USING_UNICODE option is *NOT* supported with Python 3. Current version is ${PY_VERSION}")
+  endif()
+endif()
+
+if(PY_VERSION_MAJOR VERSION_GREATER 2.7.10)
+# See "Improving performance in Python 2.7" - http://lwn.net/Articles/646888/
+option(WITH_COMPUTED_GOTOS "Improve performance enabling the computed goto based dispatch" OFF)
+set(USE_COMPUTED_GOTOS ${WITH_COMPUTED_GOTOS})
+endif()
+
+if(IS_PY3)
+set(WITH_HASH_ALGORITHM "default" CACHE STRING "Define hash algorithm for str, bytes and memoryview.")
+set_property(CACHE WITH_HASH_ALGORITHM PROPERTY STRINGS "default" "siphash24" "fnv")
+endif()
+
+# This is the major version number of Python
+set(LIBPYTHON_VERSION ${PY_VERSION_MAJOR}.${PY_VERSION_MINOR})
+if(WIN32)
+    set(LIBPYTHON_VERSION ${PY_VERSION_MAJOR}${PY_VERSION_MINOR})
+endif()
+set(LIBPYTHON python${LIBPYTHON_VERSION})
+
+# Proceed to the configure checks
+include(cmake/ConfigureChecks.cmake)
+
+# Set PYTHONHOME
+set(LIBDIR "Lib") # See Lib/distutils/sysconfig.py - function 'get_python_lib'
+if(UNIX)
+    set(LIBDIR "lib")
+endif()
+if(USE_LIB64)
+    set_property(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS ON)
+    set(LIBDIR "lib64")
+endif()
+set(PYTHONHOME "${LIBDIR}")
+if(UNIX)
+    set(PYTHONHOME "${PYTHONHOME}/${LIBPYTHON}")
+endif()
+
+# Install tree directory
+set(BIN_INSTALL_DIR bin)                         # Contains the python executable
+if(INSTALL_WINDOWS_TRADITIONAL)
+    set(BIN_INSTALL_DIR .)                       # Contains the python executable
+endif()
+set(LD_VERSION ${LIBPYTHON_VERSION}${ABIFLAGS})
+set(CONFIG_INSTALL_DIR share/${LIBPYTHON})
+set(EXTENSION_INSTALL_DIR ${PYTHONHOME}/lib-dynload)
+
+if (${LIBPYTHON_VERSION} GREATER 3.1)
+  set(LIB_CONFIG_INSTALL_DIR ${PYTHONHOME}/config-${LD_VERSION})
+else()
+  set(LIB_CONFIG_INSTALL_DIR ${PYTHONHOME}/config)
+endif()
+
+if(INSTALL_WINDOWS_TRADITIONAL)
+    set(EXTENSION_INSTALL_DIR DLLs)
+endif()
+set(INCLUDE_INSTALL_DIR include/python${LD_VERSION})
+if(MSVC)
+    set(INCLUDE_INSTALL_DIR include)
+endif()
+# Build tree directory
+set(BIN_BUILD_DIR ${PROJECT_BINARY_DIR}/bin)
+set(CONFIG_BUILD_DIR ${PROJECT_BINARY_DIR}/${CONFIG_INSTALL_DIR})
+set(EXTENSION_BUILD_DIR ${PROJECT_BINARY_DIR}/${PYTHONHOME}/lib-dynload)
+set(INCLUDE_BUILD_DIR ${SRC_DIR}/Include)
+
+set(ARCHIVEDIR "libs")      # Contains the static (*.a) and import libraries (*.lib)
+
+# Directories specific to 'libpython'
+set(LIBPYTHON_LIBDIR ${LIBDIR})
+set(LIBPYTHON_ARCHIVEDIR ${LIBDIR})
+set(LIBPYTHON_STATIC_ARCHIVEDIR ${LIBDIR})
+if(WIN32)
+    set(LIBPYTHON_LIBDIR ${BIN_INSTALL_DIR})
+    set(LIBPYTHON_ARCHIVEDIR ${ARCHIVEDIR})
+    set(LIBPYTHON_STATIC_ARCHIVEDIR static-${ARCHIVEDIR})
+endif()
+
+set(EXTRA_PYTHONPATH "" CACHE STRING
+    "A colon (:) separated list of extra paths to add to the PYTHONPATH")
+
+# Configure 'pyconfig.h'
+if(UNIX)
+    set(PYCONFIG_BUILD_DIR ${BIN_BUILD_DIR})
+    configure_file(cmake/config-unix/pyconfig.h.in
+                   ${PYCONFIG_BUILD_DIR}/pyconfig.h)
+elseif(WIN32)
+    set(PYCONFIG_BUILD_DIR ${SRC_DIR}/PC) # In a windows build tree, 'pyconfig.h' is NOT required to
+                                          # live along side the python executable.
+                                          # See function '_init_posix()' and '_init_non_posix()'
+                                          # in 'Lib/sysconfig.py'
+    if(MINGW)
+      set(PYCONFIG_BUILD_DIR cmake/config-mingw)
+    endif()
+endif()
+
+# Install 'pyconfig.h'
+if(INSTALL_DEVELOPMENT)
+    install(FILES ${PYCONFIG_BUILD_DIR}/pyconfig.h
+            DESTINATION ${INCLUDE_INSTALL_DIR}/
+            COMPONENT Development)
+endif()
+
+# Set include directories
+include_directories(${INCLUDE_BUILD_DIR})
+include_directories(${PYCONFIG_BUILD_DIR})
+include_directories(${SRC_DIR}/Python)
+
+# Set cflags used by all components
+if(CMAKE_C_COMPILER_ID MATCHES GNU)
+    if(PY_VERSION VERSION_EQUAL "3.6" OR PY_VERSION VERSION_GREATER "3.6")
+        append_if_absent(CMAKE_C_FLAGS "-std=c99")
+    endif()
+    append_if_absent(CMAKE_C_FLAGS "-Wall")
+    append_if_absent(CMAKE_C_FLAGS "-Wstrict-prototypes")
+    append_if_absent(CMAKE_C_FLAGS "-fno-strict-aliasing")
+    append_if_absent(CMAKE_C_FLAGS "-fwrapv")
+    append_if_absent(CMAKE_C_FLAGS "-g")
+elseif(CMAKE_C_COMPILER_ID MATCHES Clang)
+    append_if_absent(CMAKE_C_FLAGS "-Wall")
+    append_if_absent(CMAKE_C_FLAGS "-g")
+elseif(CMAKE_C_COMPILER_ID MATCHES Intel)
+    append_if_absent(CMAKE_C_FLAGS "-Wall")
+    append_if_absent(CMAKE_C_FLAGS "-no-ansi-alias")
+elseif(CMAKE_C_COMPILER_ID MATCHES PGI)
+    append_if_absent(CMAKE_C_FLAGS "-alias=traditional")
+endif()
+
+if(MSVC)
+    append_if_absent(CMAKE_C_FLAGS "/Zm200")
+    string(REPLACE "/Ob2" "/Ob1" CMAKE_C_FLAGS_RELEASE ${CMAKE_C_FLAGS_RELEASE}) # InlineFunctionExpansion=1
+    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}" CACHE STRING "Flags used by the compiler during release builds" FORCE)
+endif()
+
+if(NOT HAVE_POSITION_INDEPENDENT_CODE AND NOT WIN32)
+    append_if_absent(CMAKE_C_FLAGS "-fPIC")
+endif()
+
+# Useful additional variables that extensions can use.
+if(CMAKE_SYSTEM MATCHES Linux)
+    set(LINUX ON)
+else()
+    set(LINUX OFF)
+endif()
+
+# Clear PythonTargets.cmake
+file(WRITE ${CONFIG_BUILD_DIR}/PythonTargets.cmake "")
+
+# Define python executable wrapper command to ensure
+# python executable resolves the expected python library.
+set(PYTHON_WRAPPER_COMMAND )
+if(BUILD_LIBPYTHON_SHARED AND UNIX)
+    set(_envvar LD_LIBRARY_PATH)
+    if(APPLE)
+        set(_envvar DYLD_LIBRARY_PATH)
+    endif()
+    set(PYTHON_WRAPPER_COMMAND env ${_envvar}=${PROJECT_BINARY_DIR}/${LIBPYTHON_LIBDIR})
+endif()
+
+# Add extension modules
+set(extensions_enabled "" CACHE INTERNAL "" FORCE)
+set(extensions_disabled "" CACHE INTERNAL "" FORCE)
+add_subdirectory(cmake/extensions CMakeBuild/extensions)
+
+# Add the other subdirectories
+add_subdirectory(cmake/libpython CMakeBuild/libpython)
+add_subdirectory(cmake/python CMakeBuild/python)
+add_subdirectory(cmake/include CMakeBuild/include)
+add_subdirectory(cmake/lib CMakeBuild/lib)
+if(BUILD_WININST)
+    add_subdirectory(cmake/PC/bdist_wininst CMakeBuild/bdist_wininst)
+endif()
+
+# Add target to run "Argument Clinic" over all source files
+if(IS_PY3)
+add_custom_target(clinic
+    COMMAND ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:python> ${SRC_DIR}/Tools/clinic/clinic.py --make
+    DEPENDS python
+    WORKING_DIRECTORY ${SRC_DIR}
+    COMMENT "Running 'Argument Clinic' over all source files"
+    VERBATIM
+)
+endif()
+
+# Add target to generate 'Include/graminit.h' and 'Python/graminit.c'
+add_custom_target(generate_graminit
+    COMMAND ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:pgen>
+        ${SRC_DIR}/Grammar/Grammar
+        ${PROJECT_BINARY_DIR}/CMakeFiles/graminit.h
+        ${PROJECT_BINARY_DIR}/CMakeFiles/graminit.c
+    COMMAND ${CMAKE_COMMAND} -E copy_if_different
+        ${PROJECT_BINARY_DIR}/CMakeFiles/graminit.h
+        ${SRC_DIR}/Include/graminit.h
+    COMMAND ${CMAKE_COMMAND} -E copy_if_different
+        ${PROJECT_BINARY_DIR}/CMakeFiles/graminit.c
+        ${SRC_DIR}/Python/graminit.c
+    DEPENDS pgen
+    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
+    COMMENT "Generating '${SRC_DIR}/Include/graminit.h' and '${SRC_DIR}/Python/graminit.c'."
+    VERBATIM
+)
+
+# Add target to generate 'opcode.h' header file
+add_custom_target(generate_opcode_h
+    COMMAND ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:python> ${SRC_DIR}/Tools/scripts/generate_opcode_h.py
+        ${SRC_DIR}/Lib/opcode.py
+        ${PROJECT_BINARY_DIR}/CMakeFiles/opcode.h
+    COMMAND ${CMAKE_COMMAND} -E copy_if_different
+        ${PROJECT_BINARY_DIR}/CMakeFiles/opcode.h
+        ${SRC_DIR}/Include/opcode.h
+    DEPENDS python
+    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
+    COMMENT "Generating '${SRC_DIR}/Include/opcode.h'."
+    VERBATIM
+)
+
+# Add target to generate 'Include/Python-ast.h' from 'Python.asdl'
+add_custom_target(generate_python_ast_h
+    COMMAND ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:python> ${SRC_DIR}/Parser/asdl_c.py
+        -h ${SRC_DIR}/Include
+        ${SRC_DIR}/Parser/Python.asdl
+    DEPENDS python
+    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
+    COMMENT "Generating '${SRC_DIR}/Include/Python-ast.h'"
+    VERBATIM
+)
+
+# Add target to generate 'Python/Python-ast.c' from 'Python.asdl'
+add_custom_target(generate_python_ast_c
+    COMMAND ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:python> ${SRC_DIR}/Parser/asdl_c.py
+        -c ${SRC_DIR}/Python
+        ${SRC_DIR}/Parser/Python.asdl
+    DEPENDS python
+    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
+    COMMENT "Generating '${SRC_DIR}/Python/Python-ast.c'"
+    VERBATIM
+)
+
+# If needed, copy 'asdl.py' and 'Python.asdl' into build directory so that 'test_asdl_parser' passes.
+set(_asdl_subdir ${LIBDIR})
+if(WIN32)
+  set(_asdl_subdir )
+endif()
+file(MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/${LIBDIR}/Parser)
+configure_file(
+    ${SRC_DIR}/Parser/Python.asdl
+    ${PROJECT_BINARY_DIR}/${_asdl_subdir}/Parser/Python.asdl
+    COPYONLY
+)
+configure_file(
+    ${SRC_DIR}/Parser/asdl.py
+    ${PROJECT_BINARY_DIR}/${_asdl_subdir}/Parser/asdl.py
+    COPYONLY
+)
+
+show_extension_summary()
+
+if(UNIX)
+
+    # python.pc
+    configure_file(cmake/python.pc.in
+                  ${PROJECT_BINARY_DIR}/Misc/python-${LIBPYTHON_VERSION}.pc @ONLY)
+    configure_file(cmake/python.pc.in
+                  ${PROJECT_BINARY_DIR}/Misc/python-${PY_VERSION_MAJOR}.pc @ONLY)
+    configure_file(cmake/python.pc.in
+                  ${PROJECT_BINARY_DIR}/Misc/python.pc @ONLY)
+    if(INSTALL_DEVELOPMENT)
+        install(FILES
+                    ${PROJECT_BINARY_DIR}/Misc/python-${LIBPYTHON_VERSION}.pc
+                    ${PROJECT_BINARY_DIR}/Misc/python-${PY_VERSION_MAJOR}.pc
+                    ${PROJECT_BINARY_DIR}/Misc/python.pc
+                DESTINATION lib/pkgconfig
+                COMPONENT Development)
+    endif()
+
+    # Makefile
+    set(MAKEFILE_LDSHARED_FLAGS "-shared")
+    if(APPLE)
+        set(MAKEFILE_LDSHARED_FLAGS "-dynamiclib -headerpad_max_install_names -undefined dynamic_lookup")
+    endif()
+    configure_file(cmake/makefile-variables.in
+                   ${BIN_BUILD_DIR}/Makefile @ONLY)
+    if(INSTALL_DEVELOPMENT)
+        install(FILES ${BIN_BUILD_DIR}/Makefile
+                DESTINATION ${LIB_CONFIG_INSTALL_DIR}
+                RENAME Makefile
+                COMPONENT Development)
+    endif()
+
+    # Utility scripts
+    if(INSTALL_DEVELOPMENT)
+        install(FILES ${SRC_DIR}/install-sh ${SRC_DIR}/Modules/makesetup
+                DESTINATION ${LIB_CONFIG_INSTALL_DIR}
+                COMPONENT Development)
+    endif()
+
+    # Install manual
+    if(INSTALL_MANUAL)
+        set(_install_man FILES ${SRC_DIR}/Misc/python.man DESTINATION share/man/man1 COMPONENT Runtime)
+        install(${_install_man} RENAME python${LIBPYTHON_VERSION}.1)
+        install(${_install_man} RENAME python${PY_VERSION_MAJOR}.1)
+    endif()
+
+endif()
+
+# Create an empty lib-dynload folder, even if we don't have any extensions
+# to go in there.  bin/python uses this to auto-determine the exec_prefix
+# and properly generate the _sysconfigdata.py
+file(MAKE_DIRECTORY "${EXTENSION_BUILD_DIR}")
+install(CODE "file(MAKE_DIRECTORY \"\${CMAKE_INSTALL_PREFIX}/${EXTENSION_INSTALL_DIR}\")")
+
+if(BUILD_TESTING)
+    set(TESTOPTS -l)
+    set(TESTPROG ${PROJECT_BINARY_DIR}/${PYTHONHOME}/test/regrtest.py)
+    set(TESTPYTHONOPTS )
+    if(IS_PY2)
+      set(TESTPYTHON $<TARGET_FILE:python> -Wd -3 -E -tt ${TESTPYTHONOPTS})
+    else()
+      set(TESTPYTHON $<TARGET_FILE:python> ${TESTPYTHONOPTS})
+    endif()
+    set(TESTPYTHON ${CMAKE_CROSSCOMPILING_EMULATOR} ${TESTPYTHON})
+    include(cmake/UnitTests.cmake)
+    foreach(unittest ${unittests})
+      set(EXTRATESTOPTS -v)
+      # XXX Running 'test_doctest' in verbose mode always return 1
+      if(unittest STREQUAL "test_doctest")
+        set(EXTRATESTOPTS )
+      endif()
+      add_test(NAME ${unittest} COMMAND ${PYTHON_WRAPPER_COMMAND} ${TESTPYTHON} ${TESTPROG} ${TESTOPTS} ${EXTRATESTOPTS} ${unittest})
+    endforeach()
+endif()
+
+
+if(HAVE_CONFIGURE_PACKAGE_CONFIG_FILE AND HAVE_WRITE_BASIC_PACKAGE_VERSION_FILE)
+
+# Configure 'PythonConfig.cmake' for a build tree
+set(CONFIG_DIR_CONFIG ${CONFIG_BUILD_DIR})
+set(INCLUDE_DIR_CONFIG ${INCLUDE_BUILD_DIR})
+set(PYTHON_CONFIG_CODE "####### Expanded from \@PYTHON_CONFIG_CODE\@ #######\n")
+set(PYTHON_CONFIG_CODE "${PYTHON_CONFIG_CODE}list(APPEND PYTHON_INCLUDE_DIR \"${PYCONFIG_BUILD_DIR}\")\n")
+set(PYTHON_CONFIG_CODE "${PYTHON_CONFIG_CODE}##################################################")
+set(python_config ${CONFIG_BUILD_DIR}/PythonConfig.cmake)
+configure_package_config_file(
+    cmake/PythonConfig.cmake.in
+    ${python_config}
+    INSTALL_DESTINATION ${PROJECT_BINARY_DIR}
+    PATH_VARS CONFIG_DIR_CONFIG INCLUDE_DIR_CONFIG
+    NO_CHECK_REQUIRED_COMPONENTS_MACRO
+)
+
+# Configure 'PythonConfig.cmake' for an install tree
+set(CONFIG_DIR_CONFIG ${CONFIG_INSTALL_DIR})
+set(INCLUDE_DIR_CONFIG ${INCLUDE_INSTALL_DIR})
+set(PYTHON_CONFIG_CODE "")
+set(python_install_config ${PROJECT_BINARY_DIR}/CMakeFiles/PythonConfig.cmake)
+configure_package_config_file(
+    cmake/PythonConfig.cmake.in
+    ${python_install_config}
+    INSTALL_DESTINATION ${CMAKE_INSTALL_PREFIX}/${CONFIG_INSTALL_DIR}
+    PATH_VARS CONFIG_DIR_CONFIG INCLUDE_DIR_CONFIG
+    NO_CHECK_REQUIRED_COMPONENTS_MACRO
+)
+
+# Configure 'PythonTargets.cmake' and 'PythonConfigVersion.cmake
+get_property(PYTHON_TARGETS GLOBAL PROPERTY PYTHON_TARGETS)
+export(TARGETS ${PYTHON_TARGETS} APPEND FILE ${CONFIG_BUILD_DIR}/PythonTargets.cmake)
+
+set(python_config_version ${CONFIG_BUILD_DIR}/PythonConfigVersion.cmake)
+write_basic_package_version_file(
+    ${python_config_version}
+    VERSION ${PY_VERSION}
+    COMPATIBILITY SameMajorVersion
+)
+
+if(INSTALL_DEVELOPMENT)
+    # Install 'PythonTargets.cmake', 'PythonConfig.cmake' and 'PythonConfigVersion.cmake
+    install(EXPORT PythonTargets
+        FILE PythonTargets.cmake
+        DESTINATION ${CONFIG_INSTALL_DIR} COMPONENT Development)
+
+    install(
+        FILES ${python_install_config} ${python_config_version}
+        DESTINATION ${CONFIG_INSTALL_DIR} COMPONENT Development
+    )
+endif()
+
+endif()
+
+# Install License
+set(license_destination ${PYTHONHOME})
+if(INSTALL_WINDOWS_TRADITIONAL)
+  set(license_destination .)
+endif()
+install(FILES ${SRC_DIR}/LICENSE DESTINATION ${license_destination} COMPONENT Runtime RENAME LICENSE.txt)
--- /dev/null
+++ b/CONTRIBUTING.md
@@ -0,0 +1,32 @@
+Contributing
+------------
+
+[fork]: https://github.com/github/VisualStudio/fork
+[pr]: https://github.com/github/VisualStudio/compare
+[code-of-conduct]: http://todogroup.org/opencodeofconduct/#VisualStudio/opensource@github.com
+[readme]: https://github.com/github/VisualStudio#build
+
+Hi there! We're thrilled that you'd like to contribute to this project. Your help is essential for keeping it great.
+
+This project adheres to the [Open Code of Conduct][code-of-conduct]. By participating, you are expected to uphold this code.
+
+Submitting a pull request
+-------------------------
+
+0. [Fork][] and clone the repository (see Build Instructions in the [README][readme])
+0. Create a new branch: `git checkout -b my-branch-name`
+0. Make your change, add tests, and make sure the tests still pass
+0. Push to your fork and [submit a pull request][pr]
+0. Pat your self on the back and wait for your pull request to be reviewed and merged.
+
+Here are a few things you can do that will increase the likelihood of your pull request being accepted:
+
+- Follow the existing code's style.
+- Keep your change as focused as possible. If there are multiple changes you would like to make that are not dependent upon each other, consider submitting them as separate pull requests.
+- Write a [good commit message](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html).
+
+## Resources
+
+- [Contributing to Open Source on GitHub](https://guides.github.com/activities/contributing-to-open-source/)
+- [Using Pull Requests](https://help.github.com/articles/using-pull-requests/)
+- [GitHub Help](https://help.github.com)
--- /dev/null
+++ b/CTestConfig.cmake
@@ -0,0 +1,8 @@
+set(CTEST_PROJECT_NAME "Python")
+set(CTEST_NIGHTLY_START_TIME "3:00:00 UTC")
+
+set(CTEST_DROP_METHOD "http")
+set(CTEST_DROP_SITE "open.cdash.org")
+set(CTEST_DROP_LOCATION "/submit.php?project=CPython")
+set(CTEST_DROP_SITE_CDASH TRUE)
+set(CTEST_TEST_TIMEOUT "60")
--- /dev/null
+++ b/LICENSE_Apache_20
@@ -0,0 +1,192 @@
+Apache License
+Version 2.0, January 2004
+http://www.apache.org/licenses/
+
+TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+1. Definitions.
+
+"License" shall mean the terms and conditions for use, reproduction, and
+distribution as defined by Sections 1 through 9 of this document.
+
+"Licensor" shall mean the copyright owner or entity authorized by the copyright
+owner that is granting the License.
+
+"Legal Entity" shall mean the union of the acting entity and all other entities
+that control, are controlled by, or are under common control with that entity.
+For the purposes of this definition, "control" means (i) the power, direct or
+indirect, to cause the direction or management of such entity, whether by
+contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the
+outstanding shares, or (iii) beneficial ownership of such entity.
+
+"You" (or "Your") shall mean an individual or Legal Entity exercising
+permissions granted by this License.
+
+"Source" form shall mean the preferred form for making modifications, including
+but not limited to software source code, documentation source, and configuration
+files.
+
+"Object" form shall mean any form resulting from mechanical transformation or
+translation of a Source form, including but not limited to compiled object code,
+generated documentation, and conversions to other media types.
+
+"Work" shall mean the work of authorship, whether in Source or Object form, made
+available under the License, as indicated by a copyright notice that is included
+in or attached to the work (an example is provided in the Appendix below).
+
+"Derivative Works" shall mean any work, whether in Source or Object form, that
+is based on (or derived from) the Work and for which the editorial revisions,
+annotations, elaborations, or other modifications represent, as a whole, an
+original work of authorship. For the purposes of this License, Derivative Works
+shall not include works that remain separable from, or merely link (or bind by
+name) to the interfaces of, the Work and Derivative Works thereof.
+
+"Contribution" shall mean any work of authorship, including the original version
+of the Work and any modifications or additions to that Work or Derivative Works
+thereof, that is intentionally submitted to Licensor for inclusion in the Work
+by the copyright owner or by an individual or Legal Entity authorized to submit
+on behalf of the copyright owner. For the purposes of this definition,
+"submitted" means any form of electronic, verbal, or written communication sent
+to the Licensor or its representatives, including but not limited to
+communication on electronic mailing lists, source code control systems, and
+issue tracking systems that are managed by, or on behalf of, the Licensor for
+the purpose of discussing and improving the Work, but excluding communication
+that is conspicuously marked or otherwise designated in writing by the copyright
+owner as "Not a Contribution."
+
+"Contributor" shall mean Licensor and any individual or Legal Entity on behalf
+of whom a Contribution has been received by Licensor and subsequently
+incorporated within the Work.
+
+2. Grant of Copyright License.
+
+Subject to the terms and conditions of this License, each Contributor hereby
+grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,
+irrevocable copyright license to reproduce, prepare Derivative Works of,
+publicly display, publicly perform, sublicense, and distribute the Work and such
+Derivative Works in Source or Object form.
+
+3. Grant of Patent License.
+
+Subject to the terms and conditions of this License, each Contributor hereby
+grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,
+irrevocable (except as stated in this section) patent license to make, have
+made, use, offer to sell, sell, import, and otherwise transfer the Work, where
+such license applies only to those patent claims licensable by such Contributor
+that are necessarily infringed by their Contribution(s) alone or by combination
+of their Contribution(s) with the Work to which such Contribution(s) was
+submitted. If You institute patent litigation against any entity (including a
+cross-claim or counterclaim in a lawsuit) alleging that the Work or a
+Contribution incorporated within the Work constitutes direct or contributory
+patent infringement, then any patent licenses granted to You under this License
+for that Work shall terminate as of the date such litigation is filed.
+
+4. Redistribution.
+
+You may reproduce and distribute copies of the Work or Derivative Works thereof
+in any medium, with or without modifications, and in Source or Object form,
+provided that You meet the following conditions:
+
+You must give any other recipients of the Work or Derivative Works a copy of
+this License; and
+You must cause any modified files to carry prominent notices stating that You
+changed the files; and
+You must retain, in the Source form of any Derivative Works that You distribute,
+all copyright, patent, trademark, and attribution notices from the Source form
+of the Work, excluding those notices that do not pertain to any part of the
+Derivative Works; and
+If the Work includes a "NOTICE" text file as part of its distribution, then any
+Derivative Works that You distribute must include a readable copy of the
+attribution notices contained within such NOTICE file, excluding those notices
+that do not pertain to any part of the Derivative Works, in at least one of the
+following places: within a NOTICE text file distributed as part of the
+Derivative Works; within the Source form or documentation, if provided along
+with the Derivative Works; or, within a display generated by the Derivative
+Works, if and wherever such third-party notices normally appear. The contents of
+the NOTICE file are for informational purposes only and do not modify the
+License. You may add Your own attribution notices within Derivative Works that
+You distribute, alongside or as an addendum to the NOTICE text from the Work,
+provided that such additional attribution notices cannot be construed as
+modifying the License.
+You may add Your own copyright statement to Your modifications and may provide
+additional or different license terms and conditions for use, reproduction, or
+distribution of Your modifications, or for any such Derivative Works as a whole,
+provided Your use, reproduction, and distribution of the Work otherwise complies
+with the conditions stated in this License.
+
+5. Submission of Contributions.
+
+Unless You explicitly state otherwise, any Contribution intentionally submitted
+for inclusion in the Work by You to the Licensor shall be under the terms and
+conditions of this License, without any additional terms or conditions.
+Notwithstanding the above, nothing herein shall supersede or modify the terms of
+any separate license agreement you may have executed with Licensor regarding
+such Contributions.
+
+6. Trademarks.
+
+This License does not grant permission to use the trade names, trademarks,
+service marks, or product names of the Licensor, except as required for
+reasonable and customary use in describing the origin of the Work and
+reproducing the content of the NOTICE file.
+
+7. Disclaimer of Warranty.
+
+Unless required by applicable law or agreed to in writing, Licensor provides the
+Work (and each Contributor provides its Contributions) on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
+including, without limitation, any warranties or conditions of TITLE,
+NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are
+solely responsible for determining the appropriateness of using or
+redistributing the Work and assume any risks associated with Your exercise of
+permissions under this License.
+
+8. Limitation of Liability.
+
+In no event and under no legal theory, whether in tort (including negligence),
+contract, or otherwise, unless required by applicable law (such as deliberate
+and grossly negligent acts) or agreed to in writing, shall any Contributor be
+liable to You for damages, including any direct, indirect, special, incidental,
+or consequential damages of any character arising as a result of this License or
+out of the use or inability to use the Work (including but not limited to
+damages for loss of goodwill, work stoppage, computer failure or malfunction, or
+any and all other commercial damages or losses), even if such Contributor has
+been advised of the possibility of such damages.
+
+9. Accepting Warranty or Additional Liability.
+
+While redistributing the Work or Derivative Works thereof, You may choose to
+offer, and charge a fee for, acceptance of support, warranty, indemnity, or
+other liability obligations and/or rights consistent with this License. However,
+in accepting such obligations, You may act only on Your own behalf and on Your
+sole responsibility, not on behalf of any other Contributor, and only if You
+agree to indemnify, defend, and hold each Contributor harmless for any liability
+incurred by, or claims asserted against, such Contributor by reason of your
+accepting any such warranty or additional liability.
+
+END OF TERMS AND CONDITIONS
+
+APPENDIX: How to apply the Apache License to your work
+
+To apply the Apache License to your work, attach the following boilerplate
+notice, with the fields enclosed by brackets "[]" replaced with your own
+identifying information. (Don't include the brackets!) The text should be
+enclosed in the appropriate comment syntax for the file format. We also
+recommend that a file or class name and description of purpose be included on
+the same "printed page" as the copyright notice for easier identification within
+third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+     http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
--- /dev/null
+++ b/cmake/CMakeChecks.cmake
@@ -0,0 +1,15 @@
+
+include(cmake/CheckCMakeCommandExists.cmake)
+include(cmake/CheckCMakePropertyExists.cmake)
+
+# Detect CMake features
+
+include(CMakePackageConfigHelpers OPTIONAL)
+check_cmake_command_exists("configure_package_config_file")
+check_cmake_command_exists("write_basic_package_version_file")
+
+# Remove if minimum required version >= 2.8.12
+check_cmake_command_exists("target_compile_definitions")
+
+# Remove if minimum required version >= 2.8.11
+check_cmake_property_exists("POSITION_INDEPENDENT_CODE")
--- /dev/null
+++ b/cmake/CMakeExpandImportedTargets.cmake
@@ -0,0 +1,134 @@
+# CMAKE_EXPAND_IMPORTED_TARGETS(<var> LIBRARIES lib1 lib2...libN
+#                                     [CONFIGURATION <config>] )
+#
+# CMAKE_EXPAND_IMPORTED_TARGETS() takes a list of libraries and replaces
+# all imported targets contained in this list with their actual file paths
+# of the referenced libraries on disk, including the libraries from their
+# link interfaces.
+# If a CONFIGURATION is given, it uses the respective configuration of the
+# imported targets if it exists. If no CONFIGURATION is given, it uses
+# the first configuration from ${CMAKE_CONFIGURATION_TYPES} if set, otherwise
+# ${CMAKE_BUILD_TYPE}.
+# This macro is used by all Check*.cmake files which use
+# TRY_COMPILE() or TRY_RUN() and support CMAKE_REQUIRED_LIBRARIES , so that
+# these checks support imported targets in CMAKE_REQUIRED_LIBRARIES:
+#    cmake_expand_imported_targets(expandedLibs LIBRARIES ${CMAKE_REQUIRED_LIBRARIES}
+#                                               CONFIGURATION "${CMAKE_TRY_COMPILE_CONFIGURATION}" )
+
+
+#=============================================================================
+# Copyright 2012 Kitware, Inc.
+# Copyright 2009-2012 Alexander Neundorf <neundorf@kde.org>
+#
+# Distributed under the OSI-approved BSD License (the "License");
+# see accompanying file Copyright.txt for details.
+#
+# This software is distributed WITHOUT ANY WARRANTY; without even the
+# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+# See the License for more information.
+#=============================================================================
+# (To distribute this file outside of CMake, substitute the full
+#  License text for the above reference.)
+
+include(CMakeParseArguments)
+
+function(CMAKE_EXPAND_IMPORTED_TARGETS _RESULT )
+
+   set(options )
+   set(oneValueArgs CONFIGURATION )
+   set(multiValueArgs LIBRARIES )
+
+   cmake_parse_arguments(CEIT "${options}" "${oneValueArgs}" "${multiValueArgs}"  ${ARGN})
+
+   if(CEIT_UNPARSED_ARGUMENTS)
+      message(FATAL_ERROR "Unknown keywords given to CMAKE_EXPAND_IMPORTED_TARGETS(): \"${CEIT_UNPARSED_ARGUMENTS}\"")
+   endif()
+
+   if(NOT CEIT_CONFIGURATION)
+      if(CMAKE_CONFIGURATION_TYPES)
+         list(GET CMAKE_CONFIGURATION_TYPES 0 CEIT_CONFIGURATION)
+      else()
+         set(CEIT_CONFIGURATION ${CMAKE_BUILD_TYPE})
+      endif()
+   endif()
+
+   # XXX ignore warning 'get_target_property() called with non-existent target'
+   if(POLICY CMP0045)
+     cmake_policy(SET CMP0045 OLD)
+   endif()
+
+   # handle imported library targets
+
+   set(_CCSR_REQ_LIBS ${CEIT_LIBRARIES})
+
+   set(_CHECK_FOR_IMPORTED_TARGETS TRUE)
+   set(_CCSR_LOOP_COUNTER 0)
+   while(_CHECK_FOR_IMPORTED_TARGETS)
+      math(EXPR _CCSR_LOOP_COUNTER "${_CCSR_LOOP_COUNTER} + 1 ")
+      set(_CCSR_NEW_REQ_LIBS )
+      set(_CHECK_FOR_IMPORTED_TARGETS FALSE)
+      foreach(_CURRENT_LIB ${_CCSR_REQ_LIBS})
+         get_target_property(_importedConfigs "${_CURRENT_LIB}" IMPORTED_CONFIGURATIONS)
+         if (_importedConfigs)
+#            message(STATUS "Detected imported target ${_CURRENT_LIB}")
+            # Ok, so this is an imported target.
+            # First we get the imported configurations.
+            # Then we get the location of the actual library on disk of the first configuration.
+            # then we'll get its link interface libraries property,
+            # iterate through it and replace all imported targets we find there
+            # with there actual location.
+
+            # guard against infinite loop: abort after 100 iterations ( 100 is arbitrary chosen)
+            if ("${_CCSR_LOOP_COUNTER}" LESS 100)
+               set(_CHECK_FOR_IMPORTED_TARGETS TRUE)
+#                else ("${_CCSR_LOOP_COUNTER}" LESS 1)
+#                   message(STATUS "********* aborting loop, counter : ${_CCSR_LOOP_COUNTER}")
+            endif ("${_CCSR_LOOP_COUNTER}" LESS 100)
+
+            # if one of the imported configurations equals ${CMAKE_TRY_COMPILE_CONFIGURATION},
+            # use it, otherwise simply use the first one:
+            list(FIND _importedConfigs "${CEIT_CONFIGURATION}" _configIndexToUse)
+            if("${_configIndexToUse}" EQUAL -1)
+              set(_configIndexToUse 0)
+            endif("${_configIndexToUse}" EQUAL -1)
+            list(GET _importedConfigs ${_configIndexToUse} _importedConfigToUse)
+
+            get_target_property(_importedLocation "${_CURRENT_LIB}" IMPORTED_LOCATION_${_importedConfigToUse})
+            get_target_property(_linkInterfaceLibs "${_CURRENT_LIB}" IMPORTED_LINK_INTERFACE_LIBRARIES_${_importedConfigToUse} )
+
+            list(APPEND _CCSR_NEW_REQ_LIBS  "${_importedLocation}")
+#            message(STATUS "Appending lib ${_CURRENT_LIB} as ${_importedLocation}")
+            if(_linkInterfaceLibs)
+               foreach(_currentLinkInterfaceLib ${_linkInterfaceLibs})
+#                  message(STATUS "Appending link interface lib ${_currentLinkInterfaceLib}")
+                  if(_currentLinkInterfaceLib)
+                     list(APPEND _CCSR_NEW_REQ_LIBS "${_currentLinkInterfaceLib}" )
+                  endif(_currentLinkInterfaceLib)
+               endforeach(_currentLinkInterfaceLib "${_linkInterfaceLibs}")
+            endif(_linkInterfaceLibs)
+         else(_importedConfigs)
+            # "Normal" libraries are just used as they are.
+            list(APPEND _CCSR_NEW_REQ_LIBS "${_CURRENT_LIB}" )
+#            message(STATUS "Appending lib directly: ${_CURRENT_LIB}")
+         endif(_importedConfigs)
+      endforeach(_CURRENT_LIB ${_CCSR_REQ_LIBS})
+
+      set(_CCSR_REQ_LIBS ${_CCSR_NEW_REQ_LIBS} )
+   endwhile(_CHECK_FOR_IMPORTED_TARGETS)
+
+   # Finally we iterate once more over all libraries. This loop only removes
+   # all remaining imported target names (there shouldn't be any left anyway).
+   set(_CCSR_NEW_REQ_LIBS )
+   foreach(_CURRENT_LIB ${_CCSR_REQ_LIBS})
+      get_target_property(_importedConfigs "${_CURRENT_LIB}" IMPORTED_CONFIGURATIONS)
+      if (NOT _importedConfigs)
+         list(APPEND _CCSR_NEW_REQ_LIBS "${_CURRENT_LIB}" )
+#         message(STATUS "final: appending ${_CURRENT_LIB}")
+      else (NOT _importedConfigs)
+#             message(STATUS "final: skipping ${_CURRENT_LIB}")
+      endif (NOT _importedConfigs)
+   endforeach(_CURRENT_LIB ${_CCSR_REQ_LIBS})
+#   message(STATUS "setting -${_RESULT}- to -${_CCSR_NEW_REQ_LIBS}-")
+   set(${_RESULT} "${_CCSR_NEW_REQ_LIBS}" PARENT_SCOPE)
+
+endfunction()
--- /dev/null
+++ b/cmake/CheckCMakeCommandExists.cmake
@@ -0,0 +1,16 @@
+
+macro(check_cmake_command_exists commandname)
+  string(TOUPPER ${commandname} commandname_upper)
+  set(_varname HAVE_${commandname_upper})
+  if(NOT DEFINED ${_varname})
+    message(STATUS "Looking for CMake command ${commandname}")
+    if(COMMAND ${commandname})
+      set(${_varname} TRUE CACHE INTERNAL "Have CMake command ${commandname}")
+      message(STATUS "Looking for CMake command ${commandname} - found")
+    else()
+      set(${_varname} FALSE CACHE INTERNAL "Have CMake command ${commandname}")
+      message(STATUS "Looking for CMake command ${commandname} - not found")
+    endif()
+  endif()
+endmacro()
+
--- /dev/null
+++ b/cmake/CheckCMakePropertyExists.cmake
@@ -0,0 +1,21 @@
+
+macro(check_cmake_property_exists propertyname)
+  string(TOUPPER ${propertyname} propertyname_upper)
+  set(_varname HAVE_${propertyname_upper})
+  if(NOT DEFINED ${_varname})
+    message(STATUS "Looking for CMake property ${propertyname}")
+    execute_process(
+      COMMAND ${CMAKE_COMMAND} --help-property ${propertyname_upper}
+      OUTPUT_QUIET
+      ERROR_QUIET
+      RESULT_VARIABLE _result
+      )
+    if(_result EQUAL 0)
+      set(${_varname} TRUE CACHE INTERNAL "Have CMake property ${propertyname}")
+      message(STATUS "Looking for CMake property ${propertyname} - found")
+    else()
+      set(${_varname} FALSE CACHE INTERNAL "Have CMake property ${propertyname}")
+      message(STATUS "Looking for CMake property ${propertyname} - not found")
+    endif()
+  endif()
+endmacro()
--- /dev/null
+++ b/cmake/ConfigureChecks.cmake
@@ -0,0 +1,2456 @@
+include(CheckCSourceCompiles)
+include(CheckCSourceRuns)
+include(CheckIncludeFiles)
+include(CheckTypeSize)
+include(CMakePushCheckState)
+include(CheckStructHasMember)
+include(CheckFunctionExists)
+include(CheckLibraryExists)
+include(CheckSymbolExists)
+include(CheckVariableExists)
+include(cmake/PlatformTest.cmake)
+include(TestBigEndian)
+
+# XXX Remove if minimum required CMake >= 2.8.11
+#     See CMake commit add8d22a (properly detect processor architecture on Windows)
+if(CMAKE_HOST_WIN32 AND CMAKE_VERSION VERSION_LESS "2.8.11")
+    if(ENV{PROCESSOR_ARCHITEW6432})
+        set(CMAKE_HOST_SYSTEM_PROCESSOR "$ENV{PROCESSOR_ARCHITEW6432}")
+    else()
+        set(CMAKE_HOST_SYSTEM_PROCESSOR "$ENV{PROCESSOR_ARCHITECTURE}")
+    endif()
+    if(NOT CMAKE_CROSSCOMPILING)
+        set(CMAKE_SYSTEM_PROCESSOR "${CMAKE_HOST_SYSTEM_PROCESSOR}")
+    endif()
+endif()
+
+message(STATUS "The system name is ${CMAKE_SYSTEM_NAME}")
+message(STATUS "The system processor is ${CMAKE_SYSTEM_PROCESSOR}")
+message(STATUS "The system version is ${CMAKE_SYSTEM_VERSION}")
+
+# Find any dependencies
+if(USE_SYSTEM_BZip2)
+    find_package(BZip2)
+endif()
+
+if(USE_SYSTEM_Curses)
+    find_package(Curses)
+    find_library(PANEL_LIBRARY NAMES panel)
+    set(PANEL_LIBRARIES ${PANEL_LIBRARY})
+    if(WITH_STATIC_DEPENDENCIES)
+        find_library(TINFO_LIBRARY NAMES tinfo)
+        find_library(GPM_LIBRARY NAMES gpm)
+    endif()
+endif()
+
+if(USE_SYSTEM_EXPAT)
+    find_package(EXPAT)
+endif()
+
+if(IS_PY3 AND USE_SYSTEM_LIBMPDEC)
+    find_library(LIBMPDEC_LIBRARY NAMES libmpdec)
+    set(LIBMPDEC_LIBRARIES ${LIBMPDEC_LIBRARY})
+endif()
+
+if(USE_SYSTEM_OpenSSL)
+    find_package(OpenSSL 0.9.7)
+endif()
+
+if(USE_SYSTEM_TCL)
+    find_package(TCL)
+endif()
+
+if(UNIX)
+    # Only needed by _tkinter
+    find_package(X11)
+endif()
+
+if(USE_SYSTEM_ZLIB)
+    find_package(ZLIB)
+endif()
+
+if(USE_SYSTEM_DB)
+    find_path(DB_INCLUDE_PATH db.h)
+    find_library(DB_LIBRARY NAMES db-4.8)
+endif()
+
+if(USE_SYSTEM_GDBM)
+    find_path(GDBM_INCLUDE_PATH gdbm.h)
+    find_library(GDBM_LIBRARY gdbm)
+    find_library(GDBM_COMPAT_LIBRARY gdbm_compat)
+    find_path(NDBM_INCLUDE_PATH ndbm.h)
+    if(NDBM_INCLUDE_PATH)
+        set(NDBM_TAG NDBM)
+    else()
+        find_path(GDBM_NDBM_INCLUDE_PATH gdbm/ndbm.h)
+        if(GDBM_NDBM_INCLUDE_PATH)
+            set(NDBM_TAG GDBM_NDBM)
+        else()
+            find_path(GDBM_DASH_NDBM_INCLUDE_PATH gdbm-ndbm.h)
+            if(GDBM_DASH_NDBM_INCLUDE_PATH)
+                set(NDBM_TAG GDBM_DASH_NDBM)
+            endif()
+        endif()
+    endif()
+endif()
+
+if(USE_SYSTEM_READLINE)
+    if(USE_LIBEDIT)
+        find_path(READLINE_INCLUDE_PATH editline/readline.h)
+        find_library(READLINE_LIBRARY edit)
+    else()
+        find_path(READLINE_INCLUDE_PATH readline/readline.h)
+        find_library(READLINE_LIBRARY readline)
+    endif()
+endif()
+
+find_path(SQLITE3_INCLUDE_PATH sqlite3.h)
+find_library(SQLITE3_LIBRARY sqlite3)
+
+if(WIN32)
+  set(M_LIBRARIES )
+  set(HAVE_LIBM 1)
+  # From PC/pyconfig.h: 
+  #  This is a manually maintained version used for the Watcom,
+  #  Borland and Microsoft Visual C++ compilers.  It is a
+  #  standard part of the Python distribution.
+else()
+
+if(IS_PY3)
+set(_msg "Checking WITH_HASH_ALGORITHM option")
+message(STATUS "${_msg}")
+if(WITH_HASH_ALGORITHM STREQUAL "default")
+  set(Py_HASH_ALGORITHM 0)
+elseif(WITH_HASH_ALGORITHM STREQUAL "siphash24")
+  set(Py_HASH_ALGORITHM 1)
+elseif(WITH_HASH_ALGORITHM STREQUAL "fnv")
+  set(Py_HASH_ALGORITHM 2)
+else()
+  message(FATAL_ERROR "Unknown hash algorithm '${Py_HASH_ALGORITHM}'")
+endif()
+message(STATUS "${_msg} [${WITH_HASH_ALGORITHM}]")
+
+# ABI version string for Python extension modules.  This appears between the
+# periods in shared library file names, e.g. foo.<SOABI>.so.  It is calculated
+# from the following attributes which affect the ABI of this Python build (in
+# this order):
+#
+# * The Python implementation (always 'cpython-' for us)
+# * The major and minor version numbers
+# * --with-pydebug (adds a 'd')
+# * --with-pymalloc (adds a 'm')
+# * --with-wide-unicode (adds a 'u')
+#
+# Thus for example, Python 3.2 built with wide unicode, pydebug, and pymalloc,
+# would get a shared library ABI version tag of 'cpython-32dmu' and shared
+# libraries would be named 'foo.cpython-32dmu.so'.
+set(_msg "Checking ABIFLAGS")
+set(ABIFLAGS )
+if(Py_DEBUG)
+  set(ABIFLAGS "${ABIFLAGS}d")
+endif()
+if(WITH_PYMALLOC)
+  set(ABIFLAGS "${ABIFLAGS}m")
+endif()
+message(STATUS "${_msg} - ${ABIFLAGS}")
+
+set(_msg "Checking SOABI")
+string(TOLOWER ${CMAKE_SYSTEM_NAME} lc_system_name)
+# XXX This should be improved.
+if(APPLE)
+  set(PLATFORM_TRIPLET "${lc_system_name}")
+else()
+  set(PLATFORM_TRIPLET "${CMAKE_SYSTEM_PROCESSOR}-${lc_system_name}")
+endif()
+set(SOABI "cpython-${PY_VERSION_MAJOR}${PY_VERSION_MINOR}${ABIFLAGS}-${PLATFORM_TRIPLET}")
+
+message(STATUS "${_msg} - ${SOABI}")
+
+endif()
+
+macro(ADD_COND var cond item)
+  if(${cond})
+    set(${var} ${${var}} ${item})
+  endif()
+endmacro()
+
+set(CMAKE_REQUIRED_DEFINITIONS )
+
+# Convenient macro allowing to conditonally update CMAKE_REQUIRED_DEFINITIONS
+macro(set_required_def var value)
+  set(${var} ${value})
+  list(APPEND CMAKE_REQUIRED_DEFINITIONS "-D${var}=${value}")
+endmacro()
+
+# Emulate AC_HEADER_DIRENT
+check_include_files(dirent.h HAVE_DIRENT_H)
+if(NOT HAVE_DIRENT_H)
+  check_include_files(sys/ndir.h HAVE_SYS_NDIR_H)
+  set(CMAKE_EXTRA_INCLUDE_FILES "sys/dir.h")
+  check_type_size(DIR HAVE_SYS_DIR_H)
+  check_include_files(ndir.h HAVE_NDIR_H)
+endif()
+if(IS_PY3)
+  check_symbol_exists("dirfd" "sys/types.h;dirent.h" HAVE_DIRFD)
+endif()
+
+check_include_files(alloca.h HAVE_ALLOCA_H) # libffi and cpython
+check_include_files(asm/types.h HAVE_ASM_TYPES_H)
+check_include_files(arpa/inet.h HAVE_ARPA_INET_H)
+check_include_files(bluetooth/bluetooth.h HAVE_BLUETOOTH_BLUETOOTH_H)
+check_include_files(bluetooth.h HAVE_BLUETOOTH_H)
+check_include_files(conio.h HAVE_CONIO_H)
+check_include_files(curses.h HAVE_CURSES_H)
+check_include_files(direct.h HAVE_DIRECT_H)
+check_include_files(dlfcn.h HAVE_DLFCN_H) # libffi and cpython
+check_include_files(errno.h HAVE_ERRNO_H)
+check_include_files(fcntl.h HAVE_FCNTL_H)
+check_include_files(fpu_control.h HAVE_FPU_CONTROL_H)
+check_include_files(grp.h HAVE_GRP_H)
+check_include_files(ieeefp.h HAVE_IEEEFP_H)
+check_include_files(inttypes.h HAVE_INTTYPES_H) # libffi and cpython
+check_include_files(io.h HAVE_IO_H)
+check_include_files(langinfo.h HAVE_LANGINFO_H)
+check_include_files(libintl.h HAVE_LIBINTL_H)
+check_include_files(libutil.h HAVE_LIBUTIL_H)
+check_include_files(linux/tipc.h HAVE_LINUX_TIPC_H)
+check_include_files(locale.h HAVE_LOCALE_H)
+
+check_include_files(sys/socket.h HAVE_SYS_SOCKET_H)
+
+set(LINUX_NETLINK_HEADERS)
+add_cond(LINUX_NETLINK_HEADERS HAVE_ASM_TYPES_H  asm/types.h)
+add_cond(LINUX_NETLINK_HEADERS HAVE_SYS_SOCKET_H sys/socket.h)
+set(LINUX_NETLINK_HEADERS ${LINUX_NETLINK_HEADERS} linux/netlink.h)
+check_include_files("${LINUX_NETLINK_HEADERS}" HAVE_LINUX_NETLINK_H)
+
+if(IS_PY3)
+# On Linux, can.h and can/raw.h require sys/socket.h
+set(LINUX_CAN_HEADERS)
+add_cond(LINUX_CAN_HEADERS HAVE_SYS_SOCKET_H sys/socket.h)
+check_include_files("${LINUX_CAN_HEADERS};linux/can.h" HAVE_LINUX_CAN_H)
+check_include_files("${LINUX_CAN_HEADERS};linux/can/bcm.h" HAVE_LINUX_CAN_BCM_H)
+check_include_files("${LINUX_CAN_HEADERS};linux/can/raw.h" HAVE_LINUX_CAN_RAW_H)
+endif()
+
+check_include_files(memory.h HAVE_MEMORY_H) # libffi and cpython
+check_include_files(minix/config.h HAVE_MINIX_CONFIG_H)
+check_include_files(ncurses.h HAVE_NCURSES_H)
+check_include_files(ncurses/panel.h HAVE_NCURSES_PANEL_H)
+check_include_files(netdb.h HAVE_NETDB_H)
+check_include_files(netinet/in.h HAVE_NETINET_IN_H)
+check_include_files(netpacket/packet.h HAVE_NETPACKET_PACKET_H)
+check_include_files(panel.h HAVE_PANEL_H)
+check_include_files(poll.h HAVE_POLL_H)
+check_include_files(process.h HAVE_PROCESS_H)
+check_include_files(pthread.h HAVE_PTHREAD_H)
+check_include_files(pty.h HAVE_PTY_H)
+check_include_files(pwd.h HAVE_PWD_H)
+check_include_files("stdio.h;readline/readline.h" HAVE_READLINE_READLINE_H)
+check_include_files(semaphore.h HAVE_SEMAPHORE_H)
+check_include_files(shadow.h HAVE_SHADOW_H)
+check_include_files(signal.h HAVE_SIGNAL_H)
+check_include_files(spawn.h HAVE_SPAWN_H)
+check_include_files(stdint.h HAVE_STDINT_H)   # libffi and cpython
+check_include_files(stdlib.h HAVE_STDLIB_H)   # libffi and cpython
+check_include_files(strings.h HAVE_STRINGS_H) # libffi and cpython
+check_include_files(string.h HAVE_STRING_H)   # libffi and cpython
+check_include_files(stropts.h HAVE_STROPTS_H)
+check_include_files(sysexits.h HAVE_SYSEXITS_H)
+check_include_files(sys/audioio.h HAVE_SYS_AUDIOIO_H)
+check_include_files(sys/bsdtty.h HAVE_SYS_BSDTTY_H)
+check_include_files(sys/epoll.h HAVE_SYS_EPOLL_H)
+check_include_files(sys/event.h HAVE_SYS_EVENT_H)
+check_include_files(sys/file.h HAVE_SYS_FILE_H)
+check_include_files(sys/loadavg.h HAVE_SYS_LOADAVG_H)
+check_include_files(sys/lock.h HAVE_SYS_LOCK_H)
+check_include_files(sys/sysmacros.h HAVE_SYS_SYSMACROS_H)
+check_include_files(sys/mkdev.h HAVE_SYS_MKDEV_H)
+check_include_files(sys/mman.h HAVE_SYS_MMAN_H) # libffi and cpython
+check_include_files(sys/modem.h HAVE_SYS_MODEM_H)
+check_include_files(sys/param.h HAVE_SYS_PARAM_H)
+check_include_files(sys/poll.h HAVE_SYS_POLL_H)
+check_include_files(sys/random.h HAVE_SYS_RANDOM_H)
+check_include_files(sys/resource.h HAVE_SYS_RESOURCE_H)
+check_include_files(sys/select.h HAVE_SYS_SELECT_H)
+check_include_files(sys/statvfs.h HAVE_SYS_STATVFS_H)
+check_include_files(sys/stat.h HAVE_SYS_STAT_H) # libffi and cpython
+check_include_files(sys/timeb.h HAVE_SYS_TIMEB_H)
+check_include_files(sys/termio.h HAVE_SYS_TERMIO_H)
+check_include_files(sys/times.h HAVE_SYS_TIMES_H)
+check_include_files(sys/time.h HAVE_SYS_TIME_H)
+check_include_files(sys/types.h HAVE_SYS_TYPES_H) # libffi and cpython
+check_include_files(sys/un.h HAVE_SYS_UN_H)
+check_include_files(sys/utsname.h HAVE_SYS_UTSNAME_H)
+check_include_files(sys/wait.h HAVE_SYS_WAIT_H)
+check_include_files(termios.h HAVE_TERMIOS_H)
+check_include_files(term.h HAVE_TERM_H)
+if(IS_PY2)
+check_include_files(thread.h HAVE_THREAD_H)
+endif()
+check_include_files(unistd.h HAVE_UNISTD_H) # libffi and cpython
+check_include_files(util.h HAVE_UTIL_H)
+check_include_files(utime.h HAVE_UTIME_H)
+check_include_files(wchar.h HAVE_WCHAR_H)
+check_include_files("stdlib.h;stdarg.h;string.h;float.h" STDC_HEADERS) # libffi and cpython
+
+check_include_files(stdarg.h HAVE_STDARG_PROTOTYPES)
+
+if(IS_PY3)
+check_include_files(endian.h HAVE_ENDIAN_H)
+check_include_files(sched.h HAVE_SCHED_H)
+check_include_files(sys/devpoll.h HAVE_SYS_DEVPOLL_H)
+check_include_files(sys/endian.h HAVE_SYS_ENDIAN_H)
+check_include_files(sys/ioctl.h HAVE_SYS_IOCTL_H)
+check_include_files("sys/types.h;sys/kern_control.h" HAVE_SYS_KERN_CONTROL_H)
+check_include_files(sys/sendfile.h HAVE_SYS_SENDFILE_H)
+check_include_files(sys/syscall.h HAVE_SYS_SYSCALL_H)
+check_include_files(sys/sys_domain.h HAVE_SYS_SYS_DOMAIN_H)
+check_include_files(sys/uio.h HAVE_SYS_UIO_H)
+check_include_files(sys/xattr.h HAVE_SYS_XATTR_H)
+
+# On Darwin (OS X) net/if.h requires sys/socket.h to be imported first.
+set(NET_IF_HEADERS stdio.h)
+if(STDC_HEADERS)
+  set(NET_IF_HEADERS stdlib.h stddef.h)
+else()
+  add_cond(NET_IF_HEADERS HAVE_STDLIB_H stdlib.h)
+endif()
+add_cond(NET_IF_HEADERS HAVE_SYS_SOCKET_H sys/socket.h)
+list(APPEND NET_IF_HEADERS net/if.h)
+check_include_files("${NET_IF_HEADERS}" HAVE_NET_IF_H)
+
+endif()
+
+find_file(HAVE_DEV_PTMX NAMES /dev/ptmx PATHS / NO_DEFAULT_PATH)
+find_file(HAVE_DEV_PTC  NAMES /dev/ptc  PATHS / NO_DEFAULT_PATH)
+message(STATUS "ptmx: ${HAVE_DEV_PTMX} ptc: ${HAVE_DEV_PTC}")
+
+find_library(HAVE_LIBCURSES curses)
+find_library(HAVE_LIBCRYPT crypt)
+if(NOT DEFINED HAVE_LIBDL)
+  set(HAVE_LIBDL ${CMAKE_DL_LIBS} CACHE STRING "Name of library containing dlopen and dlcose.")
+endif()
+find_library(HAVE_LIBDLD dld)
+find_library(HAVE_LIBINTL intl)
+
+set(M_LIBRARIES )
+check_function_exists("acosh" HAVE_BUILTIN_ACOSH)
+if(HAVE_BUILTIN_ACOSH)
+  # Math functions are builtin the environment (e.g emscripten)
+  set(M_LIBRARIES )
+  set(HAVE_LIBM 1)
+else()
+  find_library(HAVE_LIBM m)
+  set(M_LIBRARIES ${HAVE_LIBM})
+endif()
+
+find_library(HAVE_LIBNCURSES ncurses)
+find_library(HAVE_LIBNSL nsl)
+find_library(HAVE_LIBREADLINE readline)
+if(IS_PY3)
+find_library(HAVE_LIBSENDFILE sendfile)
+endif()
+find_library(HAVE_LIBTERMCAP termcap)
+
+set(LIBUTIL_LIBRARIES )
+set(LIBUTIL_EXPECTED 1)
+
+if(CMAKE_SYSTEM MATCHES "VxWorks\\-7$")
+  set(LIBUTIL_EXPECTED 0)
+  set(HAVE_LIBUTIL 0)
+endif()
+
+if(LIBUTIL_EXPECTED)
+  check_function_exists("openpty" HAVE_BUILTIN_OPENPTY)
+  if(HAVE_BUILTIN_OPENPTY)
+    # Libutil functions are builtin the environment (e.g emscripten)
+    set(LIBUTIL_LIBRARIES )
+    set(HAVE_LIBUTIL 1)
+  else()
+    if(NOT DEFINED HAVE_LIBUTIL OR "${HAVE_LIBUTIL}" STREQUAL "")
+      find_library(HAVE_LIBUTIL util)
+      message(STATUS "Found libutil: ${HAVE_LIBUTIL}")
+    endif()
+    if(HAVE_LIBUTIL)
+      set(LIBUTIL_LIBRARIES ${HAVE_LIBUTIL})
+    endif()
+  endif()
+  if(NOT HAVE_LIBUTIL)
+    message(FATAL_ERROR "Could NOT find libutil (missing: HAVE_LIBUTIL)")
+  endif()
+endif()
+
+if(APPLE)
+  find_library(HAVE_LIBSYSTEMCONFIGURATION SystemConfiguration)
+endif()
+
+if(WITH_THREAD)
+  set(CMAKE_HAVE_PTHREAD_H ${HAVE_PTHREAD_H}) # Skip checking for header a second time.
+  find_package(Threads)
+  if(CMAKE_HAVE_LIBC_CREATE)
+    set_required_def(_REENTRANT 1)
+  endif()
+endif()
+
+if(IS_PY3)
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/ac_cv_lib_crypto_RAND_egd.c)
+file(WRITE ${check_src} "/* Override any GCC internal prototype to avoid an error.
+  Use char because int might match the return type of a GCC
+  builtin and then its argument prototype would still apply.  */
+#ifdef __cplusplus
+extern \"C\"
+#endif
+char RAND_egd ();
+int main () { return RAND_egd (); }
+")
+cmake_push_check_state()
+list(APPEND CMAKE_REQUIRED_LIBRARIES crypto)
+python_platform_test(
+  HAVE_RAND_EGD
+  "Checking for RAND_egd in -lcrypto"
+  ${check_src}
+  DIRECT
+  )
+cmake_pop_check_state()
+endif()
+
+set_required_def(_GNU_SOURCE 1)       # Define on Linux to activate all library features
+set_required_def(_NETBSD_SOURCE 1)    # Define on NetBSD to activate all library features
+set_required_def(__BSD_VISIBLE 1)     # Define on FreeBSD to activate all library features
+set_required_def(_BSD_TYPES 1)        # Define on Irix to enable u_int
+set_required_def(_DARWIN_C_SOURCE 1)  # Define on Darwin to activate all library features
+
+set_required_def(_ALL_SOURCE 1)       # Enable extensions on AIX 3, Interix.
+set_required_def(_POSIX_PTHREAD_SEMANTICS 1) # Enable threading extensions on Solaris.
+set_required_def(_TANDEM_SOURCE 1)    # Enable extensions on HP NonStop.
+
+set_required_def(__EXTENSIONS__ 1)    # Defined on Solaris to see additional function prototypes.
+
+
+if(HAVE_MINIX_CONFIG_H)
+  set_required_def(_POSIX_SOURCE 1)   # Define to 1 if you need to in order for 'stat' and other things to work.
+  set_required_def(_POSIX_1_SOURCE 2) # Define to 2 if the system does not provide POSIX.1 features except with this defined.
+  set_required_def(_MINIX 1)          # Define to 1 if on MINIX.
+endif()
+
+message(STATUS "Checking for XOPEN_SOURCE")
+
+# Some systems cannot stand _XOPEN_SOURCE being defined at all; they
+# disable features if it is defined, without any means to access these
+# features as extensions. For these systems, we skip the definition of
+# _XOPEN_SOURCE. Before adding a system to the list to gain access to
+# some feature, make sure there is no alternative way to access this
+# feature. Also, when using wildcards, make sure you have verified the
+# need for not defining _XOPEN_SOURCE on all systems matching the
+# wildcard, and that the wildcard does not include future systems
+# (which may remove their limitations).
+set(define_xopen_source 1)
+
+# On OpenBSD, select(2) is not available if _XOPEN_SOURCE is defined,
+# even though select is a POSIX function. Reported by J. Ribbens.
+# Reconfirmed for OpenBSD 3.3 by Zachary Hamm, for 3.4 by Jason Ish.
+# In addition, Stefan Krah confirms that issue #1244610 exists through
+# OpenBSD 4.6, but is fixed in 4.7.
+if(CMAKE_SYSTEM MATCHES "OpenBSD\\-2\\."
+   OR CMAKE_SYSTEM MATCHES "OpenBSD\\-3\\."
+   OR CMAKE_SYSTEM MATCHES "OpenBSD\\-4\\.[0-6]$")
+
+  #OpenBSD/2.* | OpenBSD/3.* | OpenBSD/4.@<:@0123456@:>@
+
+  set(define_xopen_source 0)
+
+  # OpenBSD undoes our definition of __BSD_VISIBLE if _XOPEN_SOURCE is
+  # also defined. This can be overridden by defining _BSD_SOURCE
+  # As this has a different meaning on Linux, only define it on OpenBSD
+  set_required_def(_BSD_SOURCE 1)     # Define on OpenBSD to activate all library features
+
+elseif(CMAKE_SYSTEM MATCHES OpenBSD)
+
+  # OpenBSD/*
+
+  # OpenBSD undoes our definition of __BSD_VISIBLE if _XOPEN_SOURCE is
+  # also defined. This can be overridden by defining _BSD_SOURCE
+  # As this has a different meaning on Linux, only define it on OpenBSD
+  set_required_def(_BSD_SOURCE 1)     # Define on OpenBSD to activate all library features
+
+elseif(CMAKE_SYSTEM MATCHES "NetBSD\\-1\\.5$"
+       OR CMAKE_SYSTEM MATCHES "NetBSD\\-1\\.5\\."
+       OR CMAKE_SYSTEM MATCHES "NetBSD\\-1\\.6$"
+       OR CMAKE_SYSTEM MATCHES "NetBSD\\-1\\.6\\."
+       OR CMAKE_SYSTEM MATCHES "NetBSD\\-1\\.6[A-S]$")
+
+  # NetBSD/1.5 | NetBSD/1.5.* | NetBSD/1.6 | NetBSD/1.6.* | NetBSD/1.6@<:@A-S@:>@
+
+  # Defining _XOPEN_SOURCE on NetBSD version prior to the introduction of
+  # _NETBSD_SOURCE disables certain features (eg. setgroups). Reported by
+  # Marc Recht
+  set(define_xopen_source 0)
+
+elseif(CMAKE_SYSTEM MATCHES SunOS)
+
+  # SunOS/*)
+
+  # From the perspective of Solaris, _XOPEN_SOURCE is not so much a
+  # request to enable features supported by the standard as a request
+  # to disable features not supported by the standard.  The best way
+  # for Python to use Solaris is simply to leave _XOPEN_SOURCE out
+  # entirely and define __EXTENSIONS__ instead.
+
+  set(define_xopen_source 0)
+
+elseif(CMAKE_SYSTEM MATCHES "OpenUNIX\\-8\\.0\\.0$"
+       OR CMAKE_SYSTEM MATCHES "UnixWare\\-7\\.1\\.[0-4]$")
+
+  # OpenUNIX/8.0.0| UnixWare/7.1.@<:@0-4@:>@
+
+  # On UnixWare 7, u_long is never defined with _XOPEN_SOURCE,
+  # but used in /usr/include/netinet/tcp.h. Reported by Tim Rice.
+  # Reconfirmed for 7.1.4 by Martin v. Loewis.
+
+  set(define_xopen_source 0)
+
+elseif(CMAKE_SYSTEM MATCHES "SCO_SV\\-3\\.2$")
+
+  # SCO_SV/3.2
+
+  # On OpenServer 5, u_short is never defined with _XOPEN_SOURCE,
+  # but used in struct sockaddr.sa_family. Reported by Tim Rice.
+
+  set(define_xopen_source 0)
+
+elseif(CMAKE_SYSTEM MATCHES "FreeBSD\\-4\\.")
+
+  # FreeBSD/4.*
+
+  # On FreeBSD 4, the math functions C89 does not cover are never defined
+  # with _XOPEN_SOURCE and __BSD_VISIBLE does not re-enable them.
+
+  set(define_xopen_source 0)
+
+elseif(CMAKE_SYSTEM MATCHES "Darwin\\-[6789]\\."
+       OR CMAKE_SYSTEM MATCHES "Darwin\\-1[0-9]\\.")
+
+  # Darwin/@<:@6789@:>@.*)
+  # Darwin/1@<:@0-9@:>@.*
+
+  # On MacOS X 10.2, a bug in ncurses.h means that it craps out if
+  # _XOPEN_EXTENDED_SOURCE is defined. Apparently, this is fixed in 10.3, which
+  # identifies itself as Darwin/7.*
+  # On Mac OS X 10.4, defining _POSIX_C_SOURCE or _XOPEN_SOURCE
+  # disables platform specific features beyond repair.
+  # On Mac OS X 10.3, defining _POSIX_C_SOURCE or _XOPEN_SOURCE
+  # has no effect, don't bother defining them
+
+  set(define_xopen_source 0)
+
+elseif(CMAKE_SYSTEM MATCHES "AIX\\-4$"
+       OR CMAKE_SYSTEM MATCHES "AIX\\-5\\.1$")
+  # On AIX 4 and 5.1, mbstate_t is defined only when _XOPEN_SOURCE == 500 but
+  # used in wcsnrtombs() and mbsnrtowcs() even if _XOPEN_SOURCE is not defined
+  # or has another value. By not (re)defining it, the defaults come in place.
+
+  set(define_xopen_source 0)
+
+elseif(CMAKE_SYSTEM MATCHES "QNX\\-6\\.3\\.2$")
+
+  # QNX/6.3.2
+
+  # On QNX 6.3.2, defining _XOPEN_SOURCE prevents netdb.h from
+  # defining NI_NUMERICHOST.
+
+  set(define_xopen_source 0)
+
+elseif(CMAKE_SYSTEM MATCHES "VxWorks\\-7$")
+
+  # VxWorks-7
+
+  # On VxWorks-7, defining _XOPEN_SOURCE or _POSIX_C_SOURCE 
+  # leads to a failure in select.h because sys/types.h fails
+  # to define FD_SETSIZE.
+  # Reported by Martin Oberhuber as V7COR-4651.
+
+  set(define_xopen_source 0)
+
+endif()
+
+if(define_xopen_source)
+  message(STATUS "Checking for XOPEN_SOURCE - yes")
+  set_required_def(_XOPEN_SOURCE_EXTENDED 1) # Define to activate Unix95-and-earlier features
+  if(IS_PY2)
+    set_required_def(_XOPEN_SOURCE 600)        # Define to the level of X/Open that your system supports
+    set_required_def(_POSIX_C_SOURCE 200112L)  # Define to activate features from IEEE Stds 1003.1-2001
+  else()
+    set_required_def(_XOPEN_SOURCE 700)        # Define to the level of X/Open that your system supports
+    set_required_def(_POSIX_C_SOURCE 200809L)  # Define to activate features from IEEE Stds 1003.1-2008
+  endif()
+else()
+  message(STATUS "Checking for XOPEN_SOURCE - no")
+endif()
+
+
+message(STATUS "Checking for Large File Support")
+set(use_lfs 1)  # Consider disabling "lfs" if porting to Solaris (2.6 to 9) with gcc 2.95.
+                # See associated test in configure.in
+if(use_lfs)
+  message(STATUS "Checking for Large File Support - yes")
+  if(CMAKE_SYSTEM MATCHES AIX)
+    set_required_def(_LARGE_FILES 1)        # This must be defined on AIX systems to enable large file support.
+  endif()
+  set_required_def(_LARGEFILE_SOURCE 1)     # This must be defined on some systems to enable large file support.
+  set_required_def(_FILE_OFFSET_BITS 64)    # This must be set to 64 on some systems to enable large file support.
+else()
+  message(STATUS "Checking for Large File Support - no")
+endif()
+
+# CMAKE_EXTRA_INCLUDE_FILES is used in CheckTypeSize
+set(CMAKE_EXTRA_INCLUDE_FILES stdio.h)
+
+add_cond(CMAKE_REQUIRED_LIBRARIES HAVE_LIBM "${M_LIBRARIES}")
+add_cond(CMAKE_REQUIRED_LIBRARIES HAVE_LIBINTL ${HAVE_LIBINTL})
+add_cond(CMAKE_REQUIRED_LIBRARIES HAVE_LIBUTIL "${LIBUTIL_LIBRARIES}")
+add_cond(CMAKE_EXTRA_INCLUDE_FILES HAVE_WCHAR_H wchar.h)
+
+TEST_BIG_ENDIAN(WORDS_BIGENDIAN)
+
+check_type_size(double SIZEOF_DOUBLE) # libffi and cpython
+check_type_size(float SIZEOF_FLOAT)
+check_type_size(fpos_t SIZEOF_FPOS_T)
+check_type_size(int SIZEOF_INT)
+check_type_size(long SIZEOF_LONG)
+check_type_size("long double" SIZEOF_LONG_DOUBLE)
+set(HAVE_LONG_DOUBLE ${SIZEOF_LONG_DOUBLE}) # libffi and cpython
+check_type_size("long long" SIZEOF_LONG_LONG)
+set(HAVE_LONG_LONG ${SIZEOF_LONG_LONG})
+check_type_size(off_t SIZEOF_OFF_T)
+check_type_size(pid_t SIZEOF_PID_T)
+check_type_size(pthread_t SIZEOF_PTHREAD_T)
+check_type_size(short SIZEOF_SHORT)
+check_type_size(size_t SIZEOF_SIZE_T)
+check_type_size(ssize_t HAVE_SSIZE_T)
+check_type_size(time_t SIZEOF_TIME_T)
+check_type_size(uintptr_t SIZEOF_UINTPTR_T)
+set(HAVE_UINTPTR_T ${SIZEOF_UINTPTR_T})
+check_type_size("void *" SIZEOF_VOID_P)
+check_type_size(wchar_t SIZEOF_WCHAR_T)
+check_type_size(_Bool SIZEOF__BOOL)
+set(HAVE_C99_BOOL ${SIZEOF__BOOL})
+
+# libffi specific: Check whether more than one size of the long double type is supported
+# TODO
+set(HAVE_LONG_DOUBLE_VARIANT 0)
+
+set(AIX_GENUINE_CPLUSPLUS 0)
+
+set(WITH_DYLD 0)
+set(WITH_NEXT_FRAMEWORK 0)
+if(APPLE)
+  set(WITH_DYLD 1)
+  set(WITH_NEXT_FRAMEWORK 0) # TODO: See --enable-framework option.
+endif()
+
+if(HAVE_LONG_LONG)
+  if(SIZEOF_OFF_T GREATER SIZEOF_LONG
+      AND (SIZEOF_LONG_LONG GREATER SIZEOF_OFF_T OR SIZEOF_LONG_LONG EQUAL SIZEOF_OFF_T))      
+      set(HAVE_LARGEFILE_SUPPORT 1)
+  endif()
+  
+endif()
+
+
+set(CFG_HEADERS )
+
+add_cond(CFG_HEADERS HAVE_SYS_EPOLL_H sys/epoll.h)
+add_cond(CFG_HEADERS HAVE_SYS_EVENT_H sys/event.h)
+add_cond(CFG_HEADERS HAVE_SYS_RANDOM_H sys/random.h)
+add_cond(CFG_HEADERS HAVE_SYS_SYSMACROS_H sys/sysmacros.h)
+add_cond(CFG_HEADERS HAVE_SYS_TYPES_H sys/types.h)
+add_cond(CFG_HEADERS HAVE_SYS_TIME_H sys/time.h)
+add_cond(CFG_HEADERS HAVE_SYS_FILE_H sys/file.h)
+add_cond(CFG_HEADERS HAVE_SYS_POLL_H sys/poll.h)
+add_cond(CFG_HEADERS HAVE_SYS_STATVFS_H sys/statvfs.h)
+add_cond(CFG_HEADERS HAVE_SYS_STAT_H sys/stat.h)
+add_cond(CFG_HEADERS HAVE_SYS_LOCK_H sys/lock.h)
+add_cond(CFG_HEADERS HAVE_SYS_TIMEB_H sys/timeb.h)
+add_cond(CFG_HEADERS HAVE_SYS_TIMES_H sys/times.h)
+add_cond(CFG_HEADERS HAVE_SYS_UIO_H sys/uio.h)
+add_cond(CFG_HEADERS HAVE_SYS_UTSNAME_H sys/utsname.h)
+add_cond(CFG_HEADERS HAVE_SYS_MMAN_H sys/mman.h)
+add_cond(CFG_HEADERS HAVE_SYS_SOCKET_H sys/socket.h)
+add_cond(CFG_HEADERS HAVE_SYS_WAIT_H sys/wait.h)
+add_cond(CFG_HEADERS HAVE_PWD_H pwd.h)
+add_cond(CFG_HEADERS HAVE_GRP_H grp.h)
+add_cond(CFG_HEADERS HAVE_SHADOW_H shadow.h)
+add_cond(CFG_HEADERS HAVE_INTTYPES_H inttypes.h)
+add_cond(CFG_HEADERS HAVE_LOCALE_H locale.h)
+add_cond(CFG_HEADERS HAVE_LIBINTL_H libintl.h)
+add_cond(CFG_HEADERS HAVE_FCNTL_H fcntl.h)
+add_cond(CFG_HEADERS HAVE_PTY_H pty.h)
+add_cond(CFG_HEADERS HAVE_SIGNAL_H signal.h)
+add_cond(CFG_HEADERS HAVE_STDINT_H stdint.h)
+add_cond(CFG_HEADERS HAVE_STDLIB_H stdlib.h)
+add_cond(CFG_HEADERS HAVE_STRING_H string.h)
+add_cond(CFG_HEADERS HAVE_UTIL_H util.h)
+add_cond(CFG_HEADERS HAVE_UNISTD_H unistd.h)
+add_cond(CFG_HEADERS HAVE_UTIME_H utime.h)
+add_cond(CFG_HEADERS HAVE_WCHAR_H wchar.h)
+if(IS_PY3)
+add_cond(CFG_HEADERS HAVE_DIRENT_H dirent.h)
+add_cond(CFG_HEADERS HAVE_ENDIAN_H endian.h)
+add_cond(CFG_HEADERS HAVE_NET_IF_H net/if.h)
+add_cond(CFG_HEADERS HAVE_SCHED_H sched.h)
+add_cond(CFG_HEADERS HAVE_SYS_ENDIAN_H sys/endian.h)
+add_cond(CFG_HEADERS HAVE_SYS_RESOURCE_H sys/resource.h)
+add_cond(CFG_HEADERS HAVE_SYS_SENDFILE_H sys/sendfile.h)
+add_cond(CFG_HEADERS HAVE_SYS_TIME_H sys/time.h)
+endif()
+
+if(HAVE_PTY_H)
+  set(CFG_HEADERS ${CFG_HEADERS} pty.h utmp.h)
+endif()
+
+set(CFG_HEADERS ${CFG_HEADERS} time.h stdio.h math.h)
+
+check_symbol_exists(alarm        "${CFG_HEADERS}" HAVE_ALARM)
+check_symbol_exists(alloca       "${CFG_HEADERS}" HAVE_ALLOCA) # libffi and cpython
+check_symbol_exists(altzone      "${CFG_HEADERS}" HAVE_ALTZONE)
+check_symbol_exists(bind_textdomain_codeset "${CFG_HEADERS}" HAVE_BIND_TEXTDOMAIN_CODESET)
+check_symbol_exists(chflags      "${CFG_HEADERS}" HAVE_CHFLAGS)
+check_symbol_exists(chown        "${CFG_HEADERS}" HAVE_CHOWN)
+check_symbol_exists(chroot       "${CFG_HEADERS}" HAVE_CHROOT)
+check_symbol_exists(clock        "${CFG_HEADERS}" HAVE_CLOCK)
+check_symbol_exists(confstr      "${CFG_HEADERS}" HAVE_CONFSTR)
+check_symbol_exists(ctermid      "${CFG_HEADERS}" HAVE_CTERMID)
+check_symbol_exists(ctermid_r    "${CFG_HEADERS}" HAVE_CTERMID_R)
+check_symbol_exists(dup2         "${CFG_HEADERS}" HAVE_DUP2)
+check_symbol_exists(epoll_create "${CFG_HEADERS}" HAVE_EPOLL)
+if(IS_PY3)
+check_symbol_exists(epoll_create1 "${CFG_HEADERS}" HAVE_EPOLL_CREATE1)
+endif()
+check_symbol_exists(execv        "${CFG_HEADERS}" HAVE_EXECV)
+check_symbol_exists(fchdir       "${CFG_HEADERS}" HAVE_FCHDIR)
+check_symbol_exists(fchmod       "${CFG_HEADERS}" HAVE_FCHMOD)
+check_symbol_exists(fchown       "${CFG_HEADERS}" HAVE_FCHOWN)
+check_symbol_exists(fdatasync    "${CFG_HEADERS}" HAVE_FDATASYNC)
+check_symbol_exists(flock        "${CFG_HEADERS}" HAVE_FLOCK)
+if(NOT HAVE_FLOCK)
+  check_library_exists(bsd flock "" FLOCK_NEEDS_LIBBSD)
+endif()
+check_symbol_exists(fork         "${CFG_HEADERS}" HAVE_FORK)
+check_symbol_exists(forkpty      "${CFG_HEADERS}" HAVE_FORKPTY)
+check_symbol_exists(fpathconf    "${CFG_HEADERS}" HAVE_FPATHCONF)
+cmake_push_check_state()
+set(CFG_HEADERS_SAVE ${CFG_HEADERS})
+add_cond(CFG_HEADERS HAVE_FPU_CONTROL_H fpu_control.h)
+check_symbol_exists(__fpu_control  "${CFG_HEADERS}" HAVE___FPU_CONTROL)
+if(NOT HAVE___FPU_CONTROL)
+  check_library_exists(ieee __fpu_control "" HAVE_LIBIEEE)
+endif()
+set(CFG_HEADERS ${CFG_HEADERS_SAVE})
+cmake_pop_check_state()
+check_symbol_exists(fseek64      "${CFG_HEADERS}" HAVE_FSEEK64)
+check_symbol_exists(fseeko       "${CFG_HEADERS}" HAVE_FSEEKO)
+check_symbol_exists(fstatvfs     "${CFG_HEADERS}" HAVE_FSTATVFS)
+check_symbol_exists(fsync        "${CFG_HEADERS}" HAVE_FSYNC)
+check_symbol_exists(ftell64      "${CFG_HEADERS}" HAVE_FTELL64)
+check_symbol_exists(ftello       "${CFG_HEADERS}" HAVE_FTELLO)
+check_symbol_exists(ftime        "${CFG_HEADERS}" HAVE_FTIME)
+check_symbol_exists(ftruncate    "${CFG_HEADERS}" HAVE_FTRUNCATE)
+if(IS_PY2)
+check_symbol_exists(getcwd       "${CFG_HEADERS}" HAVE_GETCWD)
+endif()
+check_symbol_exists(getc_unlocked   "${CFG_HEADERS}" HAVE_GETC_UNLOCKED)
+check_symbol_exists(getgroups       "${CFG_HEADERS}" HAVE_GETGROUPS)
+check_symbol_exists(getitimer    "${CFG_HEADERS}" HAVE_GETITIMER)
+check_symbol_exists(getloadavg   "${CFG_HEADERS}" HAVE_GETLOADAVG)
+check_symbol_exists(getlogin     "${CFG_HEADERS}" HAVE_GETLOGIN)
+check_symbol_exists(getpagesize  "${CFG_HEADERS}" HAVE_GETPAGESIZE)
+check_symbol_exists(getpgid      "${CFG_HEADERS}" HAVE_GETPGID)
+check_symbol_exists(getpgrp      "${CFG_HEADERS}" HAVE_GETPGRP)
+check_symbol_exists(getpid       "${CFG_HEADERS}" HAVE_GETPID)
+python_check_function(getpriority HAVE_GETPRIORITY)
+check_symbol_exists(getpwent     "${CFG_HEADERS}" HAVE_GETPWENT)
+check_symbol_exists(getresgid    "${CFG_HEADERS}" HAVE_GETRESGID)
+check_symbol_exists(getresuid    "${CFG_HEADERS}" HAVE_GETRESUID)
+check_symbol_exists(getsid       "${CFG_HEADERS}" HAVE_GETSID)
+check_symbol_exists(getspent     "${CFG_HEADERS}" HAVE_GETSPENT)
+check_symbol_exists(getspnam     "${CFG_HEADERS}" HAVE_GETSPNAM)
+check_symbol_exists(gettimeofday "${CFG_HEADERS}" HAVE_GETTIMEOFDAY)
+check_symbol_exists(getwd        "${CFG_HEADERS}" HAVE_GETWD)
+check_symbol_exists(hypot        "${CFG_HEADERS}" HAVE_HYPOT)
+check_symbol_exists(initgroups   "${CFG_HEADERS}" HAVE_INITGROUPS)
+check_symbol_exists(kill         "${CFG_HEADERS}" HAVE_KILL)
+check_symbol_exists(killpg       "${CFG_HEADERS}" HAVE_KILLPG)
+check_symbol_exists(kqueue       "${CFG_HEADERS}" HAVE_KQUEUE)
+check_symbol_exists(lchflags     "${CFG_HEADERS}" HAVE_LCHFLAGS)
+python_check_function(lchmod HAVE_LCHMOD)
+check_symbol_exists(lchown       "${CFG_HEADERS}" HAVE_LCHOWN)
+check_symbol_exists(link         "${CFG_HEADERS}" HAVE_LINK)
+check_symbol_exists(lstat        "${CFG_HEADERS}" HAVE_LSTAT)
+check_symbol_exists(makedev      "${CFG_HEADERS}" HAVE_MAKEDEV)
+check_symbol_exists(memcpy       "${CFG_HEADERS}" HAVE_MEMCPY) # libffi and cpython
+check_symbol_exists(memmove      "${CFG_HEADERS}" HAVE_MEMMOVE)
+check_symbol_exists(mkfifo       "${CFG_HEADERS}" HAVE_MKFIFO)
+check_symbol_exists(mknod        "${CFG_HEADERS}" HAVE_MKNOD)
+check_symbol_exists(mktime       "${CFG_HEADERS}" HAVE_MKTIME)
+check_symbol_exists(mmap         "${CFG_HEADERS}" HAVE_MMAP) # libffi and cpython
+check_symbol_exists(mremap       "${CFG_HEADERS}" HAVE_MREMAP)
+check_symbol_exists(nice         "${CFG_HEADERS}" HAVE_NICE)
+check_symbol_exists(openpty      "${CFG_HEADERS}" HAVE_OPENPTY)
+check_symbol_exists(pathconf     "${CFG_HEADERS}" HAVE_PATHCONF)
+check_symbol_exists(pause        "${CFG_HEADERS}" HAVE_PAUSE)
+check_symbol_exists(plock        "${CFG_HEADERS}" HAVE_PLOCK)
+check_symbol_exists(poll         "${CFG_HEADERS}" HAVE_POLL)
+check_symbol_exists(putenv       "${CFG_HEADERS}" HAVE_PUTENV)
+check_symbol_exists(readlink     "${CFG_HEADERS}" HAVE_READLINK)
+check_symbol_exists(realpath     "${CFG_HEADERS}" HAVE_REALPATH)
+check_symbol_exists(select       "${CFG_HEADERS}" HAVE_SELECT)
+check_symbol_exists(setegid      "${CFG_HEADERS}" HAVE_SETEGID)
+check_symbol_exists(seteuid      "${CFG_HEADERS}" HAVE_SETEUID)
+check_symbol_exists(setgid       "${CFG_HEADERS}" HAVE_SETGID)
+check_symbol_exists(setgroups    "${CFG_HEADERS}" HAVE_SETGROUPS)
+check_symbol_exists(setitimer    "${CFG_HEADERS}" HAVE_SETITIMER)
+check_symbol_exists(setlocale    "${CFG_HEADERS}" HAVE_SETLOCALE)
+check_symbol_exists(setpgid      "${CFG_HEADERS}" HAVE_SETPGID)
+check_symbol_exists(setpgrp      "${CFG_HEADERS}" HAVE_SETPGRP)
+check_symbol_exists(setregid     "${CFG_HEADERS}" HAVE_SETREGID)
+check_symbol_exists(setreuid     "${CFG_HEADERS}" HAVE_SETREUID)
+check_symbol_exists(setresgid    "${CFG_HEADERS}" HAVE_SETRESGID)
+check_symbol_exists(setresuid    "${CFG_HEADERS}" HAVE_SETRESUID)
+check_symbol_exists(setsid       "${CFG_HEADERS}" HAVE_SETSID)
+check_symbol_exists(setuid       "${CFG_HEADERS}" HAVE_SETUID)
+check_symbol_exists(setvbuf      "${CFG_HEADERS}" HAVE_SETVBUF)
+check_symbol_exists(sigaction    "${CFG_HEADERS}" HAVE_SIGACTION)
+check_symbol_exists(siginterrupt "${CFG_HEADERS}" HAVE_SIGINTERRUPT)
+check_symbol_exists(sigrelse     "${CFG_HEADERS}" HAVE_SIGRELSE)
+check_symbol_exists(snprintf     "${CFG_HEADERS}" HAVE_SNPRINTF)
+check_symbol_exists(socketpair   "${CFG_HEADERS}" HAVE_SOCKETPAIR)
+check_symbol_exists(statvfs      "${CFG_HEADERS}" HAVE_STATVFS)
+check_symbol_exists(strdup       "${CFG_HEADERS}" HAVE_STRDUP)
+check_symbol_exists(strftime     "${CFG_HEADERS}" HAVE_STRFTIME)
+check_symbol_exists(symlink      "${CFG_HEADERS}" HAVE_SYMLINK)
+check_symbol_exists(sysconf      "${CFG_HEADERS}" HAVE_SYSCONF)
+check_symbol_exists(tcgetpgrp    "${CFG_HEADERS}" HAVE_TCGETPGRP)
+check_symbol_exists(tcsetpgrp    "${CFG_HEADERS}" HAVE_TCSETPGRP)
+check_symbol_exists(tempnam      "${CFG_HEADERS}" HAVE_TEMPNAM)
+check_symbol_exists(timegm       "${CFG_HEADERS}" HAVE_TIMEGM)
+check_symbol_exists(times        "${CFG_HEADERS}" HAVE_TIMES)
+check_symbol_exists(tmpfile      "${CFG_HEADERS}" HAVE_TMPFILE)
+check_symbol_exists(tmpnam       "${CFG_HEADERS}" HAVE_TMPNAM)
+check_symbol_exists(tmpnam_r     "${CFG_HEADERS}" HAVE_TMPNAM_R)
+check_symbol_exists(truncate     "${CFG_HEADERS}" HAVE_TRUNCATE)
+check_symbol_exists(uname        "${CFG_HEADERS}" HAVE_UNAME)
+check_symbol_exists(unsetenv     "${CFG_HEADERS}" HAVE_UNSETENV)
+check_symbol_exists(utimes       "${CFG_HEADERS}" HAVE_UTIMES)
+check_symbol_exists(wait3        "${CFG_HEADERS}" HAVE_WAIT3)
+check_symbol_exists(wait4        "${CFG_HEADERS}" HAVE_WAIT4)
+check_symbol_exists(waitpid      "${CFG_HEADERS}" HAVE_WAITPID)
+check_symbol_exists(wcscoll      "${CFG_HEADERS}" HAVE_WCSCOLL)
+check_symbol_exists(_getpty      "${CFG_HEADERS}" HAVE__GETPTY)
+
+if(IS_PY3)
+check_symbol_exists(accept4      "${CFG_HEADERS}" HAVE_ACCEPT4)
+check_symbol_exists(dup3         "${CFG_HEADERS}" HAVE_DUP3)
+check_symbol_exists(faccessat    "${CFG_HEADERS}" HAVE_FACCESSAT)
+check_symbol_exists(fchmodat     "${CFG_HEADERS}" HAVE_FCHMODAT)
+check_symbol_exists(fchownat     "${CFG_HEADERS}" HAVE_FCHOWNAT)
+check_symbol_exists(fexecve      "${CFG_HEADERS}" HAVE_FEXECVE)
+check_symbol_exists(fdopendir    "${CFG_HEADERS}" HAVE_FDOPENDIR)
+check_symbol_exists(fstatat      "${CFG_HEADERS}" HAVE_FSTATAT)
+check_symbol_exists(futimens     "${CFG_HEADERS}" HAVE_FUTIMENS)
+check_symbol_exists(futimes      "${CFG_HEADERS}" HAVE_FUTIMES)
+check_symbol_exists(futimesat    "${CFG_HEADERS}" HAVE_FUTIMESAT)
+check_symbol_exists(getentropy   "${CFG_HEADERS}" HAVE_GETENTROPY)
+python_check_function(getpriority HAVE_GETPRIORITY)
+check_symbol_exists(getgrouplist "${CFG_HEADERS}" HAVE_GETGROUPLIST)
+check_symbol_exists(htole64      "${CFG_HEADERS}" HAVE_HTOLE64)
+check_symbol_exists(if_nameindex "${CFG_HEADERS}" HAVE_IF_NAMEINDEX)
+check_symbol_exists(linkat       "${CFG_HEADERS}" HAVE_LINKAT)
+check_symbol_exists(lockf        "${CFG_HEADERS}" HAVE_LOCKF)
+check_symbol_exists(lutimes      "${CFG_HEADERS}" HAVE_LUTIMES)
+check_symbol_exists(mbrtowc      "${CFG_HEADERS}" HAVE_MBRTOWC)
+check_symbol_exists(memrchr      "${CFG_HEADERS}" HAVE_MEMRCHR)
+check_symbol_exists(mkdirat      "${CFG_HEADERS}" HAVE_MKDIRAT)
+check_symbol_exists(mkfifoat     "${CFG_HEADERS}" HAVE_MKFIFOAT)
+check_symbol_exists(mknodat      "${CFG_HEADERS}" HAVE_MKNODAT)
+check_symbol_exists(openat       "${CFG_HEADERS}" HAVE_OPENAT)
+check_symbol_exists(pipe2        "${CFG_HEADERS}" HAVE_PIPE2)
+check_symbol_exists(posix_fadvise          "${CFG_HEADERS}" HAVE_POSIX_FADVISE)
+check_symbol_exists(posix_fallocate        "${CFG_HEADERS}" HAVE_POSIX_FALLOCATE)
+check_symbol_exists(pread                  "${CFG_HEADERS}" HAVE_PREAD)
+check_symbol_exists(prlimit                "${CFG_HEADERS}" HAVE_PRLIMIT)
+
+cmake_push_check_state()
+list(APPEND CMAKE_REQUIRED_LIBRARIES pthread)
+check_symbol_exists(pthread_kill           "${CFG_HEADERS}" HAVE_PTHREAD_KILL)
+cmake_pop_check_state()
+
+check_symbol_exists(pwrite                 "${CFG_HEADERS}" HAVE_PWRITE)
+check_symbol_exists(readlinkat             "${CFG_HEADERS}" HAVE_READLINKAT)
+check_symbol_exists(readv                  "${CFG_HEADERS}" HAVE_READV)
+check_symbol_exists(renameat               "${CFG_HEADERS}" HAVE_RENAMEAT)
+check_symbol_exists(sched_rr_get_interval  "${CFG_HEADERS}" HAVE_SCHED_RR_GET_INTERVAL)
+check_symbol_exists(sched_setaffinity      "${CFG_HEADERS}" HAVE_SCHED_SETAFFINITY)
+check_symbol_exists(sched_setparam         "${CFG_HEADERS}" HAVE_SCHED_SETPARAM)
+check_symbol_exists(sched_setscheduler     "${CFG_HEADERS}" HAVE_SCHED_SETSCHEDULER)
+check_symbol_exists(sendfile               "${CFG_HEADERS}" HAVE_SENDFILE)
+check_symbol_exists(sethostname            "${CFG_HEADERS}" HAVE_SETHOSTNAME)
+check_symbol_exists(setpriority            "${CFG_HEADERS}" HAVE_SETPRIORITY)
+check_symbol_exists(sched_get_priority_max "${CFG_HEADERS}" HAVE_SCHED_GET_PRIORITY_MAX)
+check_symbol_exists(sigaltstack            "${CFG_HEADERS}" HAVE_SIGALTSTACK)
+check_symbol_exists(sigpending             "${CFG_HEADERS}" HAVE_SIGPENDING)
+check_symbol_exists(sigtimedwait           "${CFG_HEADERS}" HAVE_SIGTIMEDWAIT)
+check_symbol_exists(sigwait                "${CFG_HEADERS}" HAVE_SIGWAIT)
+check_symbol_exists(sigwaitinfo            "${CFG_HEADERS}" HAVE_SIGWAITINFO)
+check_symbol_exists(strlcpy                "${CFG_HEADERS}" HAVE_STRLCPY)
+check_symbol_exists(symlinkat              "${CFG_HEADERS}" HAVE_SYMLINKAT)
+check_symbol_exists(sync                   "${CFG_HEADERS}" HAVE_SYNC)
+check_symbol_exists(unlinkat               "${CFG_HEADERS}" HAVE_UNLINKAT)
+check_symbol_exists(utimensat              "${CFG_HEADERS}" HAVE_UTIMENSAT)
+check_symbol_exists(waitid                 "${CFG_HEADERS}" HAVE_WAITID)
+check_symbol_exists(wcsftime               "${CFG_HEADERS}" HAVE_WCSFTIME)
+check_symbol_exists(wcsxfrm                "${CFG_HEADERS}" HAVE_WCSXFRM)
+check_symbol_exists(wmemcmp                "${CFG_HEADERS}" HAVE_WMEMCMP)
+check_symbol_exists(writev                 "${CFG_HEADERS}" HAVE_WRITEV)
+endif()
+
+check_struct_has_member("struct stat" st_mtim.tv_nsec "${CFG_HEADERS}" HAVE_STAT_TV_NSEC)
+check_struct_has_member("struct stat" st_mtimespec.tv_nsec "${CFG_HEADERS}"    HAVE_STAT_TV_NSEC2)
+check_struct_has_member("struct stat" st_birthtime "${CFG_HEADERS}"    HAVE_STRUCT_STAT_ST_BIRTHTIME)
+check_struct_has_member("struct stat" st_blksize "${CFG_HEADERS}"    HAVE_STRUCT_STAT_ST_BLKSIZE)
+check_struct_has_member("struct stat" st_blocks  "${CFG_HEADERS}"    HAVE_STRUCT_STAT_ST_BLOCKS)
+set(HAVE_ST_BLOCKS ${HAVE_STRUCT_STAT_ST_BLOCKS})
+check_struct_has_member("struct stat" st_flags   "${CFG_HEADERS}"    HAVE_STRUCT_STAT_ST_FLAGS)
+check_struct_has_member("struct stat" st_gen     "${CFG_HEADERS}"    HAVE_STRUCT_STAT_ST_GEN)
+check_struct_has_member("struct stat" st_rdev    "${CFG_HEADERS}"    HAVE_STRUCT_STAT_ST_RDEV)
+
+#######################################################################
+#
+# Check for gcc x64 inline assembler
+#
+#######################################################################
+
+if(IS_PY3)
+
+# Check for x64 gcc inline assembler
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/have_gcc_asm_for_x64.c)
+file(WRITE ${check_src} "int main () {
+  __asm__ __volatile__ (\"movq %rcx, %rax\");
+}
+")
+python_platform_test(
+  HAVE_GCC_ASM_FOR_X64
+  "Checking for x64 gcc inline assembler"
+  ${check_src}
+  DIRECT
+  )
+
+endif()
+
+#######################################################################
+#
+# Check for various properties of floating point
+#
+#######################################################################
+
+# Check whether C doubles are little-endian IEEE 754 binary64
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/ac_cv_little_endian_double.c)
+file(WRITE ${check_src} "#include <string.h>
+int main() {
+    double x = 9006104071832581.0;
+    if (memcmp(&x, \"\\x05\\x04\\x03\\x02\\x01\\xff\\x3f\\x43\", 8) == 0)
+        return 0;
+    else
+        return 1;
+}
+")
+python_platform_test_run(
+  DOUBLE_IS_LITTLE_ENDIAN_IEEE754
+  "Checking whether C doubles are little-endian IEEE 754 binary64"
+  ${check_src}
+  DIRECT
+  )
+
+# Check whether C doubles are big-endian IEEE 754 binary64
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/ac_cv_big_endian_double.c)
+file(WRITE ${check_src} "#include <string.h>
+int main() {
+    double x = 9006104071832581.0;
+    if (memcmp(&x, \"\\x43\\x3f\\xff\\x01\\x02\\x03\\x04\\x05\", 8) == 0)
+        return 0;
+    else
+        return 1;
+}
+")
+python_platform_test_run(
+  DOUBLE_IS_BIG_ENDIAN_IEEE754
+  "Checking whether C doubles are big-endian IEEE 754 binary64"
+  ${check_src}
+  DIRECT
+  )
+
+# Check whether C doubles are ARM mixed-endian IEEE 754 binary64
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/ac_cv_mixed_endian_double.c)
+file(WRITE ${check_src} "#include <string.h>
+int main() {
+    double x = 9006104071832581.0;
+    if (memcmp(&x, \"\\x01\\xff\\x3f\\x43\\x05\\x04\\x03\\x02\", 8) == 0)
+        return 0;
+    else
+        return 1;
+}
+")
+python_platform_test_run(
+  DOUBLE_IS_ARM_MIXED_ENDIAN_IEEE754
+  "Checking doubles are ARM mixed-endian IEEE 754 binary64"
+  ${check_src}
+  DIRECT
+  )
+
+# The short float repr introduced in Python 3.1 requires the
+# correctly-rounded string <-> double conversion functions from
+# Python/dtoa.c, which in turn require that the FPU uses 53-bit
+# rounding; this is a problem on x86, where the x87 FPU has a default
+# rounding precision of 64 bits.  For gcc/x86, we can fix this by
+# using inline assembler to get and set the x87 FPU control word.
+
+# This inline assembler syntax may also work for suncc and icc,
+# so we try it on all platforms.
+
+# Check whether we can use gcc inline assembler to get and set x87 control word
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/have_gcc_asm_for_x87.c)
+file(WRITE ${check_src} "int main() {
+  unsigned short cw;
+  __asm__ __volatile__ (\"fnstcw %0\" : \"=m\" (cw));
+  __asm__ __volatile__ (\"fldcw %0\" : : \"m\" (cw));
+}
+")
+python_platform_test(
+  HAVE_GCC_ASM_FOR_X87
+  "Checking whether we can use gcc inline assembler to get and set x87 control word"
+  ${check_src}
+  DIRECT
+  )
+
+# libffi specific: Cannot use PROT_EXEC on this target, so, we revert to alternative means
+# XXX In autoconf system, it was set to true if target matches *arm*-apple-darwin*
+if(NOT DEFINED FFI_EXEC_TRAMPOLINE_TABLE)
+  set(FFI_EXEC_TRAMPOLINE_TABLE 0)
+endif()
+
+# libffi specific: Define this if you want to enable pax emulated trampolines
+# On PaX enable kernels that have MPROTECT enable we can't use PROT_EXEC.
+# XXX Add option 'FFI_MMAP_EXEC_EMUTRAMP_PAX'.
+if(NOT DEFINED FFI_MMAP_EXEC_EMUTRAMP_PAX)
+  set(FFI_MMAP_EXEC_EMUTRAMP_PAX 0)
+endif()
+
+# libffi specific: Check whether read-only mmap of a plain file works
+if(NOT DEFINED HAVE_MMAP_FILE)
+  set(msg "Checking whether read-only mmap of a plain file works")
+  message(STATUS "${msg}")
+  set(value 1)
+  set(status "yes")
+  if(NOT HAVE_SYS_MMAN_H OR NOT HAVE_MMAP)
+    set(value 0)
+    set(status "no")
+  endif()
+  message(STATUS "${msg} - ${status}")
+  set(HAVE_MMAP_FILE "${value}" CACHE INTERNAL "Have support for mmap_file")
+endif()
+
+# libffi specific: check whether mmap works
+# XXX Add a system to this blacklist if
+#     mmap(0, stat_size, PROT_READ, MAP_PRIVATE, fd, 0) doesn't return a
+#     memory area containing the same data that you'd get if you applied
+#     read() to the same fd.  The only system known to have a problem here
+#     is VMS, where text files have record structure.
+
+# libffi specific: Check whether assembler supports .ascii.
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/have_as_ascii_pseudo_op.c)
+file(WRITE ${check_src} "
+int main () {
+asm (\".ascii \\\"string\\\"\");
+return 0;
+}
+")
+python_platform_test(
+  HAVE_AS_ASCII_PSEUDO_OP
+  "Checking whether assembler supports .ascii"
+  ${check_src}
+  DIRECT
+  )
+
+# libffi specific: Check whether assembler supports .cfi_* directives
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/have_as_cfi_pseudo_op.c)
+file(WRITE ${check_src} "
+asm(\".cfi_startproc\\n\\t.cfi_endproc\");
+int main (){return 0;}
+")
+python_platform_test(
+  HAVE_AS_CFI_PSEUDO_OP
+  "Checking whether assembler supports .cfi_* directives"
+  ${check_src}
+  DIRECT
+  )
+
+# libffi specific: Check whether assembler supports .string.
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/have_as_string_pseudo_op.c)
+file(WRITE ${check_src} "
+int main () {
+asm (\".string \\\"string\\\"\");
+return 0;
+}
+")
+python_platform_test(
+  HAVE_AS_STRING_PSEUDO_OP
+  "Checking whether assembler supports .string"
+  ${check_src}
+  DIRECT
+  )
+
+# libffi specific: Check whether assembler supports unwind section type.
+# TODO
+set(HAVE_AS_X86_64_UNWIND_SECTION_TYPE 1)
+
+# libffi specific: Check whether assembler supports PC relative relocs
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/have_as_x86_pcrel.c)
+file(WRITE ${check_src} "int main() {
+    __asm__ __volatile__ (\".text; ha: nop; .data; .long ha-.; .text\");
+}
+")
+python_platform_test(
+  HAVE_AS_X86_PCREL
+  "Checking whether assembler supports PC relative relocs"
+  ${check_src}
+  DIRECT
+  )
+
+# libffi specific: Check whether .eh_frame sections should be read-only.
+# TODO
+set(HAVE_RO_EH_FRAME 1)
+
+# libffi specific: Check whether symbols are underscored
+# TODO
+set(SYMBOL_UNDERSCORE 0)
+
+# libffi specific: Check compiler for symbol visibility support
+check_c_source_compiles("
+        __attribute__((visibility(\"default\")))
+        int bar(void) {};
+        int main() {bar();}"
+        HAVE_HIDDEN_VISIBILITY_ATTRIBUTE)
+
+# libffi specific: Check system for MAP_ANONYMOUS
+check_c_source_compiles("
+#include <sys/types.h>
+#include <sys/mman.h>
+#include <unistd.h>
+
+#ifndef MAP_ANONYMOUS
+#define MAP_ANONYMOUS MAP_ANON
+#endif
+
+int main() {int a = MAP_ANONYMOUS;}"
+HAVE_MMAP_ANON)
+
+# libffi specific: Check for /dev/zero support for anonymous memory maps
+check_c_source_runs("
+#include <stdlib.h>
+#include <sys/types.h>
+#include <sys/mman.h>
+#include <fcntl.h>
+int main(void) {
+  int devzero;
+  void *retval;
+  devzero = open(\"/dev/zero\", O_RDWR);
+  if (-1 == devzero) {
+    exit(1);
+  }
+  retval = mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_SHARED, devzero, 0);
+  if (retval == (void *)-1) {
+    exit(1);
+  }
+  exit(0);
+}" HAVE_MMAP_DEV_ZERO)
+
+if(IS_PY3)
+
+# Check whether we can use gcc inline assembler to get and set mc68881 fpcr
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/have_gcc_asm_for_mc68881.c)
+file(WRITE ${check_src} "int main() {
+  unsigned int fpcr;
+  __asm__ __volatile__ (\"fmove.l %%fpcr,%0\" : \"=g\" (fpcr));
+  __asm__ __volatile__ (\"fmove.l %0,%%fpcr\" : : \"g\" (fpcr));
+}
+")
+python_platform_test(
+  HAVE_GCC_ASM_FOR_MC68881
+  "Checking whether we can use gcc inline assembler to get and set mc68881 fpcr"
+  ${check_src}
+  DIRECT
+  )
+
+endif()
+
+
+# Check for x87-style double rounding
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/ac_cv_x87_double_rounding.c)
+file(WRITE ${check_src} "#include <stdlib.h>
+#include <math.h>
+int main() {
+    volatile double x, y, z;
+    /* 1./(1-2**-53) -> 1+2**-52 (correct), 1.0 (double rounding) */
+    x = 0.99999999999999989; /* 1-2**-53 */
+    y = 1./x;
+    if (y != 1.)
+        exit(0);
+    /* 1e16+2.99999 -> 1e16+2. (correct), 1e16+4. (double rounding) */
+    x = 1e16;
+    y = 2.99999;
+    z = x + y;
+    if (z != 1e16+4.)
+        exit(0);
+    /* both tests show evidence of double rounding */
+    exit(1);
+}
+")
+python_platform_test_run(
+  X87_DOUBLE_ROUNDING
+  "Checking for x87-style double rounding"
+  ${check_src}
+  INVERT
+  )
+
+#######################################################################
+#
+# Check for mathematical functions
+#
+#######################################################################
+
+cmake_push_check_state()
+
+# Check whether tanh preserves the sign of zero
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/ac_cv_tanh_preserves_zero_sign.c)
+file(WRITE ${check_src} "#include <math.h>
+#include <stdlib.h>
+int main() {
+    /* return 0 if either negative zeros don't exist
+       on this platform or if negative zeros exist
+       and tanh(-0.) == -0. */
+  if (atan2(0., -1.) == atan2(-0., -1.) ||
+      atan2(tanh(-0.), -1.) == atan2(-0., -1.)) exit(0);
+  else exit(1);
+}
+")
+python_platform_test_run(
+  TANH_PRESERVES_ZERO_SIGN
+  "Checking whether tanh preserves the sign of zero"
+  ${check_src}
+  DIRECT
+  )
+
+if(IS_PY3)
+# Check whether log1p drops the sign of negative zero
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/ac_cv_log1p_drops_zero_sign.c)
+file(WRITE ${check_src} "#include <math.h>
+#include <stdlib.h>
+int main() {
+  /* Fail if the signs of log1p(-0.) and -0. can be distinguished. */
+  if (atan2(log1p(-0.), -1.) == atan2(-0., -1.))
+      return 0;
+  else
+      return 1;
+}
+")
+python_platform_test_run(
+  LOG1P_DROPS_ZERO_SIGN
+  "Checking whether log1p drops the sign of negative zero"
+  ${check_src}
+  INVERT
+  )
+endif()
+
+set(_funcs acosh asinh atanh copysign erf erfc expm1 finite gamma
+  hypot lgamma log1p round tgamma
+  )
+if(IS_PY3)
+  list(APPEND _funcs log2)
+endif()
+foreach(func ${_funcs})
+  string(TOUPPER ${func} _func_upper)
+  check_function_exists(${func} HAVE_${_func_upper})
+endforeach()
+
+foreach(decl isinf isnan isfinite)
+  string(TOUPPER ${decl} _decl_upper)
+  check_symbol_exists(${decl} "math.h" HAVE_DECL_${_decl_upper})
+endforeach()
+
+cmake_pop_check_state()
+  
+#######################################################################
+#
+# time
+#
+#######################################################################
+check_struct_has_member("struct tm"   tm_zone    "${CFG_HEADERS}"    HAVE_STRUCT_TM_TM_ZONE)
+check_struct_has_member("struct tm"   tm_zone    "${CFG_HEADERS}"    HAVE_STRUCT_TM_TM_ZONE)
+set(HAVE_TM_ZONE ${HAVE_STRUCT_TM_TM_ZONE})
+
+if(NOT HAVE_STRUCT_TM_TM_ZONE)
+  check_variable_exists(tzname HAVE_TZNAME)
+  check_symbol_exists(tzname "time.h" HAVE_DECL_TZNAME)
+else()
+  set(HAVE_TZNAME 0)
+  set(HAVE_DECL_TZNAME 0)
+endif()
+
+set(CMAKE_EXTRA_INCLUDE_FILES "time.h")
+check_type_size("struct tm" TM_IN_TIME)
+unset(CMAKE_EXTRA_INCLUDE_FILES)
+if(TM_IN_TIME)
+  set(TM_IN_SYS_TIME 0)
+else()
+  set(TM_IN_SYS_TIME 1)
+endif()
+check_c_source_compiles("#include <sys/types.h>\n #include <sys/time.h>\n #include <time.h>\n int main() {if ((struct tm *) 0) return 0;}" TIME_WITH_SYS_TIME)
+check_c_source_compiles("#include <sys/types.h>\n #include <sys/select.h>\n #include <sys/time.h>\n int main(){return 0;}" SYS_SELECT_WITH_SYS_TIME)
+
+check_c_source_compiles("#include <sys/time.h>\n int main() {gettimeofday((struct timeval*)0,(struct timezone*)0);}" GETTIMEOFDAY_WITH_TZ)
+
+if(GETTIMEOFDAY_WITH_TZ)
+  set(GETTIMEOFDAY_NO_TZ 0)
+else()
+  set(GETTIMEOFDAY_NO_TZ 1)
+endif()
+
+if(IS_PY3)
+
+check_function_exists(clock_getres HAVE_CLOCK_GETRES)
+if(NOT HAVE_CLOCK_GETRES)
+  cmake_push_check_state()
+  set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/ac_cv_lib_rt_clock_getres.c)
+  file(WRITE ${check_src} "/* Override any GCC internal prototype to avoid an error.
+  Use char because int might match the return type of a GCC
+  builtin and then its argument prototype would still apply.  */
+  #ifdef __cplusplus
+  extern \"C\"
+  #endif
+  char clock_getres ();
+  int main () { return clock_getres (); }
+  ")
+  list(APPEND CMAKE_REQUIRED_LIBRARIES rt)
+  python_platform_test(
+    HAVE_CLOCK_GETRES
+    "Checking for clock_getres in -lrt"
+    ${check_src}
+    DIRECT
+    )
+  cmake_pop_check_state()
+endif()
+
+check_function_exists(clock_gettime HAVE_CLOCK_GETTIME)
+if(NOT HAVE_CLOCK_GETTIME)
+  cmake_push_check_state()
+  set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/ac_cv_lib_rt_clock_gettime.c)
+  file(WRITE ${check_src} "/* Override any GCC internal prototype to avoid an error.
+    Use char because int might match the return type of a GCC
+    builtin and then its argument prototype would still apply.  */
+    #ifdef __cplusplus
+    extern \"C\"
+    #endif
+    char clock_gettime ();
+    int main () { return clock_gettime (); }
+  ")
+  list(APPEND CMAKE_REQUIRED_LIBRARIES rt)
+  python_platform_test(
+    HAVE_CLOCK_GETTIME
+    "Checking for clock_gettime in -lrt"
+    ${check_src}
+    DIRECT
+    )
+  cmake_pop_check_state()
+  if(HAVE_CLOCK_GETTIME)
+    set(TIMEMODULE_LIB rt)
+  endif()
+endif()
+
+endif()
+
+#######################################################################
+#
+# unicode 
+#
+#######################################################################
+
+# Check for UCS-4 tcl
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/have_ucs4_tcl.c)
+file(WRITE ${check_src} "#include <tcl.h>
+#if TCL_UTF_MAX != 6
+# error \"NOT UCS4_TCL\"
+#endif
+int main () { return 0; }
+")
+python_platform_test(
+  HAVE_UCS4_TCL
+  "Checking for UCS-4 tcl"
+  ${check_src}
+  DIRECT
+  )
+
+#ucs2
+set(HAVE_USABLE_WCHAR_T 0)
+
+if(IS_PY2)
+
+if(Py_USING_UNICODE AND NOT DEFINED Py_UNICODE_SIZE)
+  if(HAVE_UCS4_TCL)
+    message(STATUS "Defaulting Py_UNICODE_SIZE to 4 because HAVE_UCS4_TCL is set")
+    set(Py_UNICODE_SIZE 4)
+  else()
+    # Py_UNICODE defaults to two-byte mode
+    set(Py_UNICODE_SIZE 2)
+  endif()
+endif()
+
+if("${Py_UNICODE_SIZE}" STREQUAL "${SIZEOF_WCHAR_T}")
+  set(PY_UNICODE_TYPE wchar_t)
+  set(HAVE_USABLE_WCHAR_T 1)
+  message(STATUS "Using wchar_t for unicode [Py_UNICODE_SIZE: ${Py_UNICODE_SIZE}]")
+else()
+
+  if("${Py_UNICODE_SIZE}" STREQUAL "${SIZEOF_SHORT}")
+    set(PY_UNICODE_TYPE "unsigned short")
+    set(HAVE_USABLE_WCHAR_T 0)
+    message(STATUS "Using unsigned short for unicode [Py_UNICODE_SIZE: ${Py_UNICODE_SIZE}]")
+  else()
+
+    if("${Py_UNICODE_SIZE}" STREQUAL "${SIZEOF_LONG}")
+      set(PY_UNICODE_TYPE "unsigned long")
+      set(HAVE_USABLE_WCHAR_T 0)
+      message(STATUS "Using unsigned long for unicode [Py_UNICODE_SIZE: ${Py_UNICODE_SIZE}]")
+    else()
+
+      if(Py_USING_UNICODE)
+        message(SEND_ERROR "No usable unicode type found for [Py_UNICODE_SIZE: ${Py_UNICODE_SIZE}]
+Two paths forward:
+(1) set Py_UNICODE_SIZE to either ${SIZEOF_WCHAR_T}, ${SIZEOF_SHORT} or ${SIZEOF_LONG}
+(2) disable Py_USING_UNICODE option")
+      else()
+        message(STATUS "No usable unicode type found [Py_USING_UNICODE: ${Py_USING_UNICODE}]")
+      endif()
+
+    endif()
+
+  endif()
+
+endif()
+
+endif()
+
+#######################################################################
+#
+# networking tests
+#
+#######################################################################
+cmake_push_check_state()
+set(CFG_HEADERS_SAVE ${CFG_HEADERS})
+add_cond(CFG_HEADERS HAVE_NETDB_H netdb.h)
+add_cond(CFG_HEADERS HAVE_NETINET_IN_H netinet/in.h)
+add_cond(CFG_HEADERS HAVE_ARPA_INET_H arpa/inet.h)
+
+check_symbol_exists(gethostbyname_r "${CFG_HEADERS}" HAVE_GETHOSTBYNAME_R)
+if(HAVE_GETHOSTBYNAME_R)
+
+  # Checking gethostbyname_r with 6 args
+  set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/have_gethostbyname_r_6_arg.c)
+  file(WRITE ${check_src} "int main() {
+    char *name;
+    struct hostent *he, *res;
+    char buffer[2048];
+    int buflen = 2048;
+    int h_errnop;
+
+    (void) gethostbyname_r(name, he, buffer, buflen, &res, &h_errnop);
+    return 0;
+}
+")
+  python_platform_test(
+    HAVE_GETHOSTBYNAME_R_6_ARG
+    "Checking gethostbyname_r with 6 args"
+    ${check_src}
+    DIRECT
+    )
+  if(HAVE_GETHOSTBYNAME_R_6_ARG)
+    set(HAVE_GETHOSTBYNAME_R 1)
+  else()
+    # Checking gethostbyname_r with 5 args
+    set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/have_gethostbyname_r_5_arg.c)
+    file(WRITE ${check_src} "int main() {
+    char *name;
+    struct hostent *he;
+    char buffer[2048];
+    int buflen = 2048;
+    int h_errnop;
+
+    (void) gethostbyname_r(name, he, buffer, buflen, &h_errnop)
+    return 0;
+}
+")
+    python_platform_test(
+      HAVE_GETHOSTBYNAME_R_5_ARG
+      "Checking gethostbyname_r with 5 args"
+      ${check_src}
+      DIRECT
+      )
+    if(HAVE_GETHOSTBYNAME_R_5_ARG)
+      set(HAVE_GETHOSTBYNAME_R 1)
+    else()
+      # Checking gethostbyname_r with 5 args
+      set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/have_gethostbyname_r_3_arg.c)
+      file(WRITE ${check_src} "int main() {
+    char *name;
+    struct hostent *he;
+    struct hostent_data data;
+
+    (void) gethostbyname_r(name, he, &data);
+    return 0;
+}
+")
+      python_platform_test(
+        HAVE_GETHOSTBYNAME_R_3_ARG
+        "Checking gethostbyname_r with 3 args"
+        ${check_src}
+        DIRECT
+        )
+      if(HAVE_GETHOSTBYNAME_R_3_ARG)
+        set(HAVE_GETHOSTBYNAME_R 1)
+      endif()
+    endif()
+  endif()
+else()
+  check_symbol_exists(gethostbyname   "${CFG_HEADERS}" HAVE_GETHOSTBYNAME)
+endif()
+
+check_symbol_exists(gai_strerror    "${CFG_HEADERS}" HAVE_GAI_STRERROR)
+check_symbol_exists(getaddrinfo     "${CFG_HEADERS}" HAVE_GETADDRINFO)
+check_symbol_exists(getnameinfo     "${CFG_HEADERS}" HAVE_GETNAMEINFO)
+check_symbol_exists(getpeername     "${CFG_HEADERS}" HAVE_GETPEERNAME)
+check_symbol_exists(hstrerror       "${CFG_HEADERS}" HAVE_HSTRERROR)
+check_symbol_exists(inet_aton       "${CFG_HEADERS}" HAVE_INET_ATON)
+if(NOT HAVE_INET_ATON)
+  check_library_exists(resolv inet_aton "" HAVE_LIBRESOLV)
+endif()
+check_symbol_exists(inet_pton       "${CFG_HEADERS}" HAVE_INET_PTON)
+
+set(CMAKE_EXTRA_INCLUDE_FILES ${CFG_HEADERS})
+check_type_size("struct addrinfo" HAVE_ADDRINFO)
+check_struct_has_member("struct sockaddr" sa_len "${CFG_HEADERS}" HAVE_SOCKADDR_SA_LEN )
+check_type_size("struct sockaddr_storage" HAVE_SOCKADDR_STORAGE)
+unset(CMAKE_EXTRA_INCLUDE_FILES)
+
+set(CFG_HEADERS ${CFG_HEADERS_SAVE})
+cmake_pop_check_state()
+
+
+#######################################################################
+#
+# multithreading stuff
+#
+#######################################################################
+cmake_push_check_state()
+set(CFG_HEADERS_SAVE ${CFG_HEADERS})
+
+if(IS_PY2)
+set(ATHEOS_THREADS 0)
+set(BEOS_THREADS 0)
+set(C_THREADS 0)
+set(HURD_C_THREADS 0)
+set(MACH_C_THREADS 0)
+set(HAVE_PTH 0) # GNU PTH threads
+endif()
+
+set(HAVE_PTHREAD_DESTRUCTOR 0) # for Solaris 2.6
+add_cond(CFG_HEADERS  HAVE_PTHREAD_H  pthread.h)
+add_cond(CMAKE_REQUIRED_LIBRARIES  CMAKE_USE_PTHREADS_INIT  "${CMAKE_THREAD_LIBS_INIT}")
+if(APPLE)
+  set(HAVE_PTHREAD_INIT ${CMAKE_USE_PTHREADS_INIT}) # See commit message for explanation.
+else()
+  check_symbol_exists(pthread_init "${CFG_HEADERS}" HAVE_PTHREAD_INIT)
+endif()
+check_symbol_exists(pthread_sigmask "${CFG_HEADERS}" HAVE_PTHREAD_SIGMASK)
+check_symbol_exists(pthread_atfork "${CFG_HEADERS}" HAVE_PTHREAD_ATFORK)
+
+add_cond(CFG_HEADERS  HAVE_SEMAPHORE_H  semaphore.h)
+check_symbol_exists(sem_getvalue "${CFG_HEADERS}" HAVE_SEM_GETVALUE)
+check_symbol_exists(sem_open "${CFG_HEADERS}" HAVE_SEM_OPEN)
+check_symbol_exists(sem_timedwait "${CFG_HEADERS}" HAVE_SEM_TIMEDWAIT)
+check_symbol_exists(sem_unlink "${CFG_HEADERS}" HAVE_SEM_UNLINK)
+
+# For multiprocessing module, check that sem_open actually works.
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/ac_cv_posix_semaphores_enabled.c)
+file(WRITE ${check_src} "#include <unistd.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <semaphore.h>
+#include <sys/stat.h>
+
+int main(void) {
+  sem_t *a = sem_open(\"/autoconf\", O_CREAT, S_IRUSR|S_IWUSR, 0);
+  if (a == SEM_FAILED) {
+    perror(\"sem_open\");
+    return 1;
+  }
+  sem_close(a);
+  sem_unlink(\"/autoconf\");
+  return 0;
+}
+")
+python_platform_test_run(
+  POSIX_SEMAPHORES_NOT_ENABLED
+  "Checking whether POSIX semaphores are enabled"
+  ${check_src}
+  INVERT
+  )
+
+# Multiprocessing check for broken sem_getvalue
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/have_broken_sem_getvalue.c)
+file(WRITE ${check_src} "#include <unistd.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <semaphore.h>
+#include <sys/stat.h>
+
+int main(void){
+  sem_t *a = sem_open(\"/autocftw\", O_CREAT, S_IRUSR|S_IWUSR, 0);
+  int count;
+  int res;
+  if(a==SEM_FAILED){
+    perror(\"sem_open\");
+    return 1;
+
+  }
+  res = sem_getvalue(a, &count);
+  sem_close(a);
+  sem_unlink(\"/autocftw\");
+  return res==-1 ? 1 : 0;
+}
+")
+python_platform_test_run(
+  HAVE_BROKEN_SEM_GETVALUE
+  "Checking for broken sem_getvalue"
+  ${check_src}
+  INVERT
+  )
+
+set(CFG_HEADERS ${CFG_HEADERS_SAVE})
+cmake_pop_check_state()
+
+if(CMAKE_SYSTEM MATCHES BlueGene)
+  # Todo: Display message
+  set(WITH_THREAD OFF CACHE STRING "System doesn't support multithreading" FORCE)
+endif()
+
+
+#######################################################################
+#
+# readline tests
+#
+#######################################################################
+
+# MacOSX 10.4 has a broken readline. Don't try to build
+# the readline module unless the user has installed a fixed
+# readline package
+if(HAVE_READLINE_READLINE_H)
+  if(APPLE AND CMAKE_OSX_DEPLOYMENT_TARGET
+     AND "${CMAKE_OSX_DEPLOYMENT_TARGET}" VERSION_LESS "10.5")
+    check_include_files(readline/rlconf.h HAVE_READLINE_RLCONF_H)
+    if(NOT HAVE_READLINE_RLCONF_H)
+      set(HAVE_READLINE_READLINE_H FALSE)
+    endif()
+  endif()
+endif()
+if(HAVE_READLINE_READLINE_H)
+  cmake_push_check_state()
+  set(CFG_HEADERS_SAVE ${CFG_HEADERS})
+
+  add_cond(CFG_HEADERS HAVE_READLINE_READLINE_H readline/readline.h)
+  add_cond(CMAKE_REQUIRED_LIBRARIES HAVE_LIBREADLINE ${HAVE_LIBREADLINE})
+  check_symbol_exists(rl_callback_handler_install "${CFG_HEADERS}" HAVE_RL_CALLBACK)
+  check_symbol_exists(rl_catch_signals            "${CFG_HEADERS}" HAVE_RL_CATCH_SIGNAL)
+  check_symbol_exists(rl_completion_append_character     "${CFG_HEADERS}" HAVE_RL_COMPLETION_APPEND_CHARACTER)
+  check_symbol_exists(rl_completion_display_matches_hook "${CFG_HEADERS}" HAVE_RL_COMPLETION_DISPLAY_MATCHES_HOOK)
+  check_symbol_exists(rl_completion_suppress_append      "${CFG_HEADERS}" HAVE_RL_COMPLETION_SUPPRESS_APPEND)
+  check_symbol_exists(rl_completion_matches       "${CFG_HEADERS}" HAVE_RL_COMPLETION_MATCHES)
+  check_symbol_exists(rl_pre_input_hook           "${CFG_HEADERS}" HAVE_RL_PRE_INPUT_HOOK)
+  check_symbol_exists(rl_resize_terminal          "${CFG_HEADERS}" HAVE_RL_RESIZE_TERMINAL)
+
+  set(CFG_HEADERS ${CFG_HEADERS_SAVE})
+  cmake_pop_check_state()
+endif()
+
+
+#######################################################################
+#
+# curses tests
+#
+#######################################################################
+if(HAVE_CURSES_H)
+  cmake_push_check_state()
+  set(CFG_HEADERS_SAVE ${CFG_HEADERS})
+
+  set(CFG_HEADERS ${CFG_HEADERS} curses.h)
+  add_cond(CMAKE_REQUIRED_LIBRARIES HAVE_LIBCURSES ${HAVE_LIBCURSES})
+  check_symbol_exists(is_term_resized "${CFG_HEADERS}" HAVE_CURSES_IS_TERM_RESIZED)
+  check_symbol_exists(resizeterm      "${CFG_HEADERS}" HAVE_CURSES_RESIZETERM)
+  check_symbol_exists(resize_term     "${CFG_HEADERS}" HAVE_CURSES_RESIZE_TERM)
+  check_struct_has_member(WINDOW _flags   "${CFG_HEADERS}" WINDOW_HAS_FLAGS)
+
+  check_c_source_compiles("#include <curses.h>\n int main() {int i; i = mvwdelch(0,0,0);}" MVWDELCH_IS_EXPRESSION)
+
+  set(CFG_HEADERS ${CFG_HEADERS_SAVE})
+  cmake_pop_check_state()
+endif()
+
+
+#######################################################################
+#
+# dynamic loading
+#
+#######################################################################
+if(HAVE_DLFCN_H)
+  cmake_push_check_state()
+  set(CFG_HEADERS_SAVE ${CFG_HEADERS})
+
+  set(CFG_HEADERS ${CFG_HEADERS} dlfcn.h)
+  add_cond(CMAKE_REQUIRED_LIBRARIES HAVE_LIBDL "${HAVE_LIBDL}")
+  check_symbol_exists(dlopen          "${CFG_HEADERS}" HAVE_DLOPEN)
+
+  set(CFG_HEADERS ${CFG_HEADERS_SAVE})
+  cmake_pop_check_state()
+endif()
+
+
+if(HAVE_DLOPEN) # OR .... )
+  set(HAVE_DYNAMIC_LOADING 1)
+else()
+  set(HAVE_DYNAMIC_LOADING 0)
+endif()
+
+
+#######################################################################
+#
+# check some types
+#
+#######################################################################
+check_type_size("gid_t" HAVE_GID_T)
+if(NOT HAVE_GID_T)
+  set(gid_t int)
+else()
+  set(gid_t 0)
+endif()
+
+check_type_size("mode_t" HAVE_MODE_T)
+if(NOT HAVE_MODE_T)
+  set(mode_t int)
+else()
+  set(mode_t 0)
+endif()
+
+check_type_size("off_t" HAVE_OFF_T)
+if(NOT HAVE_OFF_T)
+  set(off_t "long int")
+else()
+  set(off_t 0)
+endif()
+
+check_type_size("pid_t" HAVE_PID_T)
+if(NOT HAVE_PID_T)
+  set(pid_t int)
+else()
+  set(pid_t 0)
+endif()
+
+check_type_size("size_t" HAVE_SIZE_T)
+if(NOT HAVE_SIZE_T)
+  set(size_t "unsigned int")
+else()
+  set(size_t 0)
+endif()
+
+set(CMAKE_EXTRA_INCLUDE_FILES ${CFG_HEADERS})
+check_type_size("uint64_t" HAVE_UINT64_T)
+check_type_size("int64_t" HAVE_INT64_T)
+check_type_size("uint32_t" HAVE_UINT32_T)
+check_type_size("int32_t" HAVE_INT32_T)
+if(IS_PY3)
+check_type_size("__uint128_t" HAVE_GCC_UINT128_T)
+endif()
+unset(CMAKE_EXTRA_INCLUDE_FILES)
+
+set(CMAKE_EXTRA_INCLUDE_FILES "sys/socket.h")
+check_type_size("socklen_t" HAVE_SOCKLEN_T)
+unset(CMAKE_EXTRA_INCLUDE_FILES)
+if(NOT HAVE_SOCKLEN_T)
+  set(socklen int)
+else()
+  set(socklen_t 0)
+endif()
+
+check_type_size("uid_t" HAVE_UID_T)
+if(NOT HAVE_UID_T)
+  set(uid_t int)
+else()
+  set(uid_t 0)
+endif()
+
+set(CMAKE_EXTRA_INCLUDE_FILES "time.h")
+check_type_size("clock_t" HAVE_CLOCK_T)
+unset(CMAKE_EXTRA_INCLUDE_FILES)
+if(NOT HAVE_CLOCK_T)
+  set(clock_t long)
+else()
+  set(clock_t 0)
+endif()
+
+
+check_c_source_compiles("int main() {const int i;}" const_WORKS)
+if(NOT const_WORKS)
+  set(const 1)
+else()
+  set(const 0)
+endif()
+
+check_c_source_compiles("int main() {signed int i;}" signed_WORKS)
+if(NOT signed_WORKS)
+  set(signed 1)
+else()
+  set(signed 0)
+endif()
+
+check_c_source_compiles("int main() {volatile int i;}" volatile_WORKS)
+if(NOT volatile_WORKS)
+  set(volatile 1)
+else()
+  set(volatile 0)
+endif()
+
+
+# Check for prototypes
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/have_prototypes.c)
+file(WRITE ${check_src} "int foo(int x) { return 0; } int main() { return foo(10); }")
+python_platform_test(
+  HAVE_PROTOTYPES
+  "Checking for prototypes"
+  ${check_src}
+  DIRECT
+  )
+
+if(HAVE_STDARG_PROTOTYPES)
+   set(vaargsHeader "stdarg.h")
+else()
+   set(vaargsHeader "varargs.h")
+endif()
+check_c_source_compiles("#include <${vaargsHeader}>\n int main() {va_list list1, list2; list1 = list2;}" NOT_VA_LIST_IS_ARRAY)
+if(NOT_VA_LIST_IS_ARRAY)
+  set(VA_LIST_IS_ARRAY 0)
+else()
+  set(VA_LIST_IS_ARRAY 1)
+endif()
+
+# Check whether char is unsigned
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/ac_cv_c_char_unsigned.c)
+file(WRITE ${check_src} "int main() { static int test_array [1 - 2 * !( ((char) -1) < 0 )];
+test_array [0] = 0; return test_array [0]; return 0; }")
+python_platform_test(
+  HAVE_C_CHAR_UNSIGNED
+  "Checking whether char is unsigned"
+  ${check_src}
+  INVERT
+  )
+if(HAVE_C_CHAR_UNSIGNED AND NOT CMAKE_C_COMPILER_ID MATCHES "^GNU$")
+  set(__CHAR_UNSIGNED__ 1)
+endif()
+
+if(IS_PY3)
+
+# Check if the dirent structure of a d_type field and DT_UNKNOWN is defined
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/have_dirent_d_type.c)
+file(WRITE ${check_src} "#include <dirent.h>
+int main() {
+  struct dirent entry;
+  return entry.d_type == DT_UNKNOWN;
+}
+")
+python_platform_test(
+  HAVE_DIRENT_D_TYPE
+  "Checking if the dirent structure of a d_type field"
+  ${check_src}
+  DIRECT
+  )
+
+# Check if the Linux getrandom() syscall is available
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/have_getrandom_syscall.c)
+file(WRITE ${check_src} "#include <sys/syscall.h>
+int main() {
+  char buffer[1];
+  const size_t buflen = sizeof(buffer);
+  const int flags = 0;
+  /* ignore the result, Python checks for ENOSYS at runtime */
+  (void)syscall(SYS_getrandom, buffer, buflen, flags);
+  return 0;
+}
+")
+python_platform_test(
+  HAVE_GETRANDOM_SYSCALL
+  "Checking for the Linux getrandom() syscall"
+  ${check_src}
+  DIRECT
+  )
+
+# check if the getrandom() function is available
+# the test was written for the Solaris function of <sys/random.h>
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/have_getrandom.c)
+file(WRITE ${check_src} "#include <sys/random.h>
+int main() {
+  char buffer[1];
+  const size_t buflen = sizeof(buffer);
+  const int flags = 0;
+  /* ignore the result, Python checks for ENOSYS at runtime */
+  (void)getrandom(buffer, buflen, flags);
+  return 0;
+}
+")
+python_platform_test(
+  HAVE_GETRANDOM
+  "Checking for the getrandom() function"
+  ${check_src}
+  DIRECT
+  )
+
+endif()
+
+#######################################################################
+#
+# tests for bugs and other stuff
+#
+#######################################################################
+
+if(IS_PY2)
+check_c_source_compiles("
+        void f(char*,...)__attribute((format(PyArg_ParseTuple, 1, 2))) {}; 
+        int main() {f(NULL);} "
+        HAVE_ATTRIBUTE_FORMAT_PARSETUPLE)
+endif()
+
+check_c_source_compiles("#include <unistd.h>\n int main() {getpgrp(0);}" GETPGRP_HAVE_ARG)
+
+check_c_source_compiles("#include <unistd.h>\n int main() {setpgrp(0, 0);}" SETPGRP_HAVE_ARG)
+
+if(IS_PY3)
+# Check for inline
+set(USE_INLINE 0)
+foreach(inline_type inline __inline__ __inline)
+  set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/ac_cv_c_${inline_type}.c)
+  file(WRITE ${check_src} "#ifndef __cplusplus
+  typedef int foo_t;
+  static ${inline_type} foo_t static_foo () {return 0; }
+  ${inline_type} foo_t foo () {return 0; }
+  int main() { return 0; }
+  #endif
+  ")
+  python_platform_test(
+    HAVE_${inline_type}
+    "Checking for ${inline_type}"
+    ${check_src}
+    DIRECT
+    )
+  if(HAVE_${inline_type})
+    set(USE_INLINE 1)
+    break()
+  endif()
+endforeach()
+if(USE_INLINE AND NOT inline_type STREQUAL "inline")
+  # XXX Need to define <inline_type> as inline
+endif()
+
+# Check for append_history in -lreadline
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/ac_cv_lib_readline_append_history.c)
+file(WRITE ${check_src} "/* Override any GCC internal prototype to avoid an error.
+  Use char because int might match the return type of a GCC
+  builtin and then its argument prototype would still apply.  */
+#ifdef __cplusplus
+extern \"C\"
+#endif
+char append_history ();
+int main () { return append_history (); }
+")
+cmake_push_check_state()
+list(APPEND CMAKE_REQUIRED_LIBRARIES readline)
+python_platform_test(
+  HAVE_RL_APPEND_HISTORY
+  "Checking for append_history in -lreadline"
+  ${check_src}
+  DIRECT
+  )
+cmake_pop_check_state()
+endif()
+
+check_c_source_runs("#include <unistd.h>\n int main() {
+        int val1 = nice(1); 
+        if (val1 != -1 && val1 == nice(2)) exit(0);
+        exit(1);}" HAVE_BROKEN_NICE)
+
+check_c_source_runs(" #include <poll.h>
+    int main () {
+    struct pollfd poll_struct = { 42, POLLIN|POLLPRI|POLLOUT, 0 }; close (42);
+    int poll_test = poll (&poll_struct, 1, 0);
+    if (poll_test < 0) { exit(0); }
+    else if (poll_test == 0 && poll_struct.revents != POLLNVAL) { exit(0); }
+    else { exit(1); } }" 
+    HAVE_BROKEN_POLL)
+
+
+# Check tzset(3) exists and works like we expect it to
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/ac_cv_working_tzset.c)
+file(WRITE ${check_src} "#include <stdlib.h>
+#include <time.h>
+#include <string.h>
+
+#if HAVE_TZNAME
+extern char *tzname[];
+#endif
+
+int main()
+{
+  /* Note that we need to ensure that not only does tzset(3)
+     do 'something' with localtime, but it works as documented
+     in the library reference and as expected by the test suite.
+     This includes making sure that tzname is set properly if
+     tm->tm_zone does not exist since it is the alternative way
+     of getting timezone info.
+
+     Red Hat 6.2 doesn't understand the southern hemisphere
+     after New Year's Day.
+  */
+
+  time_t groundhogday = 1044144000; /* GMT-based */
+  time_t midyear = groundhogday + (365 * 24 * 3600 / 2);
+
+  putenv(\"TZ=UTC+0\");
+  tzset();
+  if (localtime(&groundhogday)->tm_hour != 0)
+      exit(1);
+#if HAVE_TZNAME
+  /* For UTC, tzname[1] is sometimes \"\", sometimes \"   \" */
+  if (strcmp(tzname[0], \"UTC\") ||
+    (tzname[1][0] != 0 && tzname[1][0] != ' '))
+      exit(1);
+#endif
+
+  putenv(\"TZ=EST+5EDT,M4.1.0,M10.5.0\");
+  tzset();
+  if (localtime(&groundhogday)->tm_hour != 19)
+      exit(1);
+#if HAVE_TZNAME
+  if (strcmp(tzname[0], \"EST\") || strcmp(tzname[1], \"EDT\"))
+      exit(1);
+#endif
+
+  putenv(\"TZ=AEST-10AEDT-11,M10.5.0,M3.5.0\");
+  tzset();
+  if (localtime(&groundhogday)->tm_hour != 11)
+      exit(1);
+#if HAVE_TZNAME
+  if (strcmp(tzname[0], \"AEST\") || strcmp(tzname[1], \"AEDT\"))
+      exit(1);
+#endif
+
+#if HAVE_STRUCT_TM_TM_ZONE
+  if (strcmp(localtime(&groundhogday)->tm_zone, \"AEDT\"))
+      exit(1);
+  if (strcmp(localtime(&midyear)->tm_zone, \"AEST\"))
+      exit(1);
+#endif
+
+  exit(0);
+}
+")
+cmake_push_check_state()
+add_cond(CMAKE_REQUIRED_DEFINITIONS HAVE_TZNAME "-DHAVE_TZNAME")
+add_cond(CMAKE_REQUIRED_DEFINITIONS HAVE_STRUCT_TM_TM_ZONE "-DHAVE_STRUCT_TM_TM_ZONE")
+python_platform_test_run(
+  HAVE_WORKING_TZSET
+  "Checking for working tzset()"
+  ${check_src}
+  DIRECT
+  )
+cmake_pop_check_state()
+
+# Check for broken unsetenv
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/have_broken_unsetenv.c)
+file(WRITE ${check_src} "#include <stdlib.h>
+int main() {
+  int res = unsetenv(\"DUMMY\");
+}
+")
+python_platform_test(
+  HAVE_BROKEN_UNSETENV
+  "Checking for broken unsetenv"
+  ${check_src}
+  INVERT
+  )
+
+# Define if the system reports an invalid PIPE_BUF value.
+set(HAVE_BROKEN_PIPE_BUF 0)
+if(CMAKE_SYSTEM MATCHES AIX)
+  set(HAVE_BROKEN_PIPE_BUF 1)
+endif()
+
+if(IS_PY3)
+
+# Define if aligned memory access is required
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/aligned_required.c)
+file(WRITE ${check_src} "int main()
+{
+    char s[16];
+    int i, *p1, *p2;
+    for (i=0; i < 16; i++)
+        s[i] = i;
+    p1 = (int*)(s+1);
+    p2 = (int*)(s+2);
+    if (*p1 == *p2)
+        return 1;
+    return 0;
+}
+")
+python_platform_test_run(
+  HAVE_ALIGNED_REQUIRED
+  "Checking aligned memory access is required"
+  ${check_src}
+  INVERT
+  )
+
+# Define if mbstowcs(NULL, "text", 0) does not return the number of wide
+# chars that would be converted.
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/ac_cv_broken_mbstowcs.c)
+file(WRITE ${check_src} "#include <stdio.h>
+#include<stdlib.h>
+int main() {
+    size_t len = -1;
+    const char *str = \"text\";
+    len = mbstowcs(NULL, str, 0);
+    return (len != 4);
+}
+")
+python_platform_test_run(
+  HAVE_BROKEN_MBSTOWCS
+  "Checking for broken mbstowcs"
+  ${check_src}
+  INVERT
+  )
+
+endif(IS_PY3)
+
+# Check whether the compiler supports computed gotos
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/ac_cv_computed_gotos.c)
+file(WRITE ${check_src} "int main(int argc, char **argv)
+  {
+      static void *targets[1] = { &&LABEL1 };
+      goto LABEL2;
+  LABEL1:
+      return 0;
+  LABEL2:
+      goto *targets[0];
+      return 1;
+  }
+")
+python_platform_test_run(
+  HAVE_COMPUTED_GOTOS
+  "Checking whether ${CMAKE_C_COMPILER_ID} supports computed gotos"
+  ${check_src}
+  DIRECT
+  )
+
+if(IS_PY3)
+
+# Availability of -O2
+cmake_push_check_state()
+list(APPEND CMAKE_REQUIRED_DEFINITIONS -O2)
+check_c_source_compiles("int main () {return 0;}" have_O2)
+cmake_pop_check_state()
+
+# _FORTIFY_SOURCE wrappers for memmove and bcopy are incorrect:
+# http://sourceware.org/ml/libc-alpha/2010-12/msg00009.html
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/have_glibc_memmove_bug.c)
+file(WRITE ${check_src} "#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+void foo(void *p, void *q) { memmove(p, q, 19); }
+int main() {
+  char a[32] = \"123456789000000000\";
+  foo(&a[9], a);
+  if (strcmp(a, \"123456789123456789000000000\") != 0)
+    return 1;
+  foo(a, &a[9]);
+  if (strcmp(a, \"123456789000000000\") != 0)
+    return 1;
+  return 0;
+}
+")
+cmake_push_check_state()
+add_cond(CMAKE_REQUIRED_DEFINITIONS have_O2 "-O2;-D_FORTIFY_SOURCE=2")
+python_platform_test_run(
+  HAVE_GLIBC_MEMMOVE_BUG
+  "Checking for glibc _FORTIFY_SOURCE/memmove bug"
+  ${check_src}
+  INVERT
+  )
+cmake_pop_check_state()
+
+# HAVE_IPA_PURE_CONST_BUG
+if(HAVE_GCC_ASM_FOR_X87 AND CMAKE_C_COMPILER_ID MATCHES "GNU")
+  # Some versions of gcc miscompile inline asm:
+  # http://gcc.gnu.org/bugzilla/show_bug.cgi?id=46491
+  # http://gcc.gnu.org/ml/gcc/2010-11/msg00366.html
+  set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/have_ipa_pure_const_bug.c)
+  file(WRITE ${check_src} "__attribute__((noinline)) int
+  foo(int *p) {
+    int r;
+    asm ( \"movl \\$6, (%1)\\n\\t\"
+          \"xorl %0, %0\\n\\t\"
+          : \"=r\" (r) : \"r\" (p) : \"memory\"
+    );
+    return r;
+  }
+  int main() {
+    int p = 8;
+    if ((foo(&p) ? : p) != 6)
+      return 1;
+    return 0;
+  }
+  ")
+  python_platform_test_run(
+    HAVE_IPA_PURE_CONST_BUG
+    "Checking for gcc ipa-pure-const bug"
+    ${check_src}
+    INVERT
+    )
+endif()
+
+# Check for stdatomic.h
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/have_stdatomic_h.c)
+file(WRITE ${check_src} "#include <stdatomic.h>
+atomic_int value = ATOMIC_VAR_INIT(1);
+_Atomic void *py_atomic_address = (void*) &value;
+int main() {
+  int loaded_value = atomic_load(&value);
+  return 0;
+}
+")
+python_platform_test(
+  HAVE_STD_ATOMIC
+  "Checking for stdatomic.h"
+  ${check_src}
+  DIRECT
+  )
+
+# Has builtin atomics
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/have_builtin_atomic.c)
+file(WRITE ${check_src} "volatile int val = 1;
+int main() {
+  __atomic_load_n(&val, __ATOMIC_SEQ_CST);
+  return 0;
+}
+")
+python_platform_test(
+  HAVE_BUILTIN_ATOMIC
+  "Checking for GCC >= 4.7 __atomic builtins"
+  ${check_src}
+  DIRECT
+  )
+
+endif(IS_PY3)
+
+if(HAVE_LONG_LONG)
+  # Checking for %lld and %llu printf() format support
+  set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/ac_cv_have_long_long_format.c)
+  file(WRITE ${check_src} "#include <stdio.h>
+#include <stddef.h>
+#include <string.h>
+
+#ifdef HAVE_SYS_TYPES_H
+#include <sys/types.h>
+#endif
+
+int main()
+{
+    char buffer[256];
+
+    if (sprintf(buffer, \"%lld\", (long long)123) < 0)
+        return 1;
+    if (strcmp(buffer, \"123\"))
+        return 1;
+
+    if (sprintf(buffer, \"%lld\", (long long)-123) < 0)
+        return 1;
+    if (strcmp(buffer, \"-123\"))
+        return 1;
+
+    if (sprintf(buffer, \"%llu\", (unsigned long long)123) < 0)
+        return 1;
+    if (strcmp(buffer, \"123\"))
+        return 1;
+
+    return 0;
+}
+")
+  cmake_push_check_state()
+  add_cond(CMAKE_REQUIRED_DEFINITIONS HAVE_SYS_TYPES_H "-DHAVE_SYS_TYPES_H")
+  python_platform_test_run(
+    HAVE_LONG_LONG_FORMAT
+    "Checking for %lld and %llu printf() format support"
+    ${check_src}
+    DIRECT
+    )
+  cmake_pop_check_state()
+  if(HAVE_LONG_LONG_FORMAT)
+    set(PY_FORMAT_LONG_LONG "ll")
+  endif()
+endif()
+
+
+# Checking for %zd printf() format support
+set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/ac_cv_have_size_t_format.c)
+file(WRITE ${check_src} "#include <stdio.h>
+#include <stddef.h>
+#include <string.h>
+
+#ifdef HAVE_SYS_TYPES_H
+#include <sys/types.h>
+#endif
+
+#ifdef HAVE_SSIZE_T
+typedef ssize_t Py_ssize_t;
+#elif SIZEOF_VOID_P == SIZEOF_LONG
+typedef long Py_ssize_t;
+#else
+typedef int Py_ssize_t;
+#endif
+
+int main()
+{
+    char buffer[256];
+    if(sprintf(buffer, \"%zd\", (size_t)123) < 0)
+        return 1;
+    if (strcmp(buffer, \"123\"))
+        return 1;
+    if (sprintf(buffer, \"%zd\", (Py_ssize_t)-123) < 0)
+        return 1;
+    if (strcmp(buffer, \"-123\"))
+        return 1;
+    return 0;
+}
+")
+cmake_push_check_state()
+add_cond(CMAKE_REQUIRED_DEFINITIONS HAVE_SYS_TYPES_H "-DHAVE_SYS_TYPES_H")
+add_cond(CMAKE_REQUIRED_DEFINITIONS HAVE_SSIZE_T "-DHAVE_SSIZE_T")
+add_cond(CMAKE_REQUIRED_DEFINITIONS SIZEOF_VOID_P "-DSIZEOF_VOID_P=${SIZEOF_VOID_P}")
+add_cond(CMAKE_REQUIRED_DEFINITIONS SIZEOF_LONG "-DSIZEOF_LONG=${SIZEOF_LONG}")
+python_platform_test_run(
+  HAVE_SIZE_T_FORMAT
+  "Checking for %zd printf() format support()"
+  ${check_src}
+  DIRECT
+  )
+cmake_pop_check_state()
+if(HAVE_SIZE_T_FORMAT)
+  set(PY_FORMAT_SIZE_T "z")
+endif()
+
+
+##########################################################
+
+if(ZLIB_LIBRARY)
+  cmake_push_check_state()
+  set(CFG_HEADERS_SAVE ${CFG_HEADERS})
+
+  set(CFG_HEADERS ${CFG_HEADERS} zlib.h)
+  add_cond(CMAKE_REQUIRED_INCLUDES ZLIB_INCLUDE_DIR ${ZLIB_INCLUDE_DIR})
+  add_cond(CMAKE_REQUIRED_LIBRARIES ZLIB_LIBRARY ${ZLIB_LIBRARY})
+  check_symbol_exists(inflateCopy      "${CFG_HEADERS}" HAVE_ZLIB_COPY)
+
+  set(CFG_HEADERS ${CFG_HEADERS_SAVE})
+  cmake_pop_check_state()
+endif()
+
+############################################
+
+if(IS_PY3)
+# Check for CAN_RAW_FD_FRAMES
+check_c_source_compiles("#include <linux/can/raw.h>\n int main () { int can_raw_fd_frames = CAN_RAW_FD_FRAMES; }" HAVE_LINUX_CAN_RAW_FD_FRAMES)
+endif()
+
+set(HAVE_OSX105_SDK 0)
+if(APPLE)
+  # Check for OSX 10.5 SDK or later
+  set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/have_osx105_sdk.c)
+  file(WRITE ${check_src} "#include <Carbon/Carbon.h>
+int main(int argc, char* argv[]){FSIORefNum fRef = 0; return 0;}")
+  python_platform_test(
+    HAVE_OSX105_SDK
+    "Checking for OSX 10.5 SDK or later"
+    ${check_src}
+    DIRECT
+    )
+endif()
+
+# todo 
+set(PTHREAD_SYSTEM_SCHED_SUPPORTED 1)
+set(HAVE_DEVICE_MACROS ${HAVE_MAKEDEV})
+
+endif()
+
+# setup the python platform
+set(PY_PLATFORM generic)
+
+if(CMAKE_SYSTEM MATCHES Linux)
+  set(PY_PLATFORM linux2)
+endif()
+
+if(CMAKE_SYSTEM MATCHES Darwin)
+  set(PY_PLATFORM darwin)
+endif()
+
+if(CMAKE_SYSTEM MATCHES FreeBSD)
+  set(PY_PLATFORM freebsd5)  # which version to use ?
+endif()
+
+if(CMAKE_SYSTEM MATCHES NetBSD)
+  set(PY_PLATFORM netbsd1)
+endif()
+
+if(CMAKE_SYSTEM MATCHES AIX)
+  set(PY_PLATFORM aix4)
+endif()
+
+if(CMAKE_SYSTEM MATCHES BeOS)
+  set(PY_PLATFORM beos5)
+endif()
+
+if(CMAKE_SYSTEM MATCHES IRIX)
+  set(PY_PLATFORM irix6)
+endif()
+
+if(CMAKE_SYSTEM MATCHES SunOS)
+  set(PY_PLATFORM sunos5)
+endif()
+
+if(CMAKE_SYSTEM MATCHES UnixWare)
+  set(PY_PLATFORM unixware7)
+endif()
+
+if(CMAKE_SYSTEM MATCHES Windows)
+  set(PY_PLATFORM win32)
+endif()
--- /dev/null
+++ b/cmake/Extensions.cmake
@@ -0,0 +1,245 @@
+# This function adds a python extension to the buildsystem.
+#
+# Usage:
+#
+# add_python_extension(
+#     extension_name
+#     SOURCES source1.c source2.c ...
+#     [ REQUIRES variable1 variable2 ... ]
+#     [ DEFINITIONS define1 define2 ... ]
+#     [ LIBRARIES lib1 lib2 ... ]
+#     [ INCLUDEDIRS dir1 dir2 ... ]
+#     [ BUILTIN ]
+# )
+#
+# extension_name: the name of the library without any .so extension.
+# SOURCES:     a list of filenames realtive to the Modules/ directory that make
+#              up this extension.
+# REQUIRES:    this extension will not be built unless all the variables listed
+#              here evaluate to true.  You should include any variables you use
+#              in the LIBRARIES and INCLUDEDIRS sections.
+# DEFINITIONS: an optional list of definitions to pass to the compiler while
+#              building this module.  Do not include the -D prefix.
+# LIBRARIES:   an optional list of additional libraries.
+# INCLUDEDIRS: an optional list of additional include directories.
+# BUILTIN:     if this is set the module will be compiled statically into
+#              libpython by default.  The user can still override by setting
+#              BUILTIN_[extension_name]=OFF.
+# ALWAYS_BUILTIN: if this is set the module will always be compiled statically into
+#                 libpython.
+# NO_INSTALL:   do not install or package the extension.
+#
+# Two user-settable options are created for each extension added:
+# ENABLE_[extension_name]   defaults to ON.  If set to OFF the extension will
+#                           not be added at all.
+# BUILTIN_[extension_name]  defaults to the value of
+#                           BUILD_EXTENSIONS_AS_BUILTIN, which defaults to OFF,
+#                           unless BUILTIN is set when calling
+#                           add_python_extension.  Adds the extension source
+#                           files to libpython instead of compiling a separate
+#                           library.
+# These options convert the extension_name to upper case first and remove any
+# leading underscores.  So add_python_extension(_foo ...) will create the
+# options ENABLE_FOO and BUILTIN_FOO.
+
+function(add_python_extension name)
+    set(options BUILTIN ALWAYS_BUILTIN NO_INSTALL)
+    set(oneValueArgs)
+    set(multiValueArgs REQUIRES SOURCES DEFINITIONS LIBRARIES INCLUDEDIRS)
+    cmake_parse_arguments(ADD_PYTHON_EXTENSION
+        "${options}"
+        "${oneValueArgs}"
+        "${multiValueArgs}"
+        ${ARGN}
+        )
+
+    # Remove _ from the beginning of the name.
+    string(REGEX REPLACE "^_" "" pretty_name "${name}")
+
+    # Upper case the name.
+    string(TOUPPER "${pretty_name}" upper_name)
+
+    # Add a prefix to the target name so it doesn't clash with any system
+    # libraries that we might want to link against (eg. readline)
+    set(target_name extension_${pretty_name})
+
+    # Add options that the user can set to control whether this extension is
+    # compiled, and whether it is compiled in to libpython itself.
+    option(ENABLE_${upper_name}
+           "Controls whether the \"${name}\" extension will be built"
+           ON
+    )
+    if(ENABLE_${upper_name})
+        mark_as_advanced(FORCE ENABLE_${upper_name})
+    else()
+        mark_as_advanced(CLEAR ENABLE_${upper_name})
+    endif()
+
+    # Check all the things we require are found.
+    set(missing_deps "")
+    foreach(dep ${ADD_PYTHON_EXTENSION_REQUIRES} ENABLE_${upper_name})
+        string(REPLACE " " ";" list_dep ${dep})
+        if(NOT (${list_dep}))
+            set(missing_deps "${missing_deps}${dep} ")
+        endif()
+    endforeach()
+
+    if(NOT ADD_PYTHON_EXTENSION_ALWAYS_BUILTIN)
+        # Add options that the extention is either external to libpython or
+        # builtin.  These will be marked as advanced unless different from default
+        # values
+        if(NOT ADD_PYTHON_EXTENSION_BUILTIN)
+            set(ADD_PYTHON_EXTENSION_BUILTIN ${BUILD_EXTENSIONS_AS_BUILTIN})
+        endif()
+        cmake_dependent_option(
+            BUILTIN_${upper_name}
+            "If this is set the \"${name}\" extension will be compiled in to libpython"
+            ${ADD_PYTHON_EXTENSION_BUILTIN}
+            "NOT missing_deps"
+            OFF
+        )
+        if(NOT missing_deps)
+            if((BUILTIN_${upper_name} AND BUILD_EXTENSIONS_AS_BUILTIN)
+                OR (NOT BUILTIN_${upper_name} AND NOT BUILD_EXTENSIONS_AS_BUILTIN))
+                mark_as_advanced(FORCE BUILTIN_${upper_name})
+            else()
+                mark_as_advanced(CLEAR BUILTIN_${upper_name})
+            endif()
+        endif()
+
+        # XXX _ctypes_test and _testcapi should always be shared
+        if(${name} STREQUAL "_ctypes_test" OR ${name} STREQUAL "_testcapi")
+            unset(BUILTIN_${upper_name} CACHE)
+            set(BUILTIN_${upper_name} 0)
+        endif()
+    else()
+        set(BUILTIN_${upper_name} 1)
+    endif()
+
+    # If any dependencies were missing don't include this extension.
+    if(missing_deps)
+        string(STRIP "${missing_deps}" missing_deps)
+        set(extensions_disabled "${extensions_disabled}${name} (not set: ${missing_deps});"
+             CACHE INTERNAL "" FORCE)
+        return()
+    else()
+        set(extensions_enabled "${extensions_enabled}${name};" CACHE INTERNAL "" FORCE)
+    endif()
+
+    # Callers to this function provide source files relative to the Modules/
+    # directory.  We need to get absolute paths for them all.
+    set(absolute_sources "")
+    foreach(source ${ADD_PYTHON_EXTENSION_SOURCES})
+        get_filename_component(ext ${source} EXT)
+
+        # Treat assembler sources differently
+        if(ext STREQUAL ".S")
+            set_source_files_properties(Modules/${source} PROPERTIES LANGUAGE ASM)
+        endif()
+        set(absolute_src ${source})
+        if(NOT IS_ABSOLUTE ${source})
+            set(absolute_src ${SRC_DIR}/Modules/${source})
+        endif()
+        list(APPEND absolute_sources ${absolute_src})
+    endforeach()
+
+    if(BUILTIN_${upper_name})
+        # This will be compiled into libpython instead of as a separate library
+        set_property(GLOBAL APPEND PROPERTY builtin_extensions ${name})
+        set_property(GLOBAL APPEND PROPERTY extension_${name}_sources ${absolute_sources})
+        set_property(GLOBAL APPEND PROPERTY extension_${name}_link_libraries ${ADD_PYTHON_EXTENSION_LIBRARIES})
+        set_property(GLOBAL APPEND PROPERTY extension_${name}_includedirs ${ADD_PYTHON_EXTENSION_INCLUDEDIRS})
+        set_property(GLOBAL APPEND PROPERTY extension_${name}_definitions ${ADD_PYTHON_EXTENSION_DEFINITIONS})
+    elseif(WIN32 AND NOT BUILD_LIBPYTHON_SHARED)
+        # Extensions cannot be built against a static libpython on windows
+    else()
+
+        # XXX Uncomment when CMake >= 2.8.8 is required
+        #add_library(${target_name} SHARED ${absolute_sources})
+        #set_target_properties(${target_name} PROPERTIES
+        #    INCLUDE_DIRECTORIES ${ADD_PYTHON_EXTENSION_INCLUDEDIRS})
+
+        if(WIN32)
+            string(REGEX MATCH "Py_LIMITED_API" require_limited_api "${ADD_PYTHON_EXTENSION_DEFINITIONS}")
+            if(require_limited_api STREQUAL "")
+              list(APPEND ADD_PYTHON_EXTENSION_LIBRARIES libpython-shared)
+            else()
+              list(APPEND ADD_PYTHON_EXTENSION_LIBRARIES libpython3-shared)
+            endif()
+        endif()
+
+        # XXX When CMake >= 2.8.8 is required, remove the section below
+        #     configuring and using 'add_python_extension_CMakeLists.txt.in'.
+        file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${target_name}-src)
+        configure_file(
+            ${PROJECT_SOURCE_DIR}/cmake/add_python_extension_CMakeLists.txt.in
+            ${CMAKE_CURRENT_BINARY_DIR}/${target_name}-src/CMakeLists.txt
+        )
+        add_subdirectory(
+            ${CMAKE_CURRENT_BINARY_DIR}/${target_name}-src
+            ${CMAKE_CURRENT_BINARY_DIR}/${target_name}
+        )
+
+        # XXX Uncomment when CMake >= 2.8.8 is required
+        #target_link_libraries(${target_name} ${ADD_PYTHON_EXTENSION_LIBRARIES})
+
+        if(WIN32)
+            #list(APPEND ADD_PYTHON_EXTENSION_DEFINITIONS Py_NO_ENABLE_SHARED)
+            if(MINGW)
+                set_target_properties(${target_name} PROPERTIES
+                    LINK_FLAGS -Wl,--enable-auto-import
+                )
+            endif()
+            set_target_properties(${target_name} PROPERTIES
+                SUFFIX .pyd
+            )
+        endif()
+
+        if(APPLE)
+            set_target_properties(${target_name} PROPERTIES
+                LINK_FLAGS -Wl,-undefined,dynamic_lookup
+                SUFFIX .so
+            )
+        endif()
+
+        # Turn off the "lib" prefix and add any compiler definitions
+        set_target_properties(${target_name} PROPERTIES
+            ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/${ARCHIVEDIR}
+            LIBRARY_OUTPUT_DIRECTORY ${EXTENSION_BUILD_DIR}
+            RUNTIME_OUTPUT_DIRECTORY ${EXTENSION_BUILD_DIR}
+            OUTPUT_NAME "${name}"
+            PREFIX ""
+        )
+        if(HAVE_POSITION_INDEPENDENT_CODE)
+            set_target_properties(${target_name} PROPERTIES
+                POSITION_INDEPENDENT_CODE ON
+            )
+        endif()
+
+        if(ADD_PYTHON_EXTENSION_DEFINITIONS)
+            set_target_properties(${target_name} PROPERTIES
+                COMPILE_DEFINITIONS "${ADD_PYTHON_EXTENSION_DEFINITIONS}")
+        endif()
+
+        # XXX Uncomment when CMake >= 2.8.8 is required
+        #if(NOT ADD_PYTHON_EXTENSION_NO_INSTALL)
+        #    install(TARGETS ${target_name}
+        #            ARCHIVE DESTINATION ${ARCHIVEDIR}
+        #            LIBRARY DESTINATION ${EXTENSION_INSTALL_DIR}
+        #            RUNTIME DESTINATION ${EXTENSION_INSTALL_DIR})
+        #endif()
+    endif()
+endfunction()
+
+
+function(show_extension_summary)
+    if(extensions_disabled)
+        message(STATUS "")
+        message(STATUS "The following extensions will NOT be built:")
+        message(STATUS "")
+        foreach(line ${extensions_disabled})
+            message(STATUS "    ${line}")
+        endforeach()
+        message(STATUS "")
+    endif()
+endfunction()
--- /dev/null
+++ b/cmake/FindPatch.cmake
@@ -0,0 +1,79 @@
+# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
+# file Copyright.txt or https://cmake.org/licensing for details.
+
+#.rst:
+# FindPatch
+# ---------
+#
+# The module defines the following variables:
+#
+# ``Patch_EXECUTABLE``
+#   Path to patch command-line executable.
+# ``Patch_FOUND``
+#   True if the patch command-line executable was found.
+#
+# The following :prop_tgt:`IMPORTED` targets are also defined:
+#
+# ``Patch::patch``
+#   The command-line executable.
+#
+# Example usage:
+#
+# .. code-block:: cmake
+#
+#    find_package(Patch)
+#    if(Patch_FOUND)
+#      message("Patch found: ${Patch_EXECUTABLE}")
+#    endif()
+
+set(_doc "Patch command line executable")
+set(_patch_path )
+
+if(CMAKE_HOST_WIN32)
+  set(_patch_path
+    "$ENV{LOCALAPPDATA}/Programs/Git/bin"
+    "$ENV{LOCALAPPDATA}/Programs/Git/usr/bin"
+    "$ENV{APPDATA}/Programs/Git/bin"
+    "$ENV{APPDATA}/Programs/Git/usr/bin"
+    )
+endif()
+
+# First search the PATH
+find_program(Patch_EXECUTABLE
+  NAME patch
+  PATHS ${_patch_path}
+  DOC ${_doc}
+  )
+
+if(CMAKE_HOST_WIN32)
+  # Now look for installations in Git/ directories under typical installation
+  # prefixes on Windows.
+  find_program(Patch_EXECUTABLE
+    NAMES patch
+    PATH_SUFFIXES Git/usr/bin Git/bin GnuWin32/bin
+    DOC ${_doc}
+    )
+endif()
+
+if(Patch_EXECUTABLE AND NOT TARGET Patch::patch)
+  add_executable(Patch::patch IMPORTED)
+  set_property(TARGET Patch::patch PROPERTY IMPORTED_LOCATION ${Patch_EXECUTABLE})
+
+  execute_process(COMMAND ${Patch_EXECUTABLE} --version
+                  OUTPUT_VARIABLE patch_version
+                  ERROR_QUIET
+                  OUTPUT_STRIP_TRAILING_WHITESPACE
+                  )
+  set(_patch_version_regex ".*patch ([0-9]+\\.[0-9]+\\.[0-9]+)")
+  if(patch_version MATCHES "${_patch_version_regex}")
+    set(Patch_VERSION ${CMAKE_MATCH_1})
+  endif()
+endif()
+
+unset(_patch_path)
+unset(_doc)
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(Patch
+                                  REQUIRED_VARS Patch_EXECUTABLE
+                                  VERSION_VAR Patch_VERSION)
--- /dev/null
+++ b/cmake/PC/bdist_wininst/CMakeLists.txt
@@ -0,0 +1,93 @@
+# For building the bdist_wininst subdir
+
+include_directories(
+    ${SRC_DIR}/Include
+    ${SRC_DIR}/Modules/zlib
+)
+
+set(WININST_HEADERS
+    ${SRC_DIR}/PC/bdist_wininst/archive.h
+    ${SRC_DIR}/PC/bdist_wininst/resource.h
+)
+
+set(WININST_SOURCES
+    ${SRC_DIR}/PC/bdist_wininst/extract.c
+    ${SRC_DIR}/PC/bdist_wininst/install.c
+    ${SRC_DIR}/Modules/zlib/adler32.c
+    ${SRC_DIR}/Modules/zlib/crc32.c
+    ${SRC_DIR}/Modules/zlib/inffast.c
+    ${SRC_DIR}/Modules/zlib/inflate.c
+    ${SRC_DIR}/Modules/zlib/inftrees.c
+    ${SRC_DIR}/Modules/zlib/zutil.c
+)
+
+# Install tree directory
+set(WININST_INSTALL_DIR ${PYTHONHOME}/distutils/command)
+
+# Build tree directory
+set(WININST_BUILD_DIR ${PROJECT_BINARY_DIR}/${WININST_INSTALL_DIR})
+
+# Compiler version
+set(version "unknown")
+foreach(msvcmajver IN ITEMS 90 10 11 12 14)
+    if(${MSVC${msvcmajver}})
+        string(REGEX REPLACE "0$" "" msvcmajver ${msvcmajver})
+        set(version "${msvcmajver}.0")
+    endif()
+endforeach()
+
+# System architecture
+set(arch "")
+if(CMAKE_SIZEOF_VOID_P EQUAL 8)
+    set(arch "-amd64")
+endif()
+
+# Set installer executable name
+set(WININST_EXE_NAME "wininst-${version}${arch}")
+message(STATUS "bdist_wininst: Generated 'Windows Installer' name is '${WININST_EXE_NAME}'")
+
+# Check if windows installer is already bundled in the source tree
+set(_have_wininst_in_source 0)
+set(_msg "bdist_wininst: Looking for executable named '${WININST_EXE_NAME}${CMAKE_EXECUTABLE_SUFFIX}' in source tree")
+message(STATUS "${_msg}")
+set(_expected_wininst ${SRC_DIR}/${WININST_INSTALL_DIR}/${WININST_EXE_NAME}${CMAKE_EXECUTABLE_SUFFIX})
+if(EXISTS ${_expected_wininst})
+  set(_have_wininst_in_source 1)
+  message(STATUS "${_msg} - found \"${_expected_wininst}\"")
+else()
+  message(STATUS "${_msg} - not found")
+endif()
+
+# Skip if installer is already bundled in the source tree and BUILD_WININST_ALWAYS is OFF
+set(_configure_reason "")
+if(_have_wininst_in_source)
+    if(NOT BUILD_WININST_ALWAYS)
+        message(STATUS "bdist_wininst: Skipping installer configuration because it is already provided in the source tree.")
+        return()
+    else()
+        set(_configure_reason " because BUILD_WININST_ALWAYS is ON")
+    endif()
+endif()
+
+message(STATUS "bdist_wininst: Configuring 'Windows Installer' named '${WININST_EXE_NAME}'${_configure_reason}")
+
+# Configure installer
+add_executable(bdist_wininst WIN32 ${WININST_HEADERS} ${WININST_SOURCES})
+target_link_libraries(bdist_wininst
+    imagehlp
+    comctl32
+)
+set_target_properties(bdist_wininst PROPERTIES
+    OUTPUT_NAME ${WININST_EXE_NAME}
+    RUNTIME_OUTPUT_DIRECTORY ${WININST_BUILD_DIR}
+)
+if(CMAKE_CONFIGURATION_TYPES)
+    add_custom_command(TARGET bdist_wininst POST_BUILD
+        COMMAND ${CMAKE_COMMAND} -E copy_if_different
+            $<TARGET_FILE:bdist_wininst>
+            ${WININST_BUILD_DIR}/${WININST_EXE_NAME}${CMAKE_EXECUTABLE_SUFFIX}
+        COMMENT "bdist_wininst: Copying installer into '${WININST_INSTALL_DIR}'"
+        )
+endif()
+
+install(TARGETS bdist_wininst DESTINATION ${WININST_INSTALL_DIR})
--- /dev/null
+++ b/cmake/PlatformTest.cmake
@@ -0,0 +1,193 @@
+if(CMAKE_VERSION VERSION_GREATER 2.8.7
+  AND NOT POLICY CMP0045 # XXX ignore warning 'get_target_property() called with non-existent target'
+  )
+  include(CMakeExpandImportedTargets)
+else()
+  include(${PROJECT_SOURCE_DIR}/cmake/CMakeExpandImportedTargets.cmake)
+endif()
+
+macro(python_platform_test var description srcfile invert)
+  if(NOT DEFINED "${var}_COMPILED")
+    message(STATUS "${description}")
+
+    set(MACRO_CHECK_FUNCTION_DEFINITIONS
+      "-D${var} ${CMAKE_REQUIRED_FLAGS}")
+    if(CMAKE_REQUIRED_LIBRARIES)
+      # this one translates potentially used imported library targets to their files on disk
+      CMAKE_EXPAND_IMPORTED_TARGETS(_ADJUSTED_CMAKE_REQUIRED_LIBRARIES  LIBRARIES  ${CMAKE_REQUIRED_LIBRARIES} CONFIGURATION "${CMAKE_TRY_COMPILE_CONFIGURATION}")
+      set(CHECK_C_SOURCE_COMPILES_ADD_LIBRARIES
+        "-DLINK_LIBRARIES:STRING=${_ADJUSTED_CMAKE_REQUIRED_LIBRARIES}")
+    else()
+      set(CHECK_C_SOURCE_COMPILES_ADD_LIBRARIES)
+    endif()
+    if(CMAKE_REQUIRED_INCLUDES)
+      set(CHECK_C_SOURCE_COMPILES_ADD_INCLUDES
+        "-DINCLUDE_DIRECTORIES:STRING=${CMAKE_REQUIRED_INCLUDES}")
+    else()
+      set(CHECK_C_SOURCE_COMPILES_ADD_INCLUDES)
+    endif()
+
+    try_compile(${var}_COMPILED
+      ${CMAKE_CURRENT_BINARY_DIR}
+      ${srcfile}
+      COMPILE_DEFINITIONS ${CMAKE_REQUIRED_DEFINITIONS}
+      CMAKE_FLAGS -DCOMPILE_DEFINITIONS:STRING=${MACRO_CHECK_FUNCTION_DEFINITIONS}
+      "${CHECK_C_SOURCE_COMPILES_ADD_LIBRARIES}"
+      "${CHECK_C_SOURCE_COMPILES_ADD_INCLUDES}"
+      # OUTPUT_VARIABLE OUTPUT # Do NOT use to make cross-compiling easier
+      )
+    if(${invert} MATCHES INVERT)
+      if(${var}_COMPILED)
+        message(STATUS "${description} - no")
+      else()
+        message(STATUS "${description} - yes")
+      endif()
+    else()
+      if(${var}_COMPILED)
+        message(STATUS "${description} - yes")
+      else()
+        message(STATUS "${description} - no")
+      endif()
+    endif()
+  endif()
+  if(${invert} MATCHES INVERT)
+    if(${var}_COMPILED)
+      SET(${var} 0)
+    else()
+      SET(${var} 1)
+    endif()
+  else()
+    if(${var}_COMPILED)
+      SET(${var} 1)
+    else()
+      SET(${var} 0)
+    endif()
+  endif()
+endmacro()
+
+macro(python_platform_test_run var description srcfile invert)
+  if(NOT DEFINED "${var}")
+    message(STATUS "${description}")
+
+    set(MACRO_CHECK_FUNCTION_DEFINITIONS
+      "-D${var} ${CMAKE_REQUIRED_FLAGS}")
+    if(CMAKE_REQUIRED_LIBRARIES)
+      # this one translates potentially used imported library targets to their files on disk
+      CMAKE_EXPAND_IMPORTED_TARGETS(_ADJUSTED_CMAKE_REQUIRED_LIBRARIES  LIBRARIES  ${CMAKE_REQUIRED_LIBRARIES} CONFIGURATION "${CMAKE_TRY_COMPILE_CONFIGURATION}")
+      set(CHECK_C_SOURCE_COMPILES_ADD_LIBRARIES
+        "-DLINK_LIBRARIES:STRING=${_ADJUSTED_CMAKE_REQUIRED_LIBRARIES}")
+    else()
+      set(CHECK_C_SOURCE_COMPILES_ADD_LIBRARIES)
+    endif()
+    if(CMAKE_REQUIRED_INCLUDES)
+      set(CHECK_C_SOURCE_COMPILES_ADD_INCLUDES
+        "-DINCLUDE_DIRECTORIES:STRING=${CMAKE_REQUIRED_INCLUDES}")
+    else()
+      set(CHECK_C_SOURCE_COMPILES_ADD_INCLUDES)
+    endif()
+
+    try_run(${var} ${var}_COMPILED
+      ${CMAKE_CURRENT_BINARY_DIR}
+      ${srcfile}
+      COMPILE_DEFINITIONS ${CMAKE_REQUIRED_DEFINITIONS}
+      CMAKE_FLAGS -DCOMPILE_DEFINITIONS:STRING=${MACRO_CHECK_FUNCTION_DEFINITIONS}
+      -DCMAKE_SKIP_RPATH:BOOL=${CMAKE_SKIP_RPATH}
+      "${CHECK_C_SOURCE_COMPILES_ADD_LIBRARIES}"
+      "${CHECK_C_SOURCE_COMPILES_ADD_INCLUDES}"
+      # OUTPUT_VARIABLE OUTPUT # Do NOT use to make cross-compiling easier
+      )
+    # Note that ${var} will be a 0 return value on success.
+    if(NOT ${var}_COMPILED)
+      set(${var} -1 CACHE INTERNAL "${description} failed to compile.")
+    endif()
+
+    if(${invert} MATCHES INVERT)
+      if(${var}_COMPILED)
+        if(${var})
+          message(STATUS "${description} - yes")
+        else()
+          message(STATUS "${description} - no")
+        endif()
+      else()
+        message(STATUS "${description} - failed to compile")
+      endif()
+    else()
+      if(${var}_COMPILED)
+        if(${var})
+          message(STATUS "${description} - no")
+        else()
+          message(STATUS "${description} - yes")
+        endif()
+      else()
+        message(STATUS "${description} - failed to compile")
+      endif()
+    endif()
+  endif()
+
+  if(${invert} MATCHES INVERT)
+    if(${var}_COMPILED)
+      if(${var})
+        SET(${var} 1)
+      else()
+        SET(${var} 0)
+      endif()
+    else()
+      SET(${var} 1)
+    endif()
+  else()
+    if(${var}_COMPILED)
+      if(${var})
+        SET(${var} 0)
+      else()
+        SET(${var} 1)
+      endif()
+    else()
+      SET(${var} 0)
+    endif()
+  endif()
+endmacro()
+
+macro(python_check_function name var)
+  set(check_src ${PROJECT_BINARY_DIR}/CMakeFiles/ac_fn_c_check_func_${name}.c)
+  file(WRITE ${check_src} "
+/* Define ${name} to an innocuous variant, in case <limits.h> declares ${name}.
+   For example, HP-UX 11i <limits.h> declares gettimeofday.  */
+#define ${name} innocuous_${name}
+
+/* System header to define __stub macros and hopefully few prototypes,
+    which can conflict with char ${name} (); below.
+    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
+    <limits.h> exists even on freestanding compilers.  */
+
+#ifdef __STDC__
+# include <limits.h>
+#else
+# include <assert.h>
+#endif
+
+#undef ${name}
+
+/* Override any GCC internal prototype to avoid an error.
+   Use char because int might match the return type of a GCC
+   builtin and then its argument prototype would still apply.  */
+#ifdef __cplusplus
+extern \"C\"
+#endif
+char ${name} ();
+/* The GNU C library defines this for functions which it implements
+    to always fail with ENOSYS.  Some functions are actually named
+    something starting with __ and the normal name is an alias.  */
+#if defined __stub_${name} || defined __stub___${name}
+choke me
+#endif
+
+int main () { return ${name} (); }
+")
+
+  python_platform_test(
+    ${var}
+    "Checking for ${name}"
+    ${check_src}
+    DIRECT
+    )
+endmacro()
--- /dev/null
+++ b/cmake/PythonApplyPatches.cmake
@@ -0,0 +1,108 @@
+
+set(CMAKE_MODULE_PATH
+  ${CMAKE_CURRENT_LIST_DIR}
+  ${CMAKE_MODULE_PATH}
+  )
+
+if(NOT DEFINED PATCH_COMMAND)
+  find_package(Git)
+  if(Git_FOUND OR GIT_FOUND)
+    set(PATCH_COMMAND ${GIT_EXECUTABLE} apply --whitespace=fix)
+    # Initialize Git repo to ensure "git apply" works when source tree
+    # is located within an already versioned tree.
+    if(NOT EXISTS "${SRC_DIR}/.git")
+      execute_process(
+        COMMAND ${GIT_EXECUTABLE} init
+        WORKING_DIRECTORY ${SRC_DIR}
+        RESULT_VARIABLE result
+        ERROR_VARIABLE error
+        ERROR_STRIP_TRAILING_WHITESPACE
+        OUTPUT_QUIET
+        )
+      if(NOT result EQUAL 0)
+        message(FATAL_ERROR "${output}\n${error}")
+      endif()
+    endif()
+  else()
+    find_package(Patch)
+    if(Patch_FOUND OR PATCH_FOUND)
+      # Since support for git diffs which copy or rename files was
+      # added in patch 2.7, we can not use older version.
+      if("${Patch_VERSION}" VERSION_EQUAL "2.7.0" OR "${Patch_VERSION}" VERSION_GREATER "2.7.0")
+        set(PATCH_COMMAND ${Patch_EXECUTABLE} --quiet -p1 -i)
+      else()
+        set(_reason "Found Patch executable [${Patch_EXECUTABLE}] version [${Patch_VERSION}] older than 2.7.0 missing support for copy or rename files.")
+      endif()
+    endif()
+  endif()
+endif()
+
+if(NOT DEFINED PATCH_COMMAND)
+  message(FATAL_ERROR "Could NOT find a suitable version of Git or Patch executable to apply patches. ${_reason}")
+endif()
+
+set(patches_dir "${Python_SOURCE_DIR}/patches")
+
+function(_apply_patches _subdir)
+  if(NOT EXISTS ${patches_dir}/${_subdir})
+    message(STATUS "Skipping patches: Directory '${patches_dir}/${_subdir}' does not exist")
+    return()
+  endif()
+  file(GLOB _patches RELATIVE ${patches_dir} "${patches_dir}/${_subdir}/*.patch")
+  if(NOT _patches)
+    return()
+  endif()
+  message(STATUS "")
+  list(SORT _patches)
+  foreach(patch IN LISTS _patches)
+    set(msg "Applying '${patch}'")
+    message(STATUS "${msg}")
+    set(applied ${SRC_DIR}/.patches/${patch}.applied)
+    # Handle case where source tree was patched using the legacy approach.
+    set(legacy_applied ${PROJECT_BINARY_DIR}/CMakeFiles/patches/${patch}.applied)
+    if(EXISTS ${legacy_applied})
+      set(applied ${legacy_applied})
+    endif()
+    if(EXISTS ${applied})
+      message(STATUS "${msg} - skipping (already applied)")
+      continue()
+    endif()
+    execute_process(
+      COMMAND ${PATCH_COMMAND} ${patches_dir}/${patch}
+      WORKING_DIRECTORY ${SRC_DIR}
+      RESULT_VARIABLE result
+      ERROR_VARIABLE error
+      ERROR_STRIP_TRAILING_WHITESPACE
+      OUTPUT_VARIABLE output
+      OUTPUT_STRIP_TRAILING_WHITESPACE
+      )
+    if(result EQUAL 0)
+      message(STATUS "${msg} - done")
+      get_filename_component(_dir ${applied} DIRECTORY)
+      execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory ${_dir})
+      execute_process(COMMAND ${CMAKE_COMMAND} -E touch ${applied})
+    else()
+      message(STATUS "${msg} - failed")
+      message(FATAL_ERROR "${output}\n${error}")
+    endif()
+  endforeach()
+  message(STATUS "")
+endfunction()
+
+set(_py_version ${PY_VERSION})
+if("${PY_VERSION}" VERSION_LESS "3.0" AND
+    ("${PY_VERSION}" VERSION_EQUAL "2.7.13" OR "${PY_VERSION}" VERSION_GREATER "2.7.13"))
+  set(_py_version "2.7.13")
+  message(STATUS "Using ${_py_version} patches for 2.7.13 <= PY_VERSION < 3.0.0")
+endif()
+
+# Apply patches
+_apply_patches("${PY_VERSION_MAJOR}.${PY_VERSION_MINOR}")
+_apply_patches("${_py_version}")
+_apply_patches("${_py_version}/${CMAKE_SYSTEM_NAME}")
+_apply_patches("${_py_version}/${CMAKE_SYSTEM_NAME}-${CMAKE_C_COMPILER_ID}")
+set(_version ${CMAKE_C_COMPILER_VERSION})
+if(MSVC)
+  set(_version ${MSVC_VERSION})
+endif()
+_apply_patches("${_py_version}/${CMAKE_SYSTEM_NAME}-${CMAKE_C_COMPILER_ID}/${_version}")
--- /dev/null
+++ b/cmake/PythonAutoDetectOSX.cmake
@@ -0,0 +1,64 @@
+if(APPLE)
+  if(NOT CMAKE_OSX_ARCHITECTURES)
+    set(CMAKE_OSX_ARCHITECTURES "x86_64" CACHE STRING "By default, build for 64-bit")
+  endif()
+
+  if(NOT CMAKE_OSX_SDK)
+    execute_process(
+      COMMAND xcrun
+              --show-sdk-version
+      OUTPUT_VARIABLE
+              SDK_VERSION
+      RESULT_VARIABLE
+              res
+      ERROR_QUIET
+      OUTPUT_STRIP_TRAILING_WHITESPACE)
+    if(res)
+      # Probably running on an older version of XCode, instead try to list all available
+      # SDKs and extract the version of the first one.
+      execute_process(
+        COMMAND xcodebuild
+                -showsdks
+        OUTPUT_VARIABLE
+                xcodebuild_sdks
+        RESULT_VARIABLE
+                res
+        OUTPUT_STRIP_TRAILING_WHITESPACE)
+      string(REGEX MATCH "sdk macosx([0-9\\. ]+)" output "${xcodebuild_sdks}")
+      if(res OR output STREQUAL "")
+        message(FATAL_ERROR "Failed to detect CMAKE_OSX_SDK; please set manually (e.g. \"macosx10.6\")")
+      endif()
+      set(SDK_VERSION ${CMAKE_MATCH_1})
+    endif()
+    set(CMAKE_OSX_SDK macosx${SDK_VERSION})
+  endif()
+
+  if(NOT CMAKE_OSX_SYSROOT)
+    execute_process(
+      COMMAND xcodebuild
+              -sdk ${CMAKE_OSX_SDK}
+              -version Path
+      OUTPUT_VARIABLE
+              CMAKE_OSX_SYSROOT
+      RESULT_VARIABLE
+              res
+      OUTPUT_STRIP_TRAILING_WHITESPACE)
+    if(res)
+      message(FATAL_ERROR "Cannot determine SDK path for SDK: ${CMAKE_OSX_SDK}")
+    endif()
+  endif()
+  if(NOT CMAKE_OSX_DEPLOYMENT_TARGET)
+    execute_process(
+      COMMAND xcodebuild
+              -sdk ${CMAKE_OSX_SDK}
+              -version SDKVersion
+      OUTPUT_VARIABLE
+              CMAKE_OSX_DEPLOYMENT_TARGET
+      RESULT_VARIABLE
+              res
+      OUTPUT_STRIP_TRAILING_WHITESPACE)
+    if(res)
+      message(FATAL_ERROR "Cannot determine SDK version for SDK: ${CMAKE_OSX_SDK}")
+    endif()
+  endif()
+endif()
--- /dev/null
+++ b/cmake/PythonConfig.cmake.in
@@ -0,0 +1,51 @@
+#  PYTHON_USE_STATIC_LIB    - Set to ON to force the use of the static
+#                             library.  Default is OFF.
+
+@PACKAGE_INIT@
+
+set(BUILD_LIBPYTHON_SHARED @BUILD_LIBPYTHON_SHARED@)
+if(BUILD_LIBPYTHON_SHARED)
+  set(PYTHON_BUILD_SHARED 1)
+  set(PYTHON_BUILD_STATIC 0)
+else()
+  set(PYTHON_BUILD_SHARED 0)
+  set(PYTHON_BUILD_STATIC 1)
+endif()
+
+set_and_check(PYTHON_CONFIG_DIR "@PACKAGE_CONFIG_DIR_CONFIG@")
+set_and_check(PYTHON_INCLUDE_DIR "@PACKAGE_INCLUDE_DIR_CONFIG@")
+set_and_check(PYTHON_TARGETS "@PACKAGE_CONFIG_DIR_CONFIG@/PythonTargets.cmake")
+
+@PYTHON_CONFIG_CODE@
+
+if(NOT PYTHON_TARGETS_IMPORTED)
+  set(PYTHON_TARGETS_IMPORTED 1)
+  include(${PYTHON_TARGETS})
+endif()
+
+if(TARGET libpython-shared)
+  set(PYTHON_LIBRARY_SHARED libpython-shared)
+endif()
+if(TARGET libpython-static)
+  set(PYTHON_LIBRARY_STATIC libpython-static)
+endif()
+
+if(NOT Python_USE_STATIC_LIB)
+  if(PYTHON_LIBRARY_SHARED)
+    set(PYTHON_LIBRARIES ${PYTHON_LIBRARY_SHARED})
+  elseif(PYTHON_LIBRARY_STATIC)
+    set(PYTHON_LIBRARIES ${PYTHON_LIBRARY_STATIC})
+  endif()
+else()
+  if(PYTHON_LIBRARY_STATIC)
+    set(PYTHON_LIBRARIES ${PYTHON_LIBRARY_STATIC})
+  else()
+    set(PYTHON_LIBRARIES ${PYTHON_LIBRARY_SHARED})
+  endif()
+endif()
+
+if(NOT Python_FIND_QUIETLY)
+  message(STATUS "PYTHON_LIBRARIES set to ${PYTHON_LIBRARIES}")
+endif()
+
+set(PYTHON_INCLUDE_DIRS ${PYTHON_INCLUDE_DIR})
--- /dev/null
+++ b/cmake/UnitTests.cmake
@@ -0,0 +1,821 @@
+
+# Python code allowing to generate list of unittests reported below
+set(cmd "exec(\"")
+set(cmd "${cmd}import glob\\n")
+set(cmd "${cmd}import os\\n")
+set(cmd "${cmd}filenames = sorted(glob.glob('./${PYTHONHOME}/test/test_*.py'))\\n")
+set(cmd "${cmd}for filename in filenames:\\n")
+set(cmd "${cmd}  print('list(APPEND unittests \\\"%s\\\")' % os.path.splitext(os.path.basename(filename))[0])\\n")
+set(cmd "${cmd}print('Discovered %d tests' % len(filenames))\\n")
+set(cmd "${cmd}\")")
+
+add_custom_target(list_unittests
+    ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:python> -c "${cmd}"
+    DEPENDS python
+    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
+    COMMENT "Display list of python unittests"
+    VERBATIM
+)
+
+# The following list has been generated and *manually* copied below building
+# the 'list_unittests' target.
+
+if(IS_PY2)
+
+list(APPEND unittests "test_abc")
+list(APPEND unittests "test_abstract_numbers")
+list(APPEND unittests "test_aepack")
+list(APPEND unittests "test_aifc")
+list(APPEND unittests "test_al")
+list(APPEND unittests "test___all__")
+list(APPEND unittests "test_anydbm")
+list(APPEND unittests "test_applesingle")
+list(APPEND unittests "test_argparse")
+list(APPEND unittests "test_array")
+list(APPEND unittests "test_ascii_formatd")
+list(APPEND unittests "test_ast")
+list(APPEND unittests "test_asynchat")
+list(APPEND unittests "test_asyncore")
+list(APPEND unittests "test_atexit")
+list(APPEND unittests "test_audioop")
+list(APPEND unittests "test_augassign")
+list(APPEND unittests "test_base64")
+list(APPEND unittests "test_bastion")
+list(APPEND unittests "test_bigaddrspace")
+list(APPEND unittests "test_bigmem")
+list(APPEND unittests "test_binascii")
+list(APPEND unittests "test_binhex")
+list(APPEND unittests "test_binop")
+list(APPEND unittests "test_bisect")
+list(APPEND unittests "test_bool")
+list(APPEND unittests "test_bsddb")
+list(APPEND unittests "test_bsddb185")
+list(APPEND unittests "test_bsddb3")
+list(APPEND unittests "test_buffer")
+list(APPEND unittests "test_bufio")
+list(APPEND unittests "test_builtin")
+list(APPEND unittests "test_bytes")
+list(APPEND unittests "test_bz2")
+list(APPEND unittests "test_calendar")
+list(APPEND unittests "test_call")
+list(APPEND unittests "test_capi")
+list(APPEND unittests "test_cd")
+list(APPEND unittests "test_cfgparser")
+list(APPEND unittests "test_cgi")
+list(APPEND unittests "test_charmapcodec")
+list(APPEND unittests "test_cl")
+list(APPEND unittests "test_class")
+list(APPEND unittests "test_cmath")
+list(APPEND unittests "test_cmd")
+list(APPEND unittests "test_cmd_line")
+list(APPEND unittests "test_cmd_line_script")
+list(APPEND unittests "test_code")
+list(APPEND unittests "test_codeccallbacks")
+list(APPEND unittests "test_codecencodings_cn")
+list(APPEND unittests "test_codecencodings_hk")
+list(APPEND unittests "test_codecencodings_iso2022")
+list(APPEND unittests "test_codecencodings_jp")
+list(APPEND unittests "test_codecencodings_kr")
+list(APPEND unittests "test_codecencodings_tw")
+list(APPEND unittests "test_codecmaps_cn")
+list(APPEND unittests "test_codecmaps_hk")
+list(APPEND unittests "test_codecmaps_jp")
+list(APPEND unittests "test_codecmaps_kr")
+list(APPEND unittests "test_codecmaps_tw")
+list(APPEND unittests "test_codecs")
+list(APPEND unittests "test_codeop")
+if(PY_VERSION_PATCH LESS 12)
+  list(APPEND unittests "test_coding")
+  list(APPEND unittests "test_pep263")
+else()
+  list(APPEND unittests "test_source_encoding")
+endif()
+list(APPEND unittests "test_coercion")
+list(APPEND unittests "test_collections")
+list(APPEND unittests "test_colorsys")
+list(APPEND unittests "test_commands")
+list(APPEND unittests "test_compare")
+list(APPEND unittests "test_compile")
+list(APPEND unittests "test_compileall")
+list(APPEND unittests "test_compiler")
+list(APPEND unittests "test_complex")
+list(APPEND unittests "test_complex_args")
+list(APPEND unittests "test_contains")
+list(APPEND unittests "test_contextlib")
+list(APPEND unittests "test_cookie")
+list(APPEND unittests "test_cookielib")
+list(APPEND unittests "test_copy")
+list(APPEND unittests "test_copy_reg")
+list(APPEND unittests "test_cpickle")
+list(APPEND unittests "test_cprofile")
+list(APPEND unittests "test_crypt")
+list(APPEND unittests "test_csv")
+list(APPEND unittests "test_ctypes")
+list(APPEND unittests "test_curses")
+list(APPEND unittests "test_datetime")
+list(APPEND unittests "test_dbm")
+list(APPEND unittests "test_decimal")
+list(APPEND unittests "test_decorators")
+list(APPEND unittests "test_defaultdict")
+list(APPEND unittests "test_deque")
+list(APPEND unittests "test_descr")
+list(APPEND unittests "test_descrtut")
+list(APPEND unittests "test_dict")
+list(APPEND unittests "test_dictcomps")
+list(APPEND unittests "test_dictviews")
+list(APPEND unittests "test_difflib")
+list(APPEND unittests "test_dircache")
+list(APPEND unittests "test_dis")
+list(APPEND unittests "test_distutils")
+list(APPEND unittests "test_dl")
+list(APPEND unittests "test_doctest")
+list(APPEND unittests "test_doctest2")
+list(APPEND unittests "test_docxmlrpc")
+list(APPEND unittests "test_dumbdbm")
+list(APPEND unittests "test_dummy_thread")
+list(APPEND unittests "test_dummy_threading")
+list(APPEND unittests "test_email")
+list(APPEND unittests "test_email_codecs")
+list(APPEND unittests "test_email_renamed")
+list(APPEND unittests "test_enumerate")
+list(APPEND unittests "test_eof")
+list(APPEND unittests "test_epoll")
+list(APPEND unittests "test_errno")
+list(APPEND unittests "test_exceptions")
+list(APPEND unittests "test_exception_variations")
+list(APPEND unittests "test_extcall")
+list(APPEND unittests "test_fcntl")
+list(APPEND unittests "test_file")
+list(APPEND unittests "test_file2k")
+list(APPEND unittests "test_filecmp")
+list(APPEND unittests "test_fileinput")
+list(APPEND unittests "test_fileio")
+list(APPEND unittests "test_float")
+list(APPEND unittests "test_fnmatch")
+list(APPEND unittests "test_fork1")
+list(APPEND unittests "test_format")
+list(APPEND unittests "test_fpformat")
+list(APPEND unittests "test_fractions")
+list(APPEND unittests "test_frozen")
+list(APPEND unittests "test_ftplib")
+list(APPEND unittests "test_funcattrs")
+list(APPEND unittests "test_functools")
+list(APPEND unittests "test___future__")
+list(APPEND unittests "test_future")
+list(APPEND unittests "test_future1")
+list(APPEND unittests "test_future2")
+list(APPEND unittests "test_future3")
+list(APPEND unittests "test_future4")
+list(APPEND unittests "test_future5")
+list(APPEND unittests "test_future_builtins")
+list(APPEND unittests "test_gc")
+list(APPEND unittests "test_gdb")
+list(APPEND unittests "test_gdbm")
+list(APPEND unittests "test_generators")
+list(APPEND unittests "test_genericpath")
+list(APPEND unittests "test_genexps")
+list(APPEND unittests "test_getargs")
+list(APPEND unittests "test_getargs2")
+list(APPEND unittests "test_getopt")
+list(APPEND unittests "test_gettext")
+list(APPEND unittests "test_gl")
+list(APPEND unittests "test_glob")
+list(APPEND unittests "test_global")
+list(APPEND unittests "test_grammar")
+list(APPEND unittests "test_grp")
+list(APPEND unittests "test_gzip")
+list(APPEND unittests "test_hash")
+list(APPEND unittests "test_hashlib")
+list(APPEND unittests "test_heapq")
+list(APPEND unittests "test_hmac")
+list(APPEND unittests "test_hotshot")
+list(APPEND unittests "test_htmllib")
+list(APPEND unittests "test_htmlparser")
+list(APPEND unittests "test_httplib")
+list(APPEND unittests "test_httpservers")
+list(APPEND unittests "test_imageop")
+list(APPEND unittests "test_imaplib")
+list(APPEND unittests "test_imgfile")
+list(APPEND unittests "test_imp")
+list(APPEND unittests "test_import")
+list(APPEND unittests "test_importhooks")
+list(APPEND unittests "test_importlib")
+list(APPEND unittests "test_index")
+list(APPEND unittests "test_inspect")
+list(APPEND unittests "test_int")
+list(APPEND unittests "test_int_literal")
+list(APPEND unittests "test_io")
+list(APPEND unittests "test_ioctl")
+list(APPEND unittests "test_isinstance")
+list(APPEND unittests "test_iter")
+list(APPEND unittests "test_iterlen")
+list(APPEND unittests "test_itertools")
+list(APPEND unittests "test_json")
+list(APPEND unittests "test_kqueue")
+list(APPEND unittests "test_largefile")
+list(APPEND unittests "test_lib2to3")
+list(APPEND unittests "test_linecache")
+list(APPEND unittests "test_linuxaudiodev")
+list(APPEND unittests "test_list")
+list(APPEND unittests "test__locale")
+list(APPEND unittests "test_locale")
+list(APPEND unittests "test_logging")
+list(APPEND unittests "test_long")
+list(APPEND unittests "test_longexp")
+list(APPEND unittests "test_long_future")
+list(APPEND unittests "test_macos")
+list(APPEND unittests "test_macostools")
+list(APPEND unittests "test_macpath")
+list(APPEND unittests "test_mailbox")
+list(APPEND unittests "test_marshal")
+list(APPEND unittests "test_math")
+list(APPEND unittests "test_md5")
+list(APPEND unittests "test_memoryio")
+list(APPEND unittests "test_memoryview")
+list(APPEND unittests "test_mhlib")
+list(APPEND unittests "test_mimetools")
+list(APPEND unittests "test_mimetypes")
+list(APPEND unittests "test_MimeWriter")
+list(APPEND unittests "test_minidom")
+list(APPEND unittests "test_mmap")
+list(APPEND unittests "test_module")
+list(APPEND unittests "test_modulefinder")
+list(APPEND unittests "test_msilib")
+list(APPEND unittests "test_multibytecodec")
+list(APPEND unittests "test_multibytecodec_support")
+list(APPEND unittests "test_multifile")
+list(APPEND unittests "test_multiprocessing")
+list(APPEND unittests "test_mutants")
+list(APPEND unittests "test_mutex")
+list(APPEND unittests "test_netrc")
+list(APPEND unittests "test_new")
+list(APPEND unittests "test_nis")
+list(APPEND unittests "test_normalization")
+list(APPEND unittests "test_ntpath")
+list(APPEND unittests "test_old_mailbox")
+list(APPEND unittests "test_opcodes")
+list(APPEND unittests "test_openpty")
+list(APPEND unittests "test_operator")
+list(APPEND unittests "test_optparse")
+list(APPEND unittests "test_os")
+list(APPEND unittests "test_ossaudiodev")
+list(APPEND unittests "test_parser")
+list(APPEND unittests "test_pdb")
+list(APPEND unittests "test_peepholer")
+list(APPEND unittests "test_pep247")
+list(APPEND unittests "test_pep277")
+if(PY_VERSION_PATCH LESS 12)
+  list(APPEND unittests "test_pep292")
+else()
+  list(APPEND unittests "test_string")
+endif()
+list(APPEND unittests "test_pep352")
+list(APPEND unittests "test_pickle")
+list(APPEND unittests "test_pickletools")
+list(APPEND unittests "test_pipes")
+list(APPEND unittests "test_pkg")
+list(APPEND unittests "test_pkgimport")
+list(APPEND unittests "test_pkgutil")
+list(APPEND unittests "test_platform")
+list(APPEND unittests "test_plistlib")
+list(APPEND unittests "test_poll")
+list(APPEND unittests "test_popen")
+list(APPEND unittests "test_popen2")
+list(APPEND unittests "test_poplib")
+list(APPEND unittests "test_posix")
+list(APPEND unittests "test_posixpath")
+list(APPEND unittests "test_pow")
+list(APPEND unittests "test_pprint")
+list(APPEND unittests "test_print")
+list(APPEND unittests "test_profile")
+list(APPEND unittests "test_property")
+list(APPEND unittests "test_pstats")
+list(APPEND unittests "test_pty")
+list(APPEND unittests "test_pwd")
+list(APPEND unittests "test_py3kwarn")
+list(APPEND unittests "test_pyclbr")
+list(APPEND unittests "test_py_compile")
+list(APPEND unittests "test_pydoc")
+list(APPEND unittests "test_pyexpat")
+list(APPEND unittests "test_queue")
+list(APPEND unittests "test_quopri")
+list(APPEND unittests "test_random")
+list(APPEND unittests "test_re")
+list(APPEND unittests "test_readline")
+list(APPEND unittests "test_repr")
+list(APPEND unittests "test_resource")
+list(APPEND unittests "test_rfc822")
+list(APPEND unittests "test_richcmp")
+list(APPEND unittests "test_rlcompleter")
+list(APPEND unittests "test_robotparser")
+list(APPEND unittests "test_runpy")
+list(APPEND unittests "test_sax")
+list(APPEND unittests "test_scope")
+list(APPEND unittests "test_scriptpackages")
+list(APPEND unittests "test_select")
+list(APPEND unittests "test_set")
+list(APPEND unittests "test_setcomps")
+list(APPEND unittests "test_sets")
+list(APPEND unittests "test_sgmllib")
+list(APPEND unittests "test_sha")
+list(APPEND unittests "test_shelve")
+list(APPEND unittests "test_shlex")
+list(APPEND unittests "test_shutil")
+list(APPEND unittests "test_signal")
+list(APPEND unittests "test_SimpleHTTPServer")
+list(APPEND unittests "test_site")
+list(APPEND unittests "test_slice")
+list(APPEND unittests "test_smtplib")
+list(APPEND unittests "test_smtpnet")
+list(APPEND unittests "test_socket")
+list(APPEND unittests "test_socketserver")
+list(APPEND unittests "test_softspace")
+list(APPEND unittests "test_sort")
+list(APPEND unittests "test_sqlite")
+list(APPEND unittests "test_ssl")
+list(APPEND unittests "test_startfile")
+list(APPEND unittests "test_str")
+list(APPEND unittests "test_strftime")
+list(APPEND unittests "test_string")
+list(APPEND unittests "test_StringIO")
+list(APPEND unittests "test_stringprep")
+list(APPEND unittests "test_strop")
+list(APPEND unittests "test_strptime")
+list(APPEND unittests "test_strtod")
+list(APPEND unittests "test_struct")
+list(APPEND unittests "test_structmembers")
+list(APPEND unittests "test_structseq")
+list(APPEND unittests "test_subprocess")
+list(APPEND unittests "test_sunaudiodev")
+list(APPEND unittests "test_sundry")
+list(APPEND unittests "test_support")
+list(APPEND unittests "test_symtable")
+list(APPEND unittests "test_syntax")
+list(APPEND unittests "test_sys")
+list(APPEND unittests "test_sysconfig")
+list(APPEND unittests "test_sys_setprofile")
+list(APPEND unittests "test_sys_settrace")
+list(APPEND unittests "test_tarfile")
+list(APPEND unittests "test_tcl")
+list(APPEND unittests "test_telnetlib")
+list(APPEND unittests "test_tempfile")
+list(APPEND unittests "test_textwrap")
+list(APPEND unittests "test_thread")
+list(APPEND unittests "test_threaded_import")
+list(APPEND unittests "test_threadedtempfile")
+list(APPEND unittests "test_threading")
+list(APPEND unittests "test_threading_local")
+list(APPEND unittests "test_threadsignals")
+list(APPEND unittests "test_time")
+list(APPEND unittests "test_timeout")
+list(APPEND unittests "test_tk")
+list(APPEND unittests "test_tokenize")
+list(APPEND unittests "test_trace")
+list(APPEND unittests "test_traceback")
+list(APPEND unittests "test_transformer")
+list(APPEND unittests "test_ttk_guionly")
+list(APPEND unittests "test_ttk_textonly")
+list(APPEND unittests "test_tuple")
+list(APPEND unittests "test_typechecks")
+list(APPEND unittests "test_types")
+list(APPEND unittests "test_ucn")
+list(APPEND unittests "test_unary")
+list(APPEND unittests "test_undocumented_details")
+list(APPEND unittests "test_unicode")
+list(APPEND unittests "test_unicodedata")
+list(APPEND unittests "test_unicode_file")
+list(APPEND unittests "test_unittest")
+list(APPEND unittests "test_univnewlines")
+list(APPEND unittests "test_univnewlines2k")
+list(APPEND unittests "test_unpack")
+list(APPEND unittests "test_urllib")
+list(APPEND unittests "test_urllib2")
+list(APPEND unittests "test_urllib2_localnet")
+list(APPEND unittests "test_urllib2net")
+list(APPEND unittests "test_urllibnet")
+list(APPEND unittests "test_urlparse")
+list(APPEND unittests "test_userdict")
+list(APPEND unittests "test_userlist")
+list(APPEND unittests "test_userstring")
+list(APPEND unittests "test_uu")
+list(APPEND unittests "test_uuid")
+list(APPEND unittests "test_wait3")
+list(APPEND unittests "test_wait4")
+list(APPEND unittests "test_warnings")
+list(APPEND unittests "test_wave")
+list(APPEND unittests "test_weakref")
+list(APPEND unittests "test_weakset")
+list(APPEND unittests "test_whichdb")
+list(APPEND unittests "test_winreg")
+list(APPEND unittests "test_winsound")
+list(APPEND unittests "test_with")
+list(APPEND unittests "test_wsgiref")
+list(APPEND unittests "test_xdrlib")
+list(APPEND unittests "test_xml_etree")
+list(APPEND unittests "test_xml_etree_c")
+list(APPEND unittests "test_xmllib")
+list(APPEND unittests "test_xmlrpc")
+list(APPEND unittests "test_xpickle")
+list(APPEND unittests "test_xrange")
+list(APPEND unittests "test_zipfile")
+list(APPEND unittests "test_zipfile64")
+list(APPEND unittests "test_zipimport")
+list(APPEND unittests "test_zipimport_support")
+list(APPEND unittests "test_zlib")
+
+else()
+
+list(APPEND unittests "test___all__")
+list(APPEND unittests "test___future__")
+list(APPEND unittests "test__locale")
+list(APPEND unittests "test__opcode")
+list(APPEND unittests "test__osx_support")
+list(APPEND unittests "test_abc")
+list(APPEND unittests "test_abstract_numbers")
+list(APPEND unittests "test_aifc")
+list(APPEND unittests "test_argparse")
+list(APPEND unittests "test_array")
+list(APPEND unittests "test_asdl_parser")
+list(APPEND unittests "test_ast")
+list(APPEND unittests "test_asynchat")
+list(APPEND unittests "test_asyncore")
+list(APPEND unittests "test_atexit")
+list(APPEND unittests "test_audioop")
+list(APPEND unittests "test_augassign")
+list(APPEND unittests "test_base64")
+list(APPEND unittests "test_bigaddrspace")
+list(APPEND unittests "test_bigmem")
+list(APPEND unittests "test_binascii")
+list(APPEND unittests "test_binhex")
+list(APPEND unittests "test_binop")
+list(APPEND unittests "test_bisect")
+list(APPEND unittests "test_bool")
+list(APPEND unittests "test_buffer")
+list(APPEND unittests "test_bufio")
+list(APPEND unittests "test_builtin")
+list(APPEND unittests "test_bytes")
+list(APPEND unittests "test_bz2")
+list(APPEND unittests "test_calendar")
+list(APPEND unittests "test_call")
+list(APPEND unittests "test_capi")
+list(APPEND unittests "test_cgi")
+list(APPEND unittests "test_cgitb")
+list(APPEND unittests "test_charmapcodec")
+list(APPEND unittests "test_class")
+list(APPEND unittests "test_cmath")
+list(APPEND unittests "test_cmd")
+list(APPEND unittests "test_cmd_line")
+list(APPEND unittests "test_cmd_line_script")
+list(APPEND unittests "test_code")
+list(APPEND unittests "test_code_module")
+list(APPEND unittests "test_codeccallbacks")
+list(APPEND unittests "test_codecencodings_cn")
+list(APPEND unittests "test_codecencodings_hk")
+list(APPEND unittests "test_codecencodings_iso2022")
+list(APPEND unittests "test_codecencodings_jp")
+list(APPEND unittests "test_codecencodings_kr")
+list(APPEND unittests "test_codecencodings_tw")
+list(APPEND unittests "test_codecmaps_cn")
+list(APPEND unittests "test_codecmaps_hk")
+list(APPEND unittests "test_codecmaps_jp")
+list(APPEND unittests "test_codecmaps_kr")
+list(APPEND unittests "test_codecmaps_tw")
+list(APPEND unittests "test_codecs")
+list(APPEND unittests "test_codeop")
+list(APPEND unittests "test_collections")
+list(APPEND unittests "test_colorsys")
+list(APPEND unittests "test_compare")
+list(APPEND unittests "test_compile")
+list(APPEND unittests "test_compileall")
+list(APPEND unittests "test_complex")
+list(APPEND unittests "test_concurrent_futures")
+list(APPEND unittests "test_configparser")
+list(APPEND unittests "test_contains")
+list(APPEND unittests "test_contextlib")
+list(APPEND unittests "test_copy")
+list(APPEND unittests "test_copyreg")
+list(APPEND unittests "test_coroutines")
+list(APPEND unittests "test_cprofile")
+list(APPEND unittests "test_crashers")
+list(APPEND unittests "test_crypt")
+list(APPEND unittests "test_csv")
+list(APPEND unittests "test_ctypes")
+list(APPEND unittests "test_curses")
+list(APPEND unittests "test_datetime")
+list(APPEND unittests "test_dbm")
+list(APPEND unittests "test_dbm_dumb")
+list(APPEND unittests "test_dbm_gnu")
+list(APPEND unittests "test_dbm_ndbm")
+list(APPEND unittests "test_decimal")
+list(APPEND unittests "test_decorators")
+list(APPEND unittests "test_defaultdict")
+list(APPEND unittests "test_deque")
+list(APPEND unittests "test_descr")
+list(APPEND unittests "test_descrtut")
+list(APPEND unittests "test_devpoll")
+list(APPEND unittests "test_dict")
+list(APPEND unittests "test_dictcomps")
+list(APPEND unittests "test_dictviews")
+list(APPEND unittests "test_difflib")
+list(APPEND unittests "test_dis")
+list(APPEND unittests "test_distutils")
+list(APPEND unittests "test_doctest")
+list(APPEND unittests "test_doctest2")
+list(APPEND unittests "test_docxmlrpc")
+list(APPEND unittests "test_dummy_thread")
+list(APPEND unittests "test_dummy_threading")
+list(APPEND unittests "test_dynamic")
+list(APPEND unittests "test_dynamicclassattribute")
+list(APPEND unittests "test_eintr")
+list(APPEND unittests "test_ensurepip")
+list(APPEND unittests "test_enum")
+list(APPEND unittests "test_enumerate")
+list(APPEND unittests "test_eof")
+list(APPEND unittests "test_epoll")
+list(APPEND unittests "test_errno")
+list(APPEND unittests "test_exception_variations")
+list(APPEND unittests "test_exceptions")
+list(APPEND unittests "test_extcall")
+list(APPEND unittests "test_faulthandler")
+list(APPEND unittests "test_fcntl")
+list(APPEND unittests "test_file")
+list(APPEND unittests "test_file_eintr")
+list(APPEND unittests "test_filecmp")
+list(APPEND unittests "test_fileinput")
+list(APPEND unittests "test_fileio")
+list(APPEND unittests "test_finalization")
+list(APPEND unittests "test_float")
+list(APPEND unittests "test_flufl")
+list(APPEND unittests "test_fnmatch")
+list(APPEND unittests "test_fork1")
+list(APPEND unittests "test_format")
+list(APPEND unittests "test_fractions")
+list(APPEND unittests "test_frame")
+list(APPEND unittests "test_ftplib")
+list(APPEND unittests "test_funcattrs")
+list(APPEND unittests "test_functools")
+list(APPEND unittests "test_future")
+list(APPEND unittests "test_future3")
+list(APPEND unittests "test_future4")
+list(APPEND unittests "test_future5")
+list(APPEND unittests "test_gc")
+list(APPEND unittests "test_gdb")
+list(APPEND unittests "test_generators")
+list(APPEND unittests "test_genericpath")
+list(APPEND unittests "test_genexps")
+list(APPEND unittests "test_getargs2")
+list(APPEND unittests "test_getopt")
+list(APPEND unittests "test_getpass")
+list(APPEND unittests "test_gettext")
+list(APPEND unittests "test_glob")
+list(APPEND unittests "test_global")
+list(APPEND unittests "test_grammar")
+list(APPEND unittests "test_grp")
+list(APPEND unittests "test_gzip")
+list(APPEND unittests "test_hash")
+list(APPEND unittests "test_hashlib")
+list(APPEND unittests "test_heapq")
+list(APPEND unittests "test_hmac")
+list(APPEND unittests "test_html")
+list(APPEND unittests "test_htmlparser")
+list(APPEND unittests "test_http_cookiejar")
+list(APPEND unittests "test_http_cookies")
+list(APPEND unittests "test_httplib")
+list(APPEND unittests "test_httpservers")
+list(APPEND unittests "test_idle")
+list(APPEND unittests "test_imaplib")
+list(APPEND unittests "test_imghdr")
+list(APPEND unittests "test_imp")
+list(APPEND unittests "test_index")
+list(APPEND unittests "test_inspect")
+list(APPEND unittests "test_int")
+list(APPEND unittests "test_int_literal")
+list(APPEND unittests "test_io")
+list(APPEND unittests "test_ioctl")
+list(APPEND unittests "test_ipaddress")
+list(APPEND unittests "test_isinstance")
+list(APPEND unittests "test_iter")
+list(APPEND unittests "test_iterlen")
+list(APPEND unittests "test_itertools")
+list(APPEND unittests "test_keyword")
+list(APPEND unittests "test_keywordonlyarg")
+list(APPEND unittests "test_kqueue")
+list(APPEND unittests "test_largefile")
+list(APPEND unittests "test_lib2to3")
+list(APPEND unittests "test_linecache")
+list(APPEND unittests "test_list")
+list(APPEND unittests "test_listcomps")
+list(APPEND unittests "test_locale")
+list(APPEND unittests "test_logging")
+list(APPEND unittests "test_long")
+list(APPEND unittests "test_longexp")
+list(APPEND unittests "test_lzma")
+list(APPEND unittests "test_macpath")
+list(APPEND unittests "test_macurl2path")
+list(APPEND unittests "test_mailbox")
+list(APPEND unittests "test_mailcap")
+list(APPEND unittests "test_marshal")
+list(APPEND unittests "test_math")
+list(APPEND unittests "test_memoryio")
+list(APPEND unittests "test_memoryview")
+list(APPEND unittests "test_metaclass")
+list(APPEND unittests "test_mimetypes")
+list(APPEND unittests "test_minidom")
+list(APPEND unittests "test_mmap")
+list(APPEND unittests "test_module")
+list(APPEND unittests "test_modulefinder")
+list(APPEND unittests "test_msilib")
+list(APPEND unittests "test_multibytecodec")
+list(APPEND unittests "test_multiprocessing_fork")
+list(APPEND unittests "test_multiprocessing_forkserver")
+list(APPEND unittests "test_multiprocessing_main_handling")
+list(APPEND unittests "test_multiprocessing_spawn")
+list(APPEND unittests "test_netrc")
+list(APPEND unittests "test_nis")
+list(APPEND unittests "test_nntplib")
+list(APPEND unittests "test_normalization")
+list(APPEND unittests "test_ntpath")
+list(APPEND unittests "test_numeric_tower")
+list(APPEND unittests "test_opcodes")
+list(APPEND unittests "test_openpty")
+list(APPEND unittests "test_operator")
+list(APPEND unittests "test_optparse")
+list(APPEND unittests "test_os")
+list(APPEND unittests "test_ossaudiodev")
+list(APPEND unittests "test_osx_env")
+list(APPEND unittests "test_parser")
+list(APPEND unittests "test_pathlib")
+list(APPEND unittests "test_pdb")
+list(APPEND unittests "test_peepholer")
+list(APPEND unittests "test_pep247")
+list(APPEND unittests "test_pep277")
+list(APPEND unittests "test_pep292")
+list(APPEND unittests "test_pep3120")
+list(APPEND unittests "test_pep3131")
+list(APPEND unittests "test_pep3151")
+list(APPEND unittests "test_pep352")
+list(APPEND unittests "test_pep380")
+list(APPEND unittests "test_pep479")
+list(APPEND unittests "test_pickle")
+list(APPEND unittests "test_pickletools")
+list(APPEND unittests "test_pipes")
+list(APPEND unittests "test_pkg")
+list(APPEND unittests "test_pkgimport")
+list(APPEND unittests "test_pkgutil")
+list(APPEND unittests "test_platform")
+list(APPEND unittests "test_plistlib")
+list(APPEND unittests "test_poll")
+list(APPEND unittests "test_popen")
+list(APPEND unittests "test_poplib")
+list(APPEND unittests "test_posix")
+list(APPEND unittests "test_posixpath")
+list(APPEND unittests "test_pow")
+list(APPEND unittests "test_pprint")
+list(APPEND unittests "test_print")
+list(APPEND unittests "test_profile")
+list(APPEND unittests "test_property")
+list(APPEND unittests "test_pstats")
+list(APPEND unittests "test_pty")
+list(APPEND unittests "test_pulldom")
+list(APPEND unittests "test_pwd")
+list(APPEND unittests "test_py_compile")
+list(APPEND unittests "test_pyclbr")
+list(APPEND unittests "test_pydoc")
+list(APPEND unittests "test_pyexpat")
+list(APPEND unittests "test_queue")
+list(APPEND unittests "test_quopri")
+list(APPEND unittests "test_raise")
+list(APPEND unittests "test_random")
+list(APPEND unittests "test_range")
+list(APPEND unittests "test_re")
+list(APPEND unittests "test_readline")
+list(APPEND unittests "test_regrtest")
+list(APPEND unittests "test_reprlib")
+list(APPEND unittests "test_resource")
+list(APPEND unittests "test_richcmp")
+list(APPEND unittests "test_rlcompleter")
+list(APPEND unittests "test_robotparser")
+list(APPEND unittests "test_runpy")
+list(APPEND unittests "test_sax")
+list(APPEND unittests "test_sched")
+list(APPEND unittests "test_scope")
+list(APPEND unittests "test_script_helper")
+list(APPEND unittests "test_select")
+list(APPEND unittests "test_selectors")
+list(APPEND unittests "test_set")
+list(APPEND unittests "test_setcomps")
+list(APPEND unittests "test_shelve")
+list(APPEND unittests "test_shlex")
+list(APPEND unittests "test_shutil")
+list(APPEND unittests "test_signal")
+list(APPEND unittests "test_site")
+list(APPEND unittests "test_slice")
+list(APPEND unittests "test_smtpd")
+list(APPEND unittests "test_smtplib")
+list(APPEND unittests "test_smtpnet")
+list(APPEND unittests "test_sndhdr")
+list(APPEND unittests "test_socket")
+list(APPEND unittests "test_socketserver")
+list(APPEND unittests "test_sort")
+list(APPEND unittests "test_source_encoding")
+list(APPEND unittests "test_spwd")
+list(APPEND unittests "test_sqlite")
+list(APPEND unittests "test_ssl")
+list(APPEND unittests "test_startfile")
+list(APPEND unittests "test_stat")
+list(APPEND unittests "test_statistics")
+list(APPEND unittests "test_strftime")
+list(APPEND unittests "test_string")
+list(APPEND unittests "test_stringprep")
+list(APPEND unittests "test_strlit")
+list(APPEND unittests "test_strptime")
+list(APPEND unittests "test_strtod")
+list(APPEND unittests "test_struct")
+list(APPEND unittests "test_structmembers")
+list(APPEND unittests "test_structseq")
+list(APPEND unittests "test_subprocess")
+list(APPEND unittests "test_sunau")
+list(APPEND unittests "test_sundry")
+list(APPEND unittests "test_super")
+list(APPEND unittests "test_support")
+list(APPEND unittests "test_symtable")
+list(APPEND unittests "test_syntax")
+list(APPEND unittests "test_sys")
+list(APPEND unittests "test_sys_setprofile")
+list(APPEND unittests "test_sys_settrace")
+list(APPEND unittests "test_sysconfig")
+list(APPEND unittests "test_syslog")
+list(APPEND unittests "test_tarfile")
+list(APPEND unittests "test_tcl")
+list(APPEND unittests "test_telnetlib")
+list(APPEND unittests "test_tempfile")
+list(APPEND unittests "test_textwrap")
+list(APPEND unittests "test_thread")
+list(APPEND unittests "test_threaded_import")
+list(APPEND unittests "test_threadedtempfile")
+list(APPEND unittests "test_threading")
+list(APPEND unittests "test_threading_local")
+list(APPEND unittests "test_threadsignals")
+list(APPEND unittests "test_time")
+list(APPEND unittests "test_timeit")
+list(APPEND unittests "test_timeout")
+list(APPEND unittests "test_tix")
+list(APPEND unittests "test_tk")
+list(APPEND unittests "test_tokenize")
+list(APPEND unittests "test_trace")
+list(APPEND unittests "test_traceback")
+list(APPEND unittests "test_tracemalloc")
+list(APPEND unittests "test_ttk_guionly")
+list(APPEND unittests "test_ttk_textonly")
+list(APPEND unittests "test_tuple")
+list(APPEND unittests "test_typechecks")
+list(APPEND unittests "test_types")
+list(APPEND unittests "test_typing")
+list(APPEND unittests "test_ucn")
+list(APPEND unittests "test_unary")
+list(APPEND unittests "test_unicode")
+list(APPEND unittests "test_unicode_file")
+list(APPEND unittests "test_unicodedata")
+list(APPEND unittests "test_unittest")
+list(APPEND unittests "test_univnewlines")
+list(APPEND unittests "test_unpack")
+list(APPEND unittests "test_unpack_ex")
+list(APPEND unittests "test_urllib")
+list(APPEND unittests "test_urllib2")
+list(APPEND unittests "test_urllib2_localnet")
+list(APPEND unittests "test_urllib2net")
+list(APPEND unittests "test_urllib_response")
+list(APPEND unittests "test_urllibnet")
+list(APPEND unittests "test_urlparse")
+list(APPEND unittests "test_userdict")
+list(APPEND unittests "test_userlist")
+list(APPEND unittests "test_userstring")
+list(APPEND unittests "test_uu")
+list(APPEND unittests "test_uuid")
+list(APPEND unittests "test_venv")
+list(APPEND unittests "test_wait3")
+list(APPEND unittests "test_wait4")
+list(APPEND unittests "test_wave")
+list(APPEND unittests "test_weakref")
+list(APPEND unittests "test_weakset")
+list(APPEND unittests "test_webbrowser")
+list(APPEND unittests "test_winreg")
+list(APPEND unittests "test_winsound")
+list(APPEND unittests "test_with")
+list(APPEND unittests "test_wsgiref")
+list(APPEND unittests "test_xdrlib")
+list(APPEND unittests "test_xml_dom_minicompat")
+list(APPEND unittests "test_xml_etree")
+list(APPEND unittests "test_xml_etree_c")
+list(APPEND unittests "test_xmlrpc")
+list(APPEND unittests "test_xmlrpc_net")
+list(APPEND unittests "test_zipapp")
+list(APPEND unittests "test_zipfile")
+list(APPEND unittests "test_zipfile64")
+list(APPEND unittests "test_zipimport")
+list(APPEND unittests "test_zipimport_support")
+list(APPEND unittests "test_zlib")
+
+endif()
+
+list(REMOVE_DUPLICATES unittests)
--- /dev/null
+++ b/cmake/UpdateSysconfig.cmake
@@ -0,0 +1,44 @@
+
+#
+# Required by Python >= 2.7.5
+#
+# This cmake script allows to adapt the output of sysconfig._generate_posix_vars()
+# function to play nice with CMake build system.
+#
+#  1. Backup original pybuilddir.txt to pybuilddir.txt.backup
+#  2. Read the value PYBUILDDIR written in pybuilddir.txt
+#  3. Copy the file <PYBUILDDIR>/<SYSCONFIGDATA_PY> to <EXTENSION_INSTALL_DIR>
+#  4. Create a new pybuilddir.txt file with <EXTENSION_INSTALL_DIR>
+#
+
+# Sanity checks
+foreach(var BIN_BUILD_DIR PYTHON_BINARY_DIR EXTENSION_INSTALL_DIR SYSCONFIGDATA_PY)
+  if(NOT DEFINED ${var})
+    message(FATAL_ERROR "CMake parameter -D${var} is missing !")
+  endif()
+endforeach()
+
+set(_pybuilddir ${BIN_BUILD_DIR}/pybuilddir.txt)
+if(NOT EXISTS ${_pybuilddir})
+  message(FATAL_ERROR "File ${_pybuilddir} does NOT exist")
+endif()
+
+# Backup file
+if(NOT EXISTS ${_pybuilddir}.backup)
+  execute_process(
+    COMMAND ${CMAKE_COMMAND} -E copy
+      ${_pybuilddir} ${_pybuilddir}.backup
+    )
+endif()
+
+# Read PYBUILDDIR value
+file(READ ${_pybuilddir}.backup PYBUILDDIR)
+
+# Copy SYSCONFIGDATA_PY
+execute_process(COMMAND ${CMAKE_COMMAND} -E copy_if_different
+  ${BIN_BUILD_DIR}/${PYBUILDDIR}/${SYSCONFIGDATA_PY}
+  ${PYTHON_BINARY_DIR}/${EXTENSION_INSTALL_DIR}/${SYSCONFIGDATA_PY}
+  )
+
+# Create new file
+file(WRITE "${_pybuilddir}" "${EXTENSION_INSTALL_DIR}")
--- /dev/null
+++ b/cmake/add_python_extension_CMakeLists.txt.in
@@ -0,0 +1,11 @@
+add_library(${target_name} SHARED ${absolute_sources})
+include_directories(${ADD_PYTHON_EXTENSION_INCLUDEDIRS})
+
+target_link_libraries(${target_name} ${ADD_PYTHON_EXTENSION_LIBRARIES})
+
+if(NOT ADD_PYTHON_EXTENSION_NO_INSTALL)
+  install(TARGETS ${target_name}
+          ARCHIVE DESTINATION ${ARCHIVEDIR}
+          LIBRARY DESTINATION ${EXTENSION_INSTALL_DIR}
+          RUNTIME DESTINATION ${EXTENSION_INSTALL_DIR})
+endif()
--- /dev/null
+++ b/cmake/config-mingw/errmap.h
@@ -0,0 +1 @@
+#include "../PC/errmap.h"
--- /dev/null
+++ b/cmake/config-mingw/pyconfig.h
@@ -0,0 +1,566 @@
+#ifndef Py_CONFIG_H
+#define Py_CONFIG_H
+
+/* pyconfig.h.  NOT Generated automatically by configure.
+
+This is a manually maintained version (initially based
+on "PC/pyconfig.h") used for (i686|x86_64)-w64-mingw32
+toolchains (provided by MXE).
+
+WINDOWS DEFINES:
+The code specific to Windows should be wrapped around one of
+the following #defines
+
+MS_WIN64 - Code specific to the MS Win64 API
+MS_WIN32 - Code specific to the MS Win32 (and Win64) API (obsolete, this covers all supported APIs)
+MS_WINDOWS - Code specific to Windows, but all versions.
+Py_ENABLE_SHARED - Code if the Python core is built as a DLL.
+
+NOTE: The following symbols are deprecated:
+NT, USE_DL_EXPORT, USE_DL_IMPORT, DL_EXPORT, DL_IMPORT
+MS_CORE_DLL.
+
+WIN32 is still required for the locale module.
+
+*/
+
+/* Deprecated USE_DL_EXPORT macro - please use Py_BUILD_CORE */
+#ifdef USE_DL_EXPORT
+#  define Py_BUILD_CORE
+#endif /* USE_DL_EXPORT */
+
+#define HAVE_HYPOT
+#define HAVE_STRFTIME
+#define DONT_HAVE_SIG_ALARM
+#define DONT_HAVE_SIG_PAUSE
+#define LONG_BIT  32
+#define WORD_BIT 32
+#define PREFIX ""
+#define EXEC_PREFIX ""
+
+#define MS_WIN32 /* only support win32 and greater. */
+#define MS_WINDOWS
+#ifndef PYTHONPATH
+#  define PYTHONPATH ".\\DLLs;.\\lib;.\\lib\\plat-win;.\\lib\\lib-tk"
+#endif
+#define NT_THREADS
+#define WITH_THREAD
+#ifndef NETSCAPE_PI
+#define USE_SOCKET
+#endif
+
+/* ------------------------------------------------------------------------*/
+/* (i686|x86_64)-w64-mingw32 toolchains defines __MINGW32__ */
+#ifndef __MINGW32__
+# error "This file is should be used with MingW compiler"
+#endif
+
+#define _Py_PASTE_VERSION(SUFFIX) \
+  ("\n[GCC v" __VERSION__ " " SUFFIX "]")
+
+#ifndef COMPILER
+#  ifdef __MINGW64__
+#    define COMPILER _Py_PASTE_VERSION("64 bit (AMD64)")
+#  else
+#    define COMPILER _Py_PASTE_VERSION("32 bit (i686)")
+#  endif
+#endif /* !COMPILER */
+
+/* MinGW defines __MINGWxx__ to differentiate the windows platform types
+
+   Note that for compatibility reasons __MINGW32__ is defined on Win32
+   *and* on Win64. For the same reasons, in Python, MS_WIN32 is
+   defined on Win32 *and* Win64. Win32 only code must therefore be
+   guarded as follows:
+    #if defined(MS_WIN32) && !defined(MS_WIN64)
+*/
+
+#if !defined(MS_WIN64) && defined(__MINGW64__)
+#  define MS_WIN64
+#endif
+
+#ifdef MS_WIN64
+#  define MS_WINX64
+#endif
+
+/* set the version macros for the windows headers */
+#ifdef MS_WINX64
+/* 64 bit only runs on XP or greater */
+#  define Py_WINVER _WIN32_WINNT_WINXP
+#  define Py_NTDDI NTDDI_WINXP
+#else
+/* Python 2.6+ requires Windows 2000 or greater */
+#  ifdef _WIN32_WINNT_WIN2K
+#    define Py_WINVER _WIN32_WINNT_WIN2K
+#  else
+#    define Py_WINVER 0x0500
+#  endif
+#  define Py_NTDDI NTDDI_WIN2KSP4
+#endif
+
+/* We only set these values when building Python - we don't want to force
+   these values on extensions, as that will affect the prototypes and
+   structures exposed in the Windows headers. Even when building Python, we
+   allow a single source file to override this - they may need access to
+   structures etc so it can optionally use new Windows features if it
+   determines at runtime they are available.
+*/
+#if defined(Py_BUILD_CORE) || defined(Py_BUILD_CORE_MODULE)
+#  ifndef NTDDI_VERSION
+#    define NTDDI_VERSION Py_NTDDI
+#  endif
+#  ifndef WINVER
+#    define WINVER Py_WINVER
+#  endif
+#  ifndef _WIN32_WINNT
+#    define _WIN32_WINNT Py_WINVER
+#  endif
+#endif /* defined(Py_BUILD_CORE) || defined(Py_BUILD_CORE_MODULE) */
+
+/* Define like size_t, omitting the "unsigned" */
+#define HAVE_SSIZE_T 1
+
+#include <float.h>
+#define Py_IS_NAN _isnan
+#define Py_IS_INFINITY(X) (!_finite(X) && !_isnan(X))
+#define Py_IS_FINITE(X) _finite(X)
+#define copysign _copysign
+
+#include <basetsd.h>
+
+/* ------------------------------------------------------------------------*/
+/* End of compilers - finish up */
+
+#define HAVE_IO_H
+#define HAVE_SYS_UTIME_H
+#define HAVE_TEMPNAM
+#define HAVE_TMPFILE
+#define HAVE_TMPNAM
+#define HAVE_CLOCK
+#define HAVE_STRERROR
+
+#include <io.h>
+#include <stdio.h>
+
+/* 64 bit ints are usually spelt __int64 unless compiler has overridden */
+#define HAVE_LONG_LONG 1
+#ifndef PY_LONG_LONG
+#  define PY_LONG_LONG __int64
+#  define PY_LLONG_MAX _I64_MAX
+#  define PY_LLONG_MIN _I64_MIN
+#  define PY_ULLONG_MAX _UI64_MAX
+#endif
+
+/* For Windows the Python core is in a DLL by default.  Test
+Py_NO_ENABLE_SHARED to find out.  Also support MS_NO_COREDLL for b/w compat */
+#if !defined(MS_NO_COREDLL) && !defined(Py_NO_ENABLE_SHARED)
+#  define Py_ENABLE_SHARED 1 /* standard symbol for shared library */
+#  define MS_COREDLL  /* deprecated old symbol */
+#endif /* !MS_NO_COREDLL && ... */
+
+/*  All windows compilers that use this header support __declspec */
+#define HAVE_DECLSPEC_DLL
+
+/* For an MSVC DLL, we can nominate the .lib files used by extensions */
+#ifdef MS_COREDLL
+#  ifndef Py_BUILD_CORE /* not building the core - must be an ext */
+#    if defined(_MSC_VER)
+      /* So MSVC users need not specify the .lib file in
+      their Makefile (other compilers are generally
+      taken care of by distutils.) */
+#      ifdef _DEBUG
+#        pragma comment(lib,"python27_d.lib")
+#      else
+#        pragma comment(lib,"python27.lib")
+#      endif /* _DEBUG */
+#    endif /* _MSC_VER */
+#  endif /* Py_BUILD_CORE */
+#endif /* MS_COREDLL */
+
+#if defined(MS_WIN64)
+/* maintain "win32" sys.platform for backward compatibility of Python code,
+   the Win64 API should be close enough to the Win32 API to make this
+   preferable */
+#  define SIZEOF_VOID_P 8
+#  define SIZEOF_TIME_T 8
+#  define SIZEOF_OFF_T 4
+#  define SIZEOF_FPOS_T 8
+#  define SIZEOF_HKEY 8
+#  define SIZEOF_SIZE_T 8
+/* configure.ac defines HAVE_LARGEFILE_SUPPORT iff HAVE_LONG_LONG,
+   sizeof(off_t) > sizeof(long), and sizeof(PY_LONG_LONG) >= sizeof(off_t).
+   On Win64 the second condition is not true, but if fpos_t replaces off_t
+   then this is true. The uses of HAVE_LARGEFILE_SUPPORT imply that Win64
+   should define this. */
+#  define HAVE_LARGEFILE_SUPPORT
+#elif defined(MS_WIN32)
+#  define HAVE_LARGEFILE_SUPPORT
+#  define SIZEOF_VOID_P 4
+#  define SIZEOF_OFF_T 4
+#  define SIZEOF_FPOS_T 8
+#  define SIZEOF_HKEY 4
+#  define SIZEOF_SIZE_T 4
+#  define SIZEOF_TIME_T 8
+#endif
+
+#ifdef _DEBUG
+#  define Py_DEBUG
+#endif
+
+
+#ifdef MS_WIN32
+
+#define SIZEOF_SHORT 2
+#define SIZEOF_INT 4
+#define SIZEOF_LONG 4
+#define SIZEOF_LONG_LONG 8
+#define SIZEOF_DOUBLE 8
+#define SIZEOF_FLOAT 4
+
+#define HAVE_UINTPTR_T 1
+#define HAVE_INTPTR_T 1
+
+#endif /* MS_WIN32 */
+
+/* define signed and unsigned exact-width 32-bit and 64-bit types, used in the
+   implementation of Python long integers. */
+#ifndef PY_UINT32_T
+#if SIZEOF_INT == 4
+#define HAVE_UINT32_T 1
+#define PY_UINT32_T unsigned int
+#elif SIZEOF_LONG == 4
+#define HAVE_UINT32_T 1
+#define PY_UINT32_T unsigned long
+#endif
+#endif
+
+#ifndef PY_UINT64_T
+#if SIZEOF_LONG_LONG == 8
+#define HAVE_UINT64_T 1
+#define PY_UINT64_T unsigned PY_LONG_LONG
+#endif
+#endif
+
+#ifndef PY_INT32_T
+#if SIZEOF_INT == 4
+#define HAVE_INT32_T 1
+#define PY_INT32_T int
+#elif SIZEOF_LONG == 4
+#define HAVE_INT32_T 1
+#define PY_INT32_T long
+#endif
+#endif
+
+#ifndef PY_INT64_T
+#if SIZEOF_LONG_LONG == 8
+#define HAVE_INT64_T 1
+#define PY_INT64_T PY_LONG_LONG
+#endif
+#endif
+
+/* Fairly standard from here! */
+
+/* Define to 1 if you have the `copysign' function. */
+#define HAVE_COPYSIGN 1
+
+/* Define to 1 if you have the `round' function. */
+#define HAVE_ROUND 1
+
+/* Define to 1 if you have the `isinf' macro. */
+#define HAVE_DECL_ISINF 1
+
+/* Define to 1 if you have the `isnan' function. */
+#define HAVE_DECL_ISNAN 1
+
+/* Define if on AIX 3.
+   System headers sometimes define this.
+   We just want to avoid a redefinition error message.  */
+#ifndef _ALL_SOURCE
+/* #undef _ALL_SOURCE */
+#endif
+
+/* Define to empty if the keyword does not work.  */
+/* #define const  */
+
+/* Define to 1 if you have the <conio.h> header file. */
+#define HAVE_CONIO_H 1
+
+/* Define to 1 if you have the <direct.h> header file. */
+#define HAVE_DIRECT_H 1
+
+/* Define if you have dirent.h.  */
+#define HAVE_DIRENT_H 1
+
+/* Define to the type of elements in the array set by `getgroups'.
+   Usually this is either `int' or `gid_t'.  */
+/* #undef GETGROUPS_T */
+
+/* Define to `int' if <sys/types.h> doesn't define.  */
+/* #undef gid_t */
+
+/* Define if your struct tm has tm_zone.  */
+/* #undef HAVE_TM_ZONE */
+
+/* Define if you don't have tm_zone but do have the external array
+   tzname.  */
+#define HAVE_TZNAME
+
+/* Define to `int' if <sys/types.h> doesn't define.  */
+/* #undef mode_t */
+
+/* Define if you don't have dirent.h, but have ndir.h.  */
+/* #undef NDIR */
+
+/* Define to `long' if <sys/types.h> doesn't define.  */
+/* #undef off_t */
+
+/* Define to `int' if <sys/types.h> doesn't define.  */
+/* #undef pid_t */
+
+/* Define if the system does not provide POSIX.1 features except
+   with this defined.  */
+/* #undef _POSIX_1_SOURCE */
+
+/* Define if you need to in order for stat and other things to work.  */
+/* #undef _POSIX_SOURCE */
+
+/* Define as the return type of signal handlers (int or void).  */
+#define RETSIGTYPE void
+
+/* Define to `unsigned' if <sys/types.h> doesn't define.  */
+/* #undef size_t */
+
+/* Define if you have the ANSI C header files.  */
+#define STDC_HEADERS 1
+
+/* Define if you don't have dirent.h, but have sys/dir.h.  */
+/* #undef SYSDIR */
+
+/* Define if you don't have dirent.h, but have sys/ndir.h.  */
+/* #undef SYSNDIR */
+
+/* Define if you can safely include both <sys/time.h> and <time.h>.  */
+/* #undef TIME_WITH_SYS_TIME */
+
+/* Define if your <sys/time.h> declares struct tm.  */
+/* #define TM_IN_SYS_TIME 1 */
+
+/* Define to `int' if <sys/types.h> doesn't define.  */
+/* #undef uid_t */
+
+/* Define if the closedir function returns void instead of int.  */
+/* #undef VOID_CLOSEDIR */
+
+/* Define if getpgrp() must be called as getpgrp(0)
+   and (consequently) setpgrp() as setpgrp(0, 0). */
+/* #undef GETPGRP_HAVE_ARGS */
+
+/* Define this if your time.h defines altzone */
+/* #define HAVE_ALTZONE */
+
+/* Define if you have the putenv function.  */
+#define HAVE_PUTENV
+
+/* Define if your compiler supports function prototypes */
+#define HAVE_PROTOTYPES
+
+/* Define if  you can safely include both <sys/select.h> and <sys/time.h>
+   (which you can't on SCO ODT 3.0). */
+/* #undef SYS_SELECT_WITH_SYS_TIME */
+
+/* Define if you want documentation strings in extension modules */
+#define WITH_DOC_STRINGS 1
+
+/* Define if you want to compile in rudimentary thread support */
+/* #undef WITH_THREAD */
+
+/* Define if you want to use the GNU readline library */
+/* #define WITH_READLINE 1 */
+
+/* Define if you want to have a Unicode type. */
+#define Py_USING_UNICODE
+
+/* Define as the size of the unicode type. */
+/* This is enough for unicodeobject.h to do the "right thing" on Windows. */
+#define Py_UNICODE_SIZE 2
+
+/* Use Python's own small-block memory-allocator. */
+#define WITH_PYMALLOC 1
+
+/* Define if you have clock.  */
+/* #define HAVE_CLOCK */
+
+/* Define when any dynamic module loading is enabled */
+#define HAVE_DYNAMIC_LOADING
+
+/* Define if you have ftime.  */
+#define HAVE_FTIME
+
+/* Define if you have getpeername.  */
+#define HAVE_GETPEERNAME
+
+/* Define if you have getpgrp.  */
+/* #undef HAVE_GETPGRP */
+
+/* Define if you have getpid.  */
+#define HAVE_GETPID
+
+/* Define if you have gettimeofday.  */
+/* #undef HAVE_GETTIMEOFDAY */
+
+/* Define if you have getwd.  */
+/* #undef HAVE_GETWD */
+
+/* Define if you have lstat.  */
+/* #undef HAVE_LSTAT */
+
+/* Define if you have the mktime function.  */
+#define HAVE_MKTIME
+
+/* Define if you have nice.  */
+/* #undef HAVE_NICE */
+
+/* Define if you have readlink.  */
+/* #undef HAVE_READLINK */
+
+/* Define if you have select.  */
+/* #undef HAVE_SELECT */
+
+/* Define if you have setpgid.  */
+/* #undef HAVE_SETPGID */
+
+/* Define if you have setpgrp.  */
+/* #undef HAVE_SETPGRP */
+
+/* Define if you have setsid.  */
+/* #undef HAVE_SETSID */
+
+/* Define if you have setvbuf.  */
+#define HAVE_SETVBUF
+
+/* Define if you have siginterrupt.  */
+/* #undef HAVE_SIGINTERRUPT */
+
+/* Define if you have symlink.  */
+/* #undef HAVE_SYMLINK */
+
+/* Define if you have tcgetpgrp.  */
+/* #undef HAVE_TCGETPGRP */
+
+/* Define if you have tcsetpgrp.  */
+/* #undef HAVE_TCSETPGRP */
+
+/* Define if you have times.  */
+/* #undef HAVE_TIMES */
+
+/* Define if you have uname.  */
+/* #undef HAVE_UNAME */
+
+/* Define if you have waitpid.  */
+/* #undef HAVE_WAITPID */
+
+/* Define to 1 if you have the `wcscoll' function. */
+#define HAVE_WCSCOLL 1
+
+/* Define if the zlib library has inflateCopy */
+#define HAVE_ZLIB_COPY 1
+
+/* Define if you have the <dlfcn.h> header file.  */
+/* #undef HAVE_DLFCN_H */
+
+/* Define to 1 if you have the <errno.h> header file. */
+#define HAVE_ERRNO_H 1
+
+/* Define if you have the <fcntl.h> header file.  */
+#define HAVE_FCNTL_H 1
+
+/* Define to 1 if you have the <process.h> header file. */
+#define HAVE_PROCESS_H 1
+
+/* Define to 1 if you have the <signal.h> header file. */
+#define HAVE_SIGNAL_H 1
+
+/* Define if you have the <stdarg.h> prototypes.  */
+#define HAVE_STDARG_PROTOTYPES
+
+/* Define if you have the <stddef.h> header file.  */
+#define HAVE_STDDEF_H 1
+
+/* Define if you have the <sys/audioio.h> header file.  */
+/* #undef HAVE_SYS_AUDIOIO_H */
+
+/* Define if you have the <sys/param.h> header file.  */
+/* #define HAVE_SYS_PARAM_H 1 */
+
+/* Define if you have the <sys/select.h> header file.  */
+/* #define HAVE_SYS_SELECT_H 1 */
+
+/* Define to 1 if you have the <sys/stat.h> header file.  */
+#define HAVE_SYS_STAT_H 1
+
+/* Define if you have the <sys/time.h> header file.  */
+/* #define HAVE_SYS_TIME_H 1 */
+
+/* Define if you have the <sys/times.h> header file.  */
+/* #define HAVE_SYS_TIMES_H 1 */
+
+/* Define to 1 if you have the <sys/types.h> header file.  */
+#define HAVE_SYS_TYPES_H 1
+
+/* Define if you have the <sys/un.h> header file.  */
+/* #define HAVE_SYS_UN_H 1 */
+
+/* Define if you have the <sys/utime.h> header file.  */
+/* #define HAVE_SYS_UTIME_H 1 */
+
+/* Define if you have the <sys/utsname.h> header file.  */
+/* #define HAVE_SYS_UTSNAME_H 1 */
+
+/* Define if you have the <thread.h> header file.  */
+/* #undef HAVE_THREAD_H */
+
+/* Define if you have the <unistd.h> header file.  */
+/* #define HAVE_UNISTD_H 1 */
+
+/* Define if you have the <utime.h> header file.  */
+/* #define HAVE_UTIME_H 1 */
+
+/* Define if the compiler provides a wchar.h header file. */
+#define HAVE_WCHAR_H 1
+
+/* Define if you have the dl library (-ldl).  */
+/* #undef HAVE_LIBDL */
+
+/* Define if you have the mpc library (-lmpc).  */
+/* #undef HAVE_LIBMPC */
+
+/* Define if you have the nsl library (-lnsl).  */
+#define HAVE_LIBNSL 1
+
+/* Define if you have the seq library (-lseq).  */
+/* #undef HAVE_LIBSEQ */
+
+/* Define if you have the socket library (-lsocket).  */
+#define HAVE_LIBSOCKET 1
+
+/* Define if you have the sun library (-lsun).  */
+/* #undef HAVE_LIBSUN */
+
+/* Define if you have the termcap library (-ltermcap).  */
+/* #undef HAVE_LIBTERMCAP */
+
+/* Define if you have the termlib library (-ltermlib).  */
+/* #undef HAVE_LIBTERMLIB */
+
+/* Define if you have the thread library (-lthread).  */
+/* #undef HAVE_LIBTHREAD */
+
+/* WinSock does not use a bitmask in select, and uses
+   socket handles greater than FD_SETSIZE */
+#define Py_SOCKET_FD_CAN_BE_GE_FD_SETSIZE
+
+/* Define if C doubles are 64-bit IEEE 754 binary format, stored with the
+   least significant byte first */
+#define DOUBLE_IS_LITTLE_ENDIAN_IEEE754 1
+
+#endif /* !Py_CONFIG_H */
--- /dev/null
+++ b/cmake/config-unix/pyconfig.h.in
@@ -0,0 +1,1593 @@
+/* pyconfig.h.  Generated from pyconfig.h.in by configure.  */
+/* pyconfig.h.in.  Generated from configure.in by autoheader.  */
+
+
+#ifndef Py_PYCONFIG_H
+#define Py_PYCONFIG_H
+
+
+/* Define if building universal (internal helper macro) */
+#cmakedefine AC_APPLE_UNIVERSAL_BUILD 1
+
+/* Define for AIX if your compiler is a genuine IBM xlC/xlC_r and you want
+   support for AIX C++ shared extension modules. */
+#cmakedefine AIX_GENUINE_CPLUSPLUS 1
+
+/* Define this if you have AtheOS threads. [Python 2.7] */
+#cmakedefine ATHEOS_THREADS 1
+
+/* Define this if you have BeOS threads. [Python 2.7] */
+#cmakedefine BEOS_THREADS 1
+
+/* Define if you have the Mach cthreads package [Python 2.7] */
+#cmakedefine C_THREADS 1
+
+/* Define if C doubles are 64-bit IEEE 754 binary format, stored in ARM
+   mixed-endian order (byte order 45670123) */
+#cmakedefine DOUBLE_IS_ARM_MIXED_ENDIAN_IEEE754 1
+
+/* Define if C doubles are 64-bit IEEE 754 binary format, stored with the most
+   significant byte first */
+#cmakedefine DOUBLE_IS_BIG_ENDIAN_IEEE754 1
+
+/* Define if C doubles are 64-bit IEEE 754 binary format, stored with the
+   least significant byte first */
+#cmakedefine DOUBLE_IS_LITTLE_ENDIAN_IEEE754 1
+
+/* Define if --enable-ipv6 is specified */
+#cmakedefine ENABLE_IPV6 1
+
+/* Define if flock needs to be linked with bsd library. */
+#cmakedefine FLOCK_NEEDS_LIBBSD
+
+/* Define if getpgrp() must be called as getpgrp(0). */
+#cmakedefine GETPGRP_HAVE_ARG 1
+
+/* Define if gettimeofday() does not have second (timezone) argument This is
+   the case on Motorola V4 (R40V4.2) */
+#cmakedefine GETTIMEOFDAY_NO_TZ 1
+
+/* Define to 1 if you have the `accept4' function. [Python 3] */
+#cmakedefine HAVE_ACCEPT4 1
+
+/* Define to 1 if you have the `acosh' function. */
+#cmakedefine HAVE_ACOSH 1
+
+/* struct addrinfo (netdb.h) */
+#cmakedefine HAVE_ADDRINFO 1
+
+/* Define to 1 if you have the `alarm' function. */
+#cmakedefine HAVE_ALARM 1
+
+/* Define if aligned memory access is required [Python 3] */
+#cmakedefine HAVE_ALIGNED_REQUIRED 1
+
+/* Define to 1 if you have the <alloca.h> header file. */
+#cmakedefine HAVE_ALLOCA_H 1
+
+/* Define this if your time.h defines altzone. */
+#cmakedefine HAVE_ALTZONE 1
+
+/* Define to 1 if you have the `asinh' function. */
+#cmakedefine HAVE_ASINH 1
+
+/* Define to 1 if you have the <asm/types.h> header file. */
+#cmakedefine HAVE_ASM_TYPES_H 1
+
+/* Define to 1 if you have the `atanh' function. */
+#cmakedefine HAVE_ATANH 1
+
+/* Define if GCC supports __attribute__((format(PyArg_ParseTuple, 2, 3))) [Python 2.7] */
+#cmakedefine HAVE_ATTRIBUTE_FORMAT_PARSETUPLE 1
+
+/* Define to 1 if you have the `bind_textdomain_codeset' function. */
+#cmakedefine HAVE_BIND_TEXTDOMAIN_CODESET 1
+
+/* Define to 1 if you have the <bluetooth/bluetooth.h> header file. */
+#cmakedefine HAVE_BLUETOOTH_BLUETOOTH_H 1
+
+/* Define to 1 if you have the <bluetooth.h> header file. */
+#cmakedefine HAVE_BLUETOOTH_H 1
+
+/* Define if mbstowcs(NULL, "text", 0) does not return the number of wide
+   chars that would be converted. [Python 3] */
+#cmakedefine HAVE_BROKEN_MBSTOWCS 1
+
+/* Define if nice() returns success/failure instead of the new priority. */
+#cmakedefine HAVE_BROKEN_NICE 1
+
+/* Define if the system reports an invalid PIPE_BUF value. */
+#cmakedefine HAVE_BROKEN_PIPE_BUF
+
+/* Define if poll() sets errno on invalid file descriptors. */
+#cmakedefine HAVE_BROKEN_POLL 1
+
+/* Define if the Posix semaphores do not work on your system */
+#cmakedefine HAVE_BROKEN_POSIX_SEMAPHORES 1
+
+/* Define if pthread_sigmask() does not work on your system. */
+#cmakedefine HAVE_BROKEN_PTHREAD_SIGMASK 1
+
+/* define to 1 if your sem_getvalue is broken. */
+#cmakedefine HAVE_BROKEN_SEM_GETVALUE 1
+
+/* Define if `unsetenv` does not return an int. */
+#cmakedefine HAVE_BROKEN_UNSETENV 1
+
+/* Has builtin atomics [Python 3] */
+#cmakedefine HAVE_BUILTIN_ATOMIC 1
+
+/* Define this if you have the type _Bool. */
+#cmakedefine HAVE_C99_BOOL 1
+
+/* Define to 1 if you have the 'chflags' function. */
+#cmakedefine HAVE_CHFLAGS 1
+
+/* Define to 1 if you have the `chown' function. */
+#cmakedefine HAVE_CHOWN 1
+
+/* Define if you have the 'chroot' function. */
+#cmakedefine HAVE_CHROOT 1
+
+/* Define to 1 if you have the `clock' function. */
+#cmakedefine HAVE_CLOCK 1
+
+/* Define to 1 if you have the `clock_getres' function. [Python 3] */
+#cmakedefine HAVE_CLOCK_GETRES 1
+
+/* Define to 1 if you have the `clock_gettime' function. [Python 3] */
+#cmakedefine HAVE_CLOCK_GETTIME 1
+
+/* Define if the C compiler supports computed gotos. */
+#cmakedefine HAVE_COMPUTED_GOTOS 1
+
+/* Define to 1 if you have the `confstr' function. */
+#cmakedefine HAVE_CONFSTR 1
+
+/* Define to 1 if you have the <conio.h> header file. */
+#cmakedefine HAVE_CONIO_H 1
+
+/* Define to 1 if you have the `copysign' function. */
+#cmakedefine HAVE_COPYSIGN 1
+
+/* Define to 1 if you have the `ctermid' function. */
+#cmakedefine HAVE_CTERMID 1
+
+/* Define if you have the 'ctermid_r' function. */
+#cmakedefine HAVE_CTERMID_R 1
+
+/* Define to 1 if you have the <curses.h> header file. */
+#cmakedefine HAVE_CURSES_H 1
+
+/* Define if you have the 'is_term_resized' function. */
+#cmakedefine HAVE_CURSES_IS_TERM_RESIZED 1
+
+/* Define if you have the 'resizeterm' function. */
+#cmakedefine HAVE_CURSES_RESIZETERM 1
+
+/* Define if you have the 'resize_term' function. */
+#cmakedefine HAVE_CURSES_RESIZE_TERM 1
+
+/* Define to 1 if you have the declaration of `isfinite', and to 0 if you
+   don't. */
+#cmakedefine HAVE_DECL_ISFINITE 1
+
+/* Define to 1 if you have the declaration of `isinf', and to 0 if you don't.
+   */
+#cmakedefine HAVE_DECL_ISINF 1
+
+/* Define to 1 if you have the declaration of `isnan', and to 0 if you don't.
+   */
+#cmakedefine HAVE_DECL_ISNAN 1
+
+/* Define to 1 if you have the declaration of `tzname', and to 0 if you don't.
+   */
+#cmakedefine HAVE_DECL_TZNAME 1
+
+/* Define to 1 if you have the device macros. */
+#cmakedefine HAVE_DEVICE_MACROS 1
+
+/* Define to 1 if you have the /dev/ptc device file. */
+#cmakedefine HAVE_DEV_PTC 1
+
+/* Define to 1 if you have the /dev/ptmx device file. */
+#cmakedefine HAVE_DEV_PTMX 1
+
+/* Define to 1 if you have the <direct.h> header file. */
+#cmakedefine HAVE_DIRECT_H 1
+
+/* Define to 1 if the dirent structure has a d_type field [Python 3] */
+#cmakedefine HAVE_DIRENT_D_TYPE 1
+
+/* Define to 1 if you have the <dirent.h> header file, and it defines `DIR'.
+   */
+#cmakedefine HAVE_DIRENT_H 1
+
+/* Define if you have the 'dirfd' function or macro. [Python 3] */
+#cmakedefine HAVE_DIRFD 1
+
+/* Define to 1 if you have the <dlfcn.h> header file. */
+#cmakedefine HAVE_DLFCN_H 1
+
+/* Define to 1 if you have the `dlopen' function. */
+#cmakedefine HAVE_DLOPEN 1
+
+/* Define to 1 if you have the `dup2' function. */
+#cmakedefine HAVE_DUP2 1
+
+/* Define to 1 if you have the `dup3' function. [Python 3] */
+#cmakedefine HAVE_DUP3 1
+
+/* Defined when any dynamic module loading is enabled. */
+#cmakedefine HAVE_DYNAMIC_LOADING 1
+
+/* Define to 1 if you have the <endian.h> header file. [Python 3] */
+#cmakedefine HAVE_ENDIAN_H 1
+
+/* Define if you have the 'epoll' functions. */
+#cmakedefine HAVE_EPOLL 1
+
+/* Define if you have the 'epoll_create1' function. [Python 3] */
+#cmakedefine HAVE_EPOLL_CREATE1 1
+
+/* Define to 1 if you have the `erf' function. */
+#cmakedefine HAVE_ERF 1
+
+/* Define to 1 if you have the `erfc' function. */
+#cmakedefine HAVE_ERFC 1
+
+/* Define to 1 if you have the <errno.h> header file. */
+#cmakedefine HAVE_ERRNO_H 1
+
+/* Define to 1 if you have the `execv' function. */
+#cmakedefine HAVE_EXECV 1
+
+/* Define to 1 if you have the `expm1' function. */
+#cmakedefine HAVE_EXPM1 1
+
+/* Define to 1 if you have the `faccessat' function. [Python 3] */
+#cmakedefine HAVE_FACCESSAT 1
+
+/* Define if you have the 'fchdir' function. */
+#cmakedefine HAVE_FCHDIR 1
+
+/* Define to 1 if you have the `fchmod' function. */
+#cmakedefine HAVE_FCHMOD 1
+
+/* Define to 1 if you have the `fchmodat' function. [Python 3] */
+#cmakedefine HAVE_FCHMODAT 1
+
+/* Define to 1 if you have the `fchown' function. */
+#cmakedefine HAVE_FCHOWN 1
+
+/* Define to 1 if you have the `fchownat' function. [Python 3] */
+#cmakedefine HAVE_FCHOWNAT 1
+
+/* Define to 1 if you have the <fcntl.h> header file. */
+#cmakedefine HAVE_FCNTL_H 1
+
+/* Define if you have the 'fdatasync' function. */
+#cmakedefine HAVE_FDATASYNC 1
+
+/* Define to 1 if you have the `fdopendir' function. [Python 3] */
+#cmakedefine HAVE_FDOPENDIR 1
+
+/* Define to 1 if you have the `fexecve' function. [Python 3] */
+#cmakedefine HAVE_FEXECVE 1
+
+/* Define to 1 if you have the `finite' function. */
+#cmakedefine HAVE_FINITE 1
+
+/* Define to 1 if you have the `flock' function. */
+#cmakedefine HAVE_FLOCK 1
+
+/* Define to 1 if you have the `fork' function. */
+#cmakedefine HAVE_FORK 1
+
+/* Define to 1 if you have the `forkpty' function. */
+#cmakedefine HAVE_FORKPTY 1
+
+/* Define to 1 if you have the `fpathconf' function. */
+#cmakedefine HAVE_FPATHCONF 1
+
+/* Define to 1 if you have the `fseek64' function. */
+#cmakedefine HAVE_FSEEK64 1
+
+/* Define to 1 if you have the `fseeko' function. */
+#cmakedefine HAVE_FSEEKO 1
+
+/* Define to 1 if you have the `fstatat' function. [Python 3] */
+#cmakedefine HAVE_FSTATAT 1
+
+/* Define to 1 if you have the `fstatvfs' function. */
+#cmakedefine HAVE_FSTATVFS 1
+
+/* Define if you have the 'fsync' function. */
+#cmakedefine HAVE_FSYNC 1
+
+/* Define to 1 if you have the `ftell64' function. */
+#cmakedefine HAVE_FTELL64 1
+
+/* Define to 1 if you have the `ftello' function. */
+#cmakedefine HAVE_FTELLO 1
+
+/* Define to 1 if you have the `ftime' function. */
+#cmakedefine HAVE_FTIME 1
+
+/* Define to 1 if you have the `ftruncate' function. */
+#cmakedefine HAVE_FTRUNCATE 1
+
+/* Define to 1 if you have the `futimens' function. [Python 3] */
+#cmakedefine HAVE_FUTIMENS 1
+
+/* Define to 1 if you have the `futimes' function. [Python 3] */
+#cmakedefine HAVE_FUTIMES 1
+
+/* Define to 1 if you have the `futimesat' function. [Python 3] */
+#cmakedefine HAVE_FUTIMESAT 1
+
+/* Define to 1 if you have the `gai_strerror' function. */
+#cmakedefine HAVE_GAI_STRERROR 1
+
+/* Define to 1 if you have the `gamma' function. */
+#cmakedefine HAVE_GAMMA 1
+
+/* Define if we can use gcc inline assembler to get and set mc68881 fpcr [Python 3] */
+#cmakedefine HAVE_GCC_ASM_FOR_MC68881 1
+
+/* Define if we can use x64 gcc inline assembler [Python 3] */
+#cmakedefine HAVE_GCC_ASM_FOR_X64 1
+
+/* Define if we can use gcc inline assembler to get and set x87 control word
+   */
+#cmakedefine HAVE_GCC_ASM_FOR_X87 1
+
+/* Define if your compiler provides __uint128_t [Python 3] */
+#cmakedefine HAVE_GCC_UINT128_T 1
+
+/* Define if you have the getaddrinfo function. */
+#cmakedefine HAVE_GETADDRINFO 1
+
+/* Define to 1 if you have the `getcwd' function. [Python 2.7] */
+#cmakedefine HAVE_GETCWD 1
+
+/* Define this if you have flockfile(), getc_unlocked(), and funlockfile() */
+#cmakedefine HAVE_GETC_UNLOCKED 1
+
+/* Define to 1 if you have the `getentropy' function. [Python 3] */
+#cmakedefine HAVE_GETENTROPY 1
+
+/* Define to 1 if you have the `getgrouplist' function. [Python 3] */
+#cmakedefine HAVE_GETGROUPLIST 1
+
+/* Define to 1 if you have the `getgroups' function. */
+#cmakedefine HAVE_GETGROUPS 1
+
+/* Define to 1 if you have the `gethostbyname' function. */
+#cmakedefine HAVE_GETHOSTBYNAME 1
+
+/* Define this if you have some version of gethostbyname_r() */
+#cmakedefine HAVE_GETHOSTBYNAME_R 1
+
+/* Define this if you have the 3-arg version of gethostbyname_r(). */
+#cmakedefine HAVE_GETHOSTBYNAME_R_3_ARG 1
+
+/* Define this if you have the 5-arg version of gethostbyname_r(). */
+#cmakedefine HAVE_GETHOSTBYNAME_R_5_ARG 1
+
+/* Define this if you have the 6-arg version of gethostbyname_r(). */
+#cmakedefine HAVE_GETHOSTBYNAME_R_6_ARG 1
+
+/* Define to 1 if you have the `getitimer' function. */
+#cmakedefine HAVE_GETITIMER 1
+
+/* Define to 1 if you have the `getloadavg' function. */
+#cmakedefine HAVE_GETLOADAVG 1
+
+/* Define to 1 if you have the `getlogin' function. */
+#cmakedefine HAVE_GETLOGIN 1
+
+/* Define to 1 if you have the `getnameinfo' function. */
+#cmakedefine HAVE_GETNAMEINFO 1
+
+/* Define if you have the 'getpagesize' function. */
+#cmakedefine HAVE_GETPAGESIZE 1
+
+/* Define to 1 if you have the `getpeername' function. */
+#cmakedefine HAVE_GETPEERNAME 1
+
+/* Define to 1 if you have the `getpgid' function. */
+#cmakedefine HAVE_GETPGID 1
+
+/* Define to 1 if you have the `getpgrp' function. */
+#cmakedefine HAVE_GETPGRP 1
+
+/* Define to 1 if you have the `getpid' function. */
+#cmakedefine HAVE_GETPID 1
+
+/* Define to 1 if you have the `getpriority' function. */
+#cmakedefine HAVE_GETPRIORITY 1
+
+/* Define to 1 if you have the `getpwent' function. */
+#cmakedefine HAVE_GETPWENT 1
+
+/* Define to 1 if the getrandom() function is available [Python 3] */
+#cmakedefine HAVE_GETRANDOM 1
+
+/* Define to 1 if the Linux getrandom() syscall is available [Python 3] */
+#cmakedefine HAVE_GETRANDOM_SYSCALL 1
+
+/* Define to 1 if you have the `getresgid' function. */
+#cmakedefine HAVE_GETRESGID 1
+
+/* Define to 1 if you have the `getresuid' function. */
+#cmakedefine HAVE_GETRESUID 1
+
+/* Define to 1 if you have the `getsid' function. */
+#cmakedefine HAVE_GETSID 1
+
+/* Define to 1 if you have the `getspent' function. */
+#cmakedefine HAVE_GETSPENT 1
+
+/* Define to 1 if you have the `getspnam' function. */
+#cmakedefine HAVE_GETSPNAM 1
+
+/* Define to 1 if you have the `gettimeofday' function. */
+#cmakedefine HAVE_GETTIMEOFDAY 1
+
+/* Define to 1 if you have the `getwd' function. */
+#cmakedefine HAVE_GETWD 1
+
+/* Define if glibc has incorrect _FORTIFY_SOURCE wrappers for memmove and
+   bcopy. [Python 3] */
+/* #undef HAVE_GLIBC_MEMMOVE_BUG */
+
+/* Define to 1 if you have the <grp.h> header file. */
+#cmakedefine HAVE_GRP_H 1
+
+/* Define if you have the 'hstrerror' function. */
+#cmakedefine HAVE_HSTRERROR 1
+
+/* Define this if you have le64toh() [Python 3] */
+#cmakedefine HAVE_HTOLE64 1
+
+/* Define to 1 if you have the `hypot' function. */
+#cmakedefine HAVE_HYPOT 1
+
+/* Define to 1 if you have the <ieeefp.h> header file. */
+#cmakedefine HAVE_IEEEFP_H
+
+/* Define to 1 if you have the `if_nameindex' function. [Python 3] */
+#cmakedefine HAVE_IF_NAMEINDEX 1
+
+/* Define if you have the 'inet_aton' function. */
+#cmakedefine HAVE_INET_ATON 1
+
+/* Define if you have the 'inet_pton' function. */
+#cmakedefine HAVE_INET_PTON 1
+
+/* Define to 1 if you have the `initgroups' function. */
+#cmakedefine HAVE_INITGROUPS 1
+
+/* Define if your compiler provides int32_t. */
+#cmakedefine HAVE_INT32_T 1
+
+/* Define if your compiler provides int64_t. */
+#cmakedefine HAVE_INT64_T 1
+
+/* Define to 1 if you have the <inttypes.h> header file. */
+#cmakedefine HAVE_INTTYPES_H 1
+
+/* Define to 1 if you have the <io.h> header file. */
+#cmakedefine HAVE_IO_H 1
+
+/* Define if gcc has the ipa-pure-const bug. [Python 3] */
+#cmakedefine HAVE_IPA_PURE_CONST_BUG 1
+
+/* Define to 1 if you have the `kill' function. */
+#cmakedefine HAVE_KILL 1
+
+/* Define to 1 if you have the `killpg' function. */
+#cmakedefine HAVE_KILLPG 1
+
+/* Define if you have the 'kqueue' functions. */
+#cmakedefine HAVE_KQUEUE 1
+
+/* Define to 1 if you have the <langinfo.h> header file. */
+#cmakedefine HAVE_LANGINFO_H 1
+
+/* Defined to enable large file support when an off_t is bigger than a long
+   and long long is available and at least as big as an off_t. You may need to
+   add some flags for configuration and compilation to enable this mode. (For
+   Solaris and Linux, the necessary defines are already defined.) */
+#cmakedefine HAVE_LARGEFILE_SUPPORT 1
+
+/* Define to 1 if you have the 'lchflags' function. */
+#cmakedefine HAVE_LCHFLAGS 1
+
+/* Define to 1 if you have the `lchmod' function. */
+#cmakedefine HAVE_LCHMOD 1
+
+/* Define to 1 if you have the `lchown' function. */
+#cmakedefine HAVE_LCHOWN 1
+
+/* Define to 1 if you have the `lgamma' function. */
+#cmakedefine HAVE_LGAMMA 1
+
+/* Define to 1 if you have the `dl' library (-ldl). */
+#cmakedefine HAVE_LIBDL 1
+
+/* Define to 1 if you have the `dld' library (-ldld). */
+#cmakedefine HAVE_LIBDLD 1
+
+/* Define to 1 if you have the `ieee' library (-lieee). */
+#cmakedefine HAVE_LIBIEEE 1
+
+/* Define to 1 if you have the <libintl.h> header file. */
+#cmakedefine HAVE_LIBINTL_H 1
+
+/* Define if you have the readline library (-lreadline). */
+#cmakedefine HAVE_LIBREADLINE 1
+
+/* Define to 1 if you have the `resolv' library (-lresolv). */
+#cmakedefine HAVE_LIBRESOLV 1
+
+/* Define to 1 if you have the `sendfile' library (-lsendfile). [Python 3] */
+#cmakedefine HAVE_LIBSENDFILE 1
+
+/* Define to 1 if you have the <libutil.h> header file. */
+#cmakedefine HAVE_LIBUTIL_H 1
+
+/* Define if you have the 'link' function. */
+#cmakedefine HAVE_LINK 1
+
+/* Define to 1 if you have the `linkat' function. [Python 3] */
+#cmakedefine HAVE_LINKAT 1
+
+/* Define to 1 if you have the <linux/can/bcm.h> header file. [Python 3] */
+#cmakedefine HAVE_LINUX_CAN_BCM_H 1
+
+/* Define to 1 if you have the <linux/can.h> header file. [Python 3] */
+#cmakedefine HAVE_LINUX_CAN_H 1
+
+/* Define if compiling using Linux 3.6 or later. [Python 3] */
+#cmakedefine HAVE_LINUX_CAN_RAW_FD_FRAMES 1
+
+/* Define to 1 if you have the <linux/can/raw.h> header file. [Python 3] */
+#cmakedefine HAVE_LINUX_CAN_RAW_H 1
+
+/* Define to 1 if you have the <linux/netlink.h> header file. */
+#cmakedefine HAVE_LINUX_NETLINK_H 1
+
+/* Define to 1 if you have the <linux/tipc.h> header file. */
+#cmakedefine HAVE_LINUX_TIPC_H 1
+
+/* Define to 1 if you have the `lockf' function. [Python 3] */
+#cmakedefine HAVE_LOCKF 1
+
+/* Define to 1 if you have the `log1p' function. */
+#cmakedefine HAVE_LOG1P 1
+
+/* Define to 1 if you have the `log2' function. [Python 3] */
+#cmakedefine HAVE_LOG2 1
+
+/* Define this if you have the type long double. */
+#cmakedefine HAVE_LONG_DOUBLE 1
+
+/* Define this if you have the type long long. */
+#cmakedefine HAVE_LONG_LONG 1
+
+/* Define to 1 if you have the `lstat' function. */
+#cmakedefine HAVE_LSTAT 1
+
+/* Define to 1 if you have the `lutimes' function. [Python 3] */
+#cmakedefine HAVE_LUTIMES 1
+
+/* Define this if you have the makedev macro. */
+#cmakedefine HAVE_MAKEDEV 1
+
+/* Define to 1 if you have the `mbrtowc' function. [Python 3] */
+#cmakedefine HAVE_MBRTOWC 1
+
+/* Define to 1 if you have the `memmove' function. */
+#cmakedefine HAVE_MEMMOVE 1
+
+/* Define to 1 if you have the <memory.h> header file. */
+#cmakedefine HAVE_MEMORY_H 1
+
+/* Define to 1 if you have the `memrchr' function. [Python 3] */
+#cmakedefine HAVE_MEMRCHR 1
+
+/* Define to 1 if you have the `mkdirat' function. [Python 3] */
+#cmakedefine HAVE_MKDIRAT 1
+
+/* Define to 1 if you have the `mkfifo' function. */
+#cmakedefine HAVE_MKFIFO 1
+
+/* Define to 1 if you have the `mkfifoat' function. [Python 3] */
+#cmakedefine HAVE_MKFIFOAT 1
+
+/* Define to 1 if you have the `mknod' function. */
+#cmakedefine HAVE_MKNOD 1
+
+/* Define to 1 if you have the `mknodat' function. [Python 3] */
+#cmakedefine HAVE_MKNODAT 1
+
+/* Define to 1 if you have the `mktime' function. */
+#cmakedefine HAVE_MKTIME 1
+
+/* Define to 1 if you have the `mmap' function. */
+#cmakedefine HAVE_MMAP 1
+
+/* Define to 1 if you have the `mremap' function. */
+#cmakedefine HAVE_MREMAP 1
+
+/* Define to 1 if you have the <ncurses.h> header file. */
+#cmakedefine HAVE_NCURSES_H 1
+
+/* Define to 1 if you have the <ndir.h> header file, and it defines `DIR'. */
+#cmakedefine HAVE_NDIR_H 1
+
+/* Define to 1 if you have the <netpacket/packet.h> header file. */
+#cmakedefine HAVE_NETPACKET_PACKET_H 1
+
+/* Define to 1 if you have the <net/if.h> header file. [Python 3] */
+#cmakedefine HAVE_NET_IF_H 1
+
+/* Define to 1 if you have the `nice' function. */
+#cmakedefine HAVE_NICE 1
+
+/* Define to 1 if you have the `openat' function. [Python 3] */
+#cmakedefine HAVE_OPENAT 1
+
+/* Define to 1 if you have the `openpty' function. */
+#cmakedefine HAVE_OPENPTY 1
+
+/* Define if compiling using MacOS X 10.5 SDK or later. */
+#cmakedefine HAVE_OSX105_SDK 1
+
+/* Define to 1 if you have the `pathconf' function. */
+#cmakedefine HAVE_PATHCONF 1
+
+/* Define to 1 if you have the `pause' function. */
+#cmakedefine HAVE_PAUSE 1
+
+/* Define to 1 if you have the `pipe2' function. [Python 3] */
+#cmakedefine HAVE_PIPE2 1
+
+/* Define to 1 if you have the `plock' function. */
+#cmakedefine HAVE_PLOCK 1
+
+/* Define to 1 if you have the `poll' function. */
+#cmakedefine HAVE_POLL 1
+
+/* Define to 1 if you have the <poll.h> header file. */
+#cmakedefine HAVE_POLL_H 1
+
+/* Define to 1 if you have the `posix_fadvise' function. [Python 3] */
+#cmakedefine HAVE_POSIX_FADVISE 1
+
+/* Define to 1 if you have the `posix_fallocate' function. [Python 3] */
+#cmakedefine HAVE_POSIX_FALLOCATE 1
+
+/* Define to 1 if you have the `pread' function. [Python 3] */
+#cmakedefine HAVE_PREAD 1
+
+/* Define if you have the 'prlimit' functions. [Python 3] */
+#cmakedefine HAVE_PRLIMIT 1
+
+/* Define to 1 if you have the <process.h> header file. */
+#cmakedefine HAVE_PROCESS_H 1
+
+/* Define if your compiler supports function prototype */
+#cmakedefine HAVE_PROTOTYPES 1
+
+/* Define if you have GNU PTH threads. [Python 2.7] */
+#cmakedefine HAVE_PTH 1
+
+/* Define to 1 if you have the `pthread_atfork' function. */
+#cmakedefine HAVE_PTHREAD_ATFORK 1
+
+/* Defined for Solaris 2.6 bug in pthread header. */
+#cmakedefine HAVE_PTHREAD_DESTRUCTOR 1
+
+/* Define to 1 if you have the <pthread.h> header file. */
+#cmakedefine HAVE_PTHREAD_H 1
+
+/* Define to 1 if you have the `pthread_init' function. */
+#cmakedefine HAVE_PTHREAD_INIT 1
+
+/* Define to 1 if you have the `pthread_kill' function. [Python 3] */
+#cmakedefine HAVE_PTHREAD_KILL 1
+
+/* Define to 1 if you have the `pthread_sigmask' function. */
+#cmakedefine HAVE_PTHREAD_SIGMASK 1
+
+/* Define to 1 if you have the <pty.h> header file. */
+#cmakedefine HAVE_PTY_H 1
+
+/* Define to 1 if you have the `putenv' function. */
+#cmakedefine HAVE_PUTENV 1
+
+/* Define to 1 if you have the `pwrite' function. [Python 3] */
+#cmakedefine HAVE_PWRITE 1
+
+/* Define if the libcrypto has RAND_egd [Python 3] */
+#cmakedefine HAVE_RAND_EGD 1
+
+/* Define to 1 if you have the `readlink' function. */
+#cmakedefine HAVE_READLINK 1
+
+/* Define to 1 if you have the `readlinkat' function. [Python 3] */
+#cmakedefine HAVE_READLINKAT 1
+
+/* Define to 1 if you have the `readv' function. [Python 3] */
+#cmakedefine HAVE_READV 1
+
+/* Define to 1 if you have the `realpath' function. */
+#cmakedefine HAVE_REALPATH 1
+
+/* Define to 1 if you have the `renameat' function. [Python 3] */
+#cmakedefine HAVE_RENAMEAT 1
+
+/* Define if readline supports append_history [Python 3] */
+#cmakedefine HAVE_RL_APPEND_HISTORY 1
+
+/* Define if you have readline 2.1 */
+#cmakedefine HAVE_RL_CALLBACK 1
+
+/* Define if you can turn off readline's signal handling. */
+#cmakedefine HAVE_RL_CATCH_SIGNAL 1
+
+/* Define if you have readline 2.2 */
+#cmakedefine HAVE_RL_COMPLETION_APPEND_CHARACTER 1
+
+/* Define if you have readline 4.0 */
+#cmakedefine HAVE_RL_COMPLETION_DISPLAY_MATCHES_HOOK 1
+
+/* Define if you have readline 4.2 */
+#cmakedefine HAVE_RL_COMPLETION_MATCHES 1
+
+/* Define if you have rl_completion_suppress_append */
+#cmakedefine HAVE_RL_COMPLETION_SUPPRESS_APPEND 1
+
+/* Define if you have readline 4.0 */
+#cmakedefine HAVE_RL_PRE_INPUT_HOOK 1
+
+/* Define if you have readline 4.0 */
+#cmakedefine HAVE_RL_RESIZE_TERMINAL 1
+
+/* Define to 1 if you have the `round' function. */
+#cmakedefine HAVE_ROUND 1
+
+/* Define to 1 if you have the `sched_get_priority_max' function. [Python 3] */
+#cmakedefine HAVE_SCHED_GET_PRIORITY_MAX 1
+
+/* Define to 1 if you have the <sched.h> header file. [Python 3] */
+#cmakedefine HAVE_SCHED_H 1
+
+/* Define to 1 if you have the `sched_rr_get_interval' function. [Python 3] */
+#cmakedefine HAVE_SCHED_RR_GET_INTERVAL 1
+
+/* Define to 1 if you have the `sched_setaffinity' function. [Python 3] */
+#cmakedefine HAVE_SCHED_SETAFFINITY 1
+
+/* Define to 1 if you have the `sched_setparam' function. [Python 3] */
+#cmakedefine HAVE_SCHED_SETPARAM 1
+
+/* Define to 1 if you have the `sched_setscheduler' function. [Python 3] */
+#cmakedefine HAVE_SCHED_SETSCHEDULER 1
+
+/* Define to 1 if you have the `select' function. */
+#cmakedefine HAVE_SELECT 1
+
+/* Define to 1 if you have the `sem_getvalue' function. */
+#cmakedefine HAVE_SEM_GETVALUE 1
+
+/* Define to 1 if you have the `sem_open' function. */
+#cmakedefine HAVE_SEM_OPEN 1
+
+/* Define to 1 if you have the `sem_timedwait' function. */
+#cmakedefine HAVE_SEM_TIMEDWAIT 1
+
+/* Define to 1 if you have the `sem_unlink' function. */
+#cmakedefine HAVE_SEM_UNLINK 1
+
+/* Define to 1 if you have the `sendfile' function. [Python 3] */
+#cmakedefine HAVE_SENDFILE 1
+
+/* Define to 1 if you have the `setegid' function. */
+#cmakedefine HAVE_SETEGID 1
+
+/* Define to 1 if you have the `seteuid' function. */
+#cmakedefine HAVE_SETEUID 1
+
+/* Define to 1 if you have the `setgid' function. */
+#cmakedefine HAVE_SETGID 1
+
+/* Define if you have the 'setgroups' function. */
+#cmakedefine HAVE_SETGROUPS 1
+
+/* Define to 1 if you have the `sethostname' function. [Python 3] */
+#cmakedefine HAVE_SETHOSTNAME 1
+
+/* Define to 1 if you have the `setitimer' function. */
+#cmakedefine HAVE_SETITIMER 1
+
+/* Define to 1 if you have the `setlocale' function. */
+#cmakedefine HAVE_SETLOCALE 1
+
+/* Define to 1 if you have the `setpgid' function. */
+#cmakedefine HAVE_SETPGID 1
+
+/* Define to 1 if you have the `setpgrp' function. */
+#cmakedefine HAVE_SETPGRP 1
+
+/* Define to 1 if you have the `setpriority' function. [Python 3] */
+#cmakedefine HAVE_SETPRIORITY 1
+
+/* Define to 1 if you have the `setregid' function. */
+#cmakedefine HAVE_SETREGID 1
+
+/* Define to 1 if you have the `setresgid' function. */
+#cmakedefine HAVE_SETRESGID 1
+
+/* Define to 1 if you have the `setresuid' function. */
+#cmakedefine HAVE_SETRESUID 1
+
+/* Define to 1 if you have the `setreuid' function. */
+#cmakedefine HAVE_SETREUID 1
+
+/* Define to 1 if you have the `setsid' function. */
+#cmakedefine HAVE_SETSID 1
+
+/* Define to 1 if you have the `setuid' function. */
+#cmakedefine HAVE_SETUID 1
+
+/* Define to 1 if you have the `setvbuf' function. */
+#cmakedefine HAVE_SETVBUF 1
+
+/* Define to 1 if you have the <shadow.h> header file. */
+#cmakedefine HAVE_SHADOW_H 1
+
+/* Define to 1 if you have the `sigaction' function. */
+#cmakedefine HAVE_SIGACTION 1
+
+/* Define to 1 if you have the `sigaltstack' function. [Python 3] */
+#cmakedefine HAVE_SIGALTSTACK 1
+
+/* Define to 1 if you have the `siginterrupt' function. */
+#cmakedefine HAVE_SIGINTERRUPT 1
+
+/* Define to 1 if you have the <signal.h> header file. */
+#cmakedefine HAVE_SIGNAL_H 1
+
+/* Define to 1 if you have the `sigpending' function. [Python 3] */
+#cmakedefine HAVE_SIGPENDING 1
+
+/* Define to 1 if you have the `sigrelse' function. */
+#cmakedefine HAVE_SIGRELSE 1
+
+/* Define to 1 if you have the `sigtimedwait' function. [Python 3] */
+#cmakedefine HAVE_SIGTIMEDWAIT 1
+
+/* Define to 1 if you have the `sigwait' function. [Python 3] */
+#cmakedefine HAVE_SIGWAIT 1
+
+/* Define to 1 if you have the `sigwaitinfo' function. [Python 3] */
+#cmakedefine HAVE_SIGWAITINFO 1
+
+/* Define to 1 if you have the `snprintf' function. */
+#cmakedefine HAVE_SNPRINTF 1
+
+/* Define if sockaddr has sa_len member */
+#cmakedefine HAVE_SOCKADDR_SA_LEN 1
+
+/* struct sockaddr_storage (sys/socket.h) */
+#cmakedefine HAVE_SOCKADDR_STORAGE 1
+
+/* Define if you have the 'socketpair' function. */
+#cmakedefine HAVE_SOCKETPAIR 1
+
+/* Define to 1 if you have the <spawn.h> header file. */
+#cmakedefine HAVE_SPAWN_H 1
+
+/* Define if your compiler provides ssize_t */
+#cmakedefine HAVE_SSIZE_T 1
+
+/* Define to 1 if you have the `statvfs' function. */
+#cmakedefine HAVE_STATVFS 1
+
+/* Define if you have struct stat.st_mtim.tv_nsec */
+#cmakedefine HAVE_STAT_TV_NSEC 1
+
+/* Define if you have struct stat.st_mtimensec */
+#cmakedefine HAVE_STAT_TV_NSEC2 1
+
+/* Define if your compiler supports variable length function prototypes (e.g.
+   void fprintf(FILE *, char *, ...);) *and* <stdarg.h> */
+#cmakedefine HAVE_STDARG_PROTOTYPES 1
+
+/* Define to 1 if you have the <stdint.h> header file. */
+#cmakedefine HAVE_STDINT_H 1
+
+/* Define to 1 if you have the <stdlib.h> header file. */
+#cmakedefine HAVE_STDLIB_H 1
+
+/* Has stdatomic.h, atomic_int and _Atomic void* types work [Python 3] */
+#cmakedefine HAVE_STD_ATOMIC 1
+
+/* Define to 1 if you have the `strdup' function. */
+#cmakedefine HAVE_STRDUP 1
+
+/* Define to 1 if you have the `strftime' function. */
+#cmakedefine HAVE_STRFTIME 1
+
+/* Define to 1 if you have the <strings.h> header file. */
+#cmakedefine HAVE_STRINGS_H 1
+
+/* Define to 1 if you have the <string.h> header file. */
+#cmakedefine HAVE_STRING_H 1
+
+/* Define to 1 if you have the `strlcpy' function. [Python 3] */
+#cmakedefine HAVE_STRLCPY 1
+
+/* Define to 1 if you have the <stropts.h> header file. */
+#cmakedefine HAVE_STROPTS_H 1
+
+/* Define to 1 if `st_birthtime' is a member of `struct stat'. */
+#cmakedefine HAVE_STRUCT_STAT_ST_BIRTHTIME 1
+
+/* Define to 1 if `st_blksize' is a member of `struct stat'. */
+#cmakedefine HAVE_STRUCT_STAT_ST_BLKSIZE 1
+
+/* Define to 1 if `st_blocks' is a member of `struct stat'. */
+#cmakedefine HAVE_STRUCT_STAT_ST_BLOCKS 1
+
+/* Define to 1 if `st_flags' is a member of `struct stat'. */
+#cmakedefine HAVE_STRUCT_STAT_ST_FLAGS 1
+
+/* Define to 1 if `st_gen' is a member of `struct stat'. */
+#cmakedefine HAVE_STRUCT_STAT_ST_GEN 1
+
+/* Define to 1 if `st_rdev' is a member of `struct stat'. */
+#cmakedefine HAVE_STRUCT_STAT_ST_RDEV 1
+
+/* Define to 1 if `tm_zone' is a member of `struct tm'. */
+#cmakedefine HAVE_STRUCT_TM_TM_ZONE 1
+
+/* Define to 1 if your `struct stat' has `st_blocks'. Deprecated, use
+   `HAVE_STRUCT_STAT_ST_BLOCKS' instead. */
+#cmakedefine HAVE_ST_BLOCKS 1
+
+/* Define if you have the 'symlink' function. */
+#cmakedefine HAVE_SYMLINK 1
+
+/* Define to 1 if you have the `symlinkat' function. [Python 3] */
+#cmakedefine HAVE_SYMLINKAT 1
+
+/* Define to 1 if you have the `sync' function. [Python 3] */
+#cmakedefine HAVE_SYNC 1
+
+/* Define to 1 if you have the `sysconf' function. */
+#cmakedefine HAVE_SYSCONF 1
+
+/* Define to 1 if you have the <sysexits.h> header file. */
+#cmakedefine HAVE_SYSEXITS_H 1
+
+/* Define to 1 if you have the <sys/audioio.h> header file. */
+#cmakedefine HAVE_SYS_AUDIOIO_H 1
+
+/* Define to 1 if you have the <sys/bsdtty.h> header file. */
+#cmakedefine HAVE_SYS_BSDTTY_H 1
+
+/* Define to 1 if you have the <sys/devpoll.h> header file. [Python 3] */
+#cmakedefine HAVE_SYS_DEVPOLL_H 1
+
+/* Define to 1 if you have the <sys/dir.h> header file, and it defines `DIR'.
+   */
+#cmakedefine HAVE_SYS_DIR_H 1
+
+/* Define to 1 if you have the <sys/endian.h> header file. [Python 3] */
+#cmakedefine HAVE_SYS_ENDIAN_H 1
+
+/* Define to 1 if you have the <sys/epoll.h> header file. */
+#cmakedefine HAVE_SYS_EPOLL_H 1
+
+/* Define to 1 if you have the <sys/event.h> header file. */
+#cmakedefine HAVE_SYS_EVENT_H 1
+
+/* Define to 1 if you have the <sys/file.h> header file. */
+#cmakedefine HAVE_SYS_FILE_H 1
+
+/* Define to 1 if you have the <sys/ioctl.h> header file. [Python 3] */
+#cmakedefine HAVE_SYS_IOCTL_H 1
+
+/* Define to 1 if you have the <sys/kern_control.h> header file. [Python 3] */
+#cmakedefine HAVE_SYS_KERN_CONTROL_H 1
+
+/* Define to 1 if you have the <sys/loadavg.h> header file. */
+#cmakedefine HAVE_SYS_LOADAVG_H 1
+
+/* Define to 1 if you have the <sys/lock.h> header file. */
+#cmakedefine HAVE_SYS_LOCK_H 1
+
+/* Define to 1 if you have the <sys/mkdev.h> header file. */
+#cmakedefine HAVE_SYS_MKDEV_H 1
+
+/* Define to 1 if you have the <sys/modem.h> header file. */
+#cmakedefine HAVE_SYS_MODEM_H 1
+
+/* Define to 1 if you have the <sys/ndir.h> header file, and it defines `DIR'.
+   */
+#cmakedefine HAVE_SYS_NDIR_H 1
+
+/* Define to 1 if you have the <sys/param.h> header file. */
+#cmakedefine HAVE_SYS_PARAM_H 1
+
+/* Define to 1 if you have the <sys/poll.h> header file. */
+#cmakedefine HAVE_SYS_POLL_H 1
+
+/* Define to 1 if you have the <sys/random.h> header file. */
+#cmakedefine HAVE_SYS_RANDOM_H 1
+
+/* Define to 1 if you have the <sys/resource.h> header file. */
+#cmakedefine HAVE_SYS_RESOURCE_H 1
+
+/* Define to 1 if you have the <sys/select.h> header file. */
+#cmakedefine HAVE_SYS_SELECT_H 1
+
+/* Define to 1 if you have the <sys/sendfile.h> header file. [Python 3] */
+#cmakedefine HAVE_SYS_SENDFILE_H 1
+
+/* Define to 1 if you have the <sys/socket.h> header file. */
+#cmakedefine HAVE_SYS_SOCKET_H 1
+
+/* Define to 1 if you have the <sys/statvfs.h> header file. */
+#cmakedefine HAVE_SYS_STATVFS_H 1
+
+/* Define to 1 if you have the <sys/stat.h> header file. */
+#cmakedefine HAVE_SYS_STAT_H 1
+
+/* Define to 1 if you have the <sys/syscall.h> header file. [Python 3] */
+#cmakedefine HAVE_SYS_SYSCALL_H 1
+
+/* Define to 1 if you have the <sys/sys_domain.h> header file. [Python 3] */
+#cmakedefine HAVE_SYS_SYS_DOMAIN_H 1
+
+/* Define to 1 if you have the <sys/sysmacros.h> header file. */
+#cmakedefine HAVE_SYS_SYSMACROS_H 1
+
+/* Define to 1 if you have the <sys/termio.h> header file. */
+#cmakedefine HAVE_SYS_TERMIO_H 1
+
+/* Define to 1 if you have the <sys/times.h> header file. */
+#cmakedefine HAVE_SYS_TIMES_H 1
+
+/* Define to 1 if you have the <sys/time.h> header file. */
+#cmakedefine HAVE_SYS_TIME_H 1
+
+/* Define to 1 if you have the <sys/types.h> header file. */
+#cmakedefine HAVE_SYS_TYPES_H 1
+
+/* Define to 1 if you have the <sys/uio.h> header file. [Python 3] */
+#cmakedefine HAVE_SYS_UIO_H 1
+
+/* Define to 1 if you have the <sys/un.h> header file. */
+#cmakedefine HAVE_SYS_UN_H 1
+
+/* Define to 1 if you have the <sys/utsname.h> header file. */
+#cmakedefine HAVE_SYS_UTSNAME_H 1
+
+/* Define to 1 if you have the <sys/wait.h> header file. */
+#cmakedefine HAVE_SYS_WAIT_H 1
+
+/* Define to 1 if you have the <sys/xattr.h> header file. [Python 3] */
+#cmakedefine HAVE_SYS_XATTR_H 1
+
+/* Define to 1 if you have the `tcgetpgrp' function. */
+#cmakedefine HAVE_TCGETPGRP 1
+
+/* Define to 1 if you have the `tcsetpgrp' function. */
+#cmakedefine HAVE_TCSETPGRP 1
+
+/* Define to 1 if you have the `tempnam' function. */
+#cmakedefine HAVE_TEMPNAM 1
+
+/* Define to 1 if you have the <termios.h> header file. */
+#cmakedefine HAVE_TERMIOS_H 1
+
+/* Define to 1 if you have the <term.h> header file. */
+#cmakedefine HAVE_TERM_H 1
+
+/* Define to 1 if you have the `tgamma' function. */
+#cmakedefine HAVE_TGAMMA 1
+
+/* Define to 1 if you have the <thread.h> header file. [Python 2.7] */
+#cmakedefine HAVE_THREAD_H 1
+
+/* Define to 1 if you have the `timegm' function. */
+#cmakedefine HAVE_TIMEGM 1
+
+/* Define to 1 if you have the `times' function. */
+#cmakedefine HAVE_TIMES 1
+
+/* Define to 1 if you have the `tmpfile' function. */
+#cmakedefine HAVE_TMPFILE 1
+
+/* Define to 1 if you have the `tmpnam' function. */
+#cmakedefine HAVE_TMPNAM 1
+
+/* Define to 1 if you have the `tmpnam_r' function. */
+#cmakedefine HAVE_TMPNAM_R 1
+
+/* Define to 1 if your `struct tm' has `tm_zone'. Deprecated, use
+   `HAVE_STRUCT_TM_TM_ZONE' instead. */
+#cmakedefine HAVE_TM_ZONE 1
+
+/* Define to 1 if you have the `truncate' function. */
+#cmakedefine HAVE_TRUNCATE 1
+
+/* Define to 1 if you don't have `tm_zone' but do have the external array
+   `tzname'. */
+#cmakedefine HAVE_TZNAME 1
+
+/* Define this if you have tcl and TCL_UTF_MAX==6 */
+#cmakedefine HAVE_UCS4_TCL 1
+
+/* Define if your compiler provides uint32_t. */
+#cmakedefine HAVE_UINT32_T 1
+
+/* Define if your compiler provides uint64_t. */
+#cmakedefine HAVE_UINT64_T 1
+
+/* Define to 1 if the system has the type `uintptr_t'. */
+#cmakedefine HAVE_UINTPTR_T 1
+
+/* Define to 1 if you have the `uname' function. */
+#cmakedefine HAVE_UNAME 1
+
+/* Define to 1 if you have the <unistd.h> header file. */
+#cmakedefine HAVE_UNISTD_H 1
+
+/* Define to 1 if you have the `unlinkat' function. [Python 3] */
+#cmakedefine HAVE_UNLINKAT 1
+
+/* Define to 1 if you have the `unsetenv' function. */
+#cmakedefine HAVE_UNSETENV 1
+
+/* Define if you have a useable wchar_t type defined in wchar.h; useable means
+   wchar_t must be an unsigned type with at least 16 bits. (see
+   Include/unicodeobject.h). */
+#cmakedefine HAVE_USABLE_WCHAR_T 1
+
+/* Define to 1 if you have the <util.h> header file. */
+#cmakedefine HAVE_UTIL_H 1
+
+/* Define to 1 if you have the `utimensat' function. [Python 3] */
+#cmakedefine HAVE_UTIMENSAT 1
+
+/* Define to 1 if you have the `utimes' function. */
+#cmakedefine HAVE_UTIMES 1
+
+/* Define to 1 if you have the <utime.h> header file. */
+#cmakedefine HAVE_UTIME_H 1
+
+/* Define to 1 if you have the `wait3' function. */
+#cmakedefine HAVE_WAIT3 1
+
+/* Define to 1 if you have the `wait4' function. */
+#cmakedefine HAVE_WAIT4 1
+
+/* Define to 1 if you have the `waitid' function. [Python 3] */
+#cmakedefine HAVE_WAITID 1
+
+/* Define to 1 if you have the `waitpid' function. */
+#cmakedefine HAVE_WAITPID 1
+
+/* Define if the compiler provides a wchar.h header file. */
+#cmakedefine HAVE_WCHAR_H 1
+
+/* Define to 1 if you have the `wcscoll' function. */
+#cmakedefine HAVE_WCSCOLL 1
+
+/* Define to 1 if you have the `wcsftime' function. [Python 3] */
+#cmakedefine HAVE_WCSFTIME 1
+
+/* Define to 1 if you have the `wcsxfrm' function. [Python 3] */
+#cmakedefine HAVE_WCSXFRM 1
+
+/* Define to 1 if you have the `wmemcmp' function. [Python 3] */
+#cmakedefine HAVE_WMEMCMP 1
+
+/* Define if tzset() actually switches the local timezone in a meaningful way.
+   */
+#cmakedefine HAVE_WORKING_TZSET 1
+
+/* Define to 1 if you have the `writev' function. [Python 3] */
+#cmakedefine HAVE_WRITEV 1
+
+/* Define if the zlib library has inflateCopy */
+#cmakedefine HAVE_ZLIB_COPY 1
+
+/* Define to 1 if you have the `_getpty' function. */
+#cmakedefine HAVE__GETPTY 1
+
+/* Define if you are using Mach cthreads directly under /include [Python 2.7] */
+#cmakedefine HURD_C_THREADS 1
+
+/* Define if you are using Mach cthreads under mach / [Python 2.7] */
+#cmakedefine MACH_C_THREADS 1
+
+/* Define if log1p(-0.) is 0. rather than -0. [Python 3] */
+#cmakedefine LOG1P_DROPS_ZERO_SIGN 1
+
+/* Define to 1 if `major', `minor', and `makedev' are declared in <mkdev.h>.
+   */
+#cmakedefine MAJOR_IN_MKDEV 1
+
+/* Define to 1 if `major', `minor', and `makedev' are declared in
+   <sysmacros.h>. */
+#cmakedefine MAJOR_IN_SYSMACROS 1
+
+/* Define if mvwdelch in curses.h is an expression. */
+#cmakedefine MVWDELCH_IS_EXPRESSION 1
+
+/* Define to the address where bug reports for this package should be sent. */
+#cmakedefine PACKAGE_BUGREPORT
+
+/* Define to the full name of this package. */
+#cmakedefine PACKAGE_NAME @PACKAGE_NAME@
+
+/* Define to the full name and version of this package. */
+#cmakedefine PACKAGE_STRING @PACKAGE_STRING@
+
+/* Define to the one symbol short name of this package. */
+#cmakedefine PACKAGE_TARNAME @PACKAGE_TARNAME@
+
+/* Define to the home page for this package. */
+/* #undef PACKAGE_URL */
+
+/* Define to the version of this package. */
+#cmakedefine PACKAGE_VERSION @PACKAGE_VERSION@
+
+/* Define if POSIX semaphores aren't enabled on your system */
+#cmakedefine POSIX_SEMAPHORES_NOT_ENABLED 1
+
+/* Defined if PTHREAD_SCOPE_SYSTEM supported. */
+#cmakedefine PTHREAD_SYSTEM_SCHED_SUPPORTED 1
+
+/* Define as the preferred size in bits of long digits */
+/* #undef PYLONG_BITS_IN_DIGIT */
+
+/* Define to printf format modifier for long long type */
+#cmakedefine PY_FORMAT_LONG_LONG "@PY_FORMAT_LONG_LONG@"
+
+/* Define to printf format modifier for Py_ssize_t */
+#cmakedefine PY_FORMAT_SIZE_T "@PY_FORMAT_SIZE_T@"
+
+/* Define as the integral type used for Unicode representation. [Python 2.7] */
+#cmakedefine PY_UNICODE_TYPE @PY_UNICODE_TYPE@
+
+/* Define if you want to build an interpreter with many run-time checks. */
+#cmakedefine Py_DEBUG 1
+
+/* Defined if Python is built as a shared library. */
+#cmakedefine Py_ENABLE_SHARED
+
+/* Define as the size of the unicode type. [Python 2.7] */
+#cmakedefine Py_UNICODE_SIZE @Py_UNICODE_SIZE@
+
+/* Define if you want to have a Unicode type. [Python 2.7] */
+#cmakedefine Py_USING_UNICODE 1
+
+/* assume C89 semantics that RETSIGTYPE is always void */
+#define RETSIGTYPE void
+
+/* Define hash algorithm for str, bytes and memoryview. SipHash24: 1, FNV: 2,
+   externally defined: 0 [Python 3] */
+#cmakedefine Py_HASH_ALGORITHM 1
+
+/* Define if setpgrp() must be called as setpgrp(0, 0). */
+#cmakedefine SETPGRP_HAVE_ARG
+
+/* Define this to be extension of shared libraries (including the dot!).[Python 2.7]  */
+#define SHLIB_EXT "@CMAKE_SHARED_MODULE_SUFFIX@"
+
+/* Define if i>>j for signed int i does not extend the sign bit when i < 0 */
+#cmakedefine SIGNED_RIGHT_SHIFT_ZERO_FILLS
+
+/* The size of `double', as computed by sizeof. */
+#cmakedefine SIZEOF_DOUBLE @SIZEOF_DOUBLE@
+
+/* The size of `float', as computed by sizeof. */
+#cmakedefine SIZEOF_FLOAT @SIZEOF_FLOAT@
+
+/* The size of `fpos_t', as computed by sizeof. */
+#cmakedefine SIZEOF_FPOS_T @SIZEOF_FPOS_T@
+
+/* The size of `int', as computed by sizeof. */
+#cmakedefine SIZEOF_INT @SIZEOF_INT@
+
+/* The size of `long', as computed by sizeof. */
+#cmakedefine SIZEOF_LONG @SIZEOF_LONG@
+
+/* The size of `long double', as computed by sizeof. */
+#cmakedefine SIZEOF_LONG_DOUBLE @SIZEOF_LONG_DOUBLE@
+
+/* The size of `long long', as computed by sizeof. */
+#cmakedefine SIZEOF_LONG_LONG @SIZEOF_LONG_LONG@
+
+/* The size of `off_t', as computed by sizeof. */
+#cmakedefine SIZEOF_OFF_T @SIZEOF_OFF_T@
+
+/* The size of `pid_t', as computed by sizeof. */
+#cmakedefine SIZEOF_PID_T @SIZEOF_PID_T@
+
+/* The size of `pthread_t', as computed by sizeof. */
+#cmakedefine SIZEOF_PTHREAD_T @SIZEOF_PTHREAD_T@
+
+/* The size of `short', as computed by sizeof. */
+#cmakedefine SIZEOF_SHORT @SIZEOF_SHORT@
+
+/* The size of `size_t', as computed by sizeof. */
+#cmakedefine SIZEOF_SIZE_T @SIZEOF_SIZE_T@
+
+/* The size of `time_t', as computed by sizeof. */
+#cmakedefine SIZEOF_TIME_T @SIZEOF_TIME_T@
+
+/* The size of `uintptr_t', as computed by sizeof. */
+#cmakedefine SIZEOF_UINTPTR_T @SIZEOF_UINTPTR_T@
+
+/* The size of `void *', as computed by sizeof. */
+#cmakedefine SIZEOF_VOID_P @SIZEOF_VOID_P@
+
+/* The size of `wchar_t', as computed by sizeof. */
+#cmakedefine SIZEOF_WCHAR_T @SIZEOF_WCHAR_T@
+
+/* The size of `_Bool', as computed by sizeof. */
+#cmakedefine SIZEOF__BOOL @SIZEOF__BOOL@
+
+/* Define to 1 if you have the ANSI C header files. */
+#cmakedefine STDC_HEADERS 1
+
+/* Define if you can safely include both <sys/select.h> and <sys/time.h>
+   (which you can't on SCO ODT 3.0). */
+#cmakedefine SYS_SELECT_WITH_SYS_TIME 1
+
+/* Define if tanh(-0.) is -0., or if platform doesn't have signed zeros */
+#cmakedefine TANH_PRESERVES_ZERO_SIGN 1
+
+/* Library needed by timemodule.c: librt may be needed for clock_gettime() */
+#cmakedefine TIMEMODULE_LIB 1
+
+/* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */
+#cmakedefine TIME_WITH_SYS_TIME 1
+
+/* Define to 1 if your <sys/time.h> declares `struct tm'. */
+#cmakedefine TM_IN_SYS_TIME 1
+
+/* Define if you want to use computed gotos in ceval.c. */
+/* #undef USE_COMPUTED_GOTOS */
+
+/* Define to use the C99 inline keyword. [Python 3] */
+#cmakedefine USE_INLINE 1
+
+/* Enable extensions on AIX 3, Interix.  */
+#ifndef _ALL_SOURCE
+#cmakedefine _ALL_SOURCE 1
+#endif
+/* Enable GNU extensions on systems that have them.  */
+#ifndef _GNU_SOURCE
+#cmakedefine _GNU_SOURCE 1
+#endif
+/* Enable threading extensions on Solaris.  */
+#ifndef _POSIX_PTHREAD_SEMANTICS
+#cmakedefine _POSIX_PTHREAD_SEMANTICS 1
+#endif
+/* Enable extensions on HP NonStop.  */
+#ifndef _TANDEM_SOURCE
+#cmakedefine _TANDEM_SOURCE 1
+#endif
+/* Enable general extensions on Solaris.  */
+#ifndef __EXTENSIONS__
+#cmakedefine __EXTENSIONS__ 1
+#endif
+
+
+/* Define if you want to use MacPython modules on MacOSX in unix-Python. [Python 2.7] */
+#cmakedefine USE_TOOLBOX_OBJECT_GLUE
+
+/* Define if a va_list is an array of some kind */
+#cmakedefine VA_LIST_IS_ARRAY 1
+
+/* Define if you want SIGFPE handled (see Include/pyfpe.h). */
+#cmakedefine WANT_SIGFPE_HANDLER
+
+/* Define if you want wctype.h functions to be used instead of the one
+   supplied by Python itself. (see Include/unicodectype.h). [Python 2.7] */
+#cmakedefine WANT_WCTYPE_FUNCTIONS
+
+/* Define if WINDOW in curses.h offers a field _flags. */
+#cmakedefine WINDOW_HAS_FLAGS 1
+
+/* Define if you want documentation strings in extension modules */
+#cmakedefine WITH_DOC_STRINGS 1
+
+/* Define if you want to use the new-style (Openstep, Rhapsody, MacOS) dynamic
+   linker (dyld) instead of the old-style (NextStep) dynamic linker (rld).
+   Dyld is necessary to support frameworks. */
+#cmakedefine WITH_DYLD 1
+
+/* Define to 1 if libintl is needed for locale functions. */
+#cmakedefine WITH_LIBINTL
+
+/* Define if you want to produce an OpenStep/Rhapsody framework (shared
+   library plus accessory files). */
+#cmakedefine WITH_NEXT_FRAMEWORK 1
+
+/* Define if you want to compile in Python-specific mallocs */
+#cmakedefine WITH_PYMALLOC 1
+
+/* Define if you want to compile in rudimentary thread support */
+#cmakedefine WITH_THREAD 1
+
+/* Define to profile with the Pentium timestamp counter */
+#cmakedefine WITH_TSC 1
+
+/* Define if you want pymalloc to be disabled when running under valgrind */
+/* #undef WITH_VALGRIND */
+
+/* Define WORDS_BIGENDIAN to 1 if your processor stores words with the most
+   significant byte first (like Motorola and SPARC, unlike Intel). */
+#if defined AC_APPLE_UNIVERSAL_BUILD
+# if defined __BIG_ENDIAN__
+#  define WORDS_BIGENDIAN 1
+# endif
+#else
+# ifndef WORDS_BIGENDIAN
+#cmakedefine WORDS_BIGENDIAN
+# endif
+#endif
+
+/* Define if arithmetic is subject to x87-style double rounding issue */
+#cmakedefine X87_DOUBLE_ROUNDING
+
+/* Define on OpenBSD to activate all library features */
+#cmakedefine _BSD_SOURCE 1
+
+/* Define on Irix to enable u_int */
+#cmakedefine _BSD_TYPES 1
+
+/* Define on Darwin to activate all library features */
+#cmakedefine _DARWIN_C_SOURCE 1
+
+/* This must be set to 64 on some systems to enable large file support. */
+#cmakedefine _FILE_OFFSET_BITS @_FILE_OFFSET_BITS@
+
+/* Define on Linux to activate all library features */
+#cmakedefine _GNU_SOURCE 1
+
+/* Define to include mbstate_t for mbrtowc */
+#cmakedefine _INCLUDE__STDC_A1_SOURCE 1
+
+/* This must be defined on some systems to enable large file support. */
+#ifndef _LARGEFILE_SOURCE
+#cmakedefine _LARGEFILE_SOURCE @_LARGEFILE_SOURCE@
+#endif
+
+/* This must be defined on AIX systems to enable large file support. */
+#cmakedefine _LARGE_FILES
+
+/* Define to 1 if on MINIX. */
+#cmakedefine _MINIX
+
+/* Define on NetBSD to activate all library features */
+#cmakedefine _NETBSD_SOURCE 1
+
+/* Define _OSF_SOURCE to get the makedev macro. [Python 2.7] */
+#cmakedefine _OSF_SOURCE
+
+/* Define to 2 if the system does not provide POSIX.1 features except with
+   this defined. */
+#cmakedefine _POSIX_1_SOURCE
+
+/* Define to activate features from IEEE Stds [Python 2.7: IEEE Stds 1003.1-2001] or [Python 3.x: IEEE Stds 1003.1-2008]*/
+#cmakedefine _POSIX_C_SOURCE @_POSIX_C_SOURCE@
+
+/* Define to 1 if you need to in order for `stat' and other things to work. */
+#cmakedefine _POSIX_SOURCE
+
+/* Define if you have POSIX threads, and your system does not define that. */
+#cmakedefine _POSIX_THREADS
+
+/* Define to force use of thread-safe errno, h_errno, and other functions */
+#cmakedefine _REENTRANT 1
+
+/* Define for Solaris 2.5.1 so the uint32_t typedef from <sys/synch.h>,
+   <pthread.h>, or <semaphore.h> is not used. If the typedef were allowed, the
+   #define below would cause a syntax error. */
+/* #undef _UINT32_T */
+
+/* Define for Solaris 2.5.1 so the uint64_t typedef from <sys/synch.h>,
+   <pthread.h>, or <semaphore.h> is not used. If the typedef were allowed, the
+   #define below would cause a syntax error. */
+/* #undef _UINT64_T */
+
+/* Define to the level of X/Open that your system supports */
+#cmakedefine _XOPEN_SOURCE @_XOPEN_SOURCE@
+
+/* Define to activate Unix95-and-earlier features */
+#cmakedefine _XOPEN_SOURCE_EXTENDED 1
+
+/* Define on FreeBSD to activate all library features */
+#cmakedefine __BSD_VISIBLE 1
+
+/* Define to 1 if type `char' is unsigned and you are not using gcc.  */
+#ifndef __CHAR_UNSIGNED__
+#cmakedefine __CHAR_UNSIGNED__
+#endif
+
+/* Define to 'long' if <time.h> doesn't define. */
+#cmakedefine clock_t @clock_t@
+
+/* Define to empty if `const' does not conform to ANSI C. */
+#cmakedefine const
+
+/* Define to `int' if <sys/types.h> doesn't define. */
+#cmakedefine gid_t @gid_t@
+
+/* Define to `__inline__' or `__inline' if that's what the C compiler
+   calls it, or to nothing if 'inline' is not supported under any name.  */
+#ifndef __cplusplus
+/* #undef inline */
+#endif
+
+/* Define to the type of a signed integer type of width exactly 32 bits if
+   such a type exists and the standard includes do not define it. */
+/* #undef int32_t */
+
+/* Define to the type of a signed integer type of width exactly 64 bits if
+   such a type exists and the standard includes do not define it. */
+/* #undef int64_t */
+
+/* Define to `int' if <sys/types.h> does not define. */
+#cmakedefine mode_t @mode_t@
+
+/* Define to `long int' if <sys/types.h> does not define. */
+#cmakedefine off_t @off_t@
+
+/* Define to `int' if <sys/types.h> does not define. */
+#cmakedefine pid_t @pid_t@
+
+/* Define to empty if the keyword does not work. */
+#cmakedefine signed
+
+/* Define to `unsigned int' if <sys/types.h> does not define. */
+#cmakedefine size_t @size_t@
+
+/* Define to `int' if <sys/socket.h> does not define. */
+#cmakedefine socklen_t @socklen_t@
+
+/* Define to `int' if <sys/types.h> doesn't define. */
+#cmakedefine uid_t @uid_t@
+
+/* Define to the type of an unsigned integer type of width exactly 32 bits if
+   such a type exists and the standard includes do not define it. */
+/* #undef uint32_t */
+
+/* Define to the type of an unsigned integer type of width exactly 64 bits if
+   such a type exists and the standard includes do not define it. */
+/* #undef uint64_t */
+
+/* Define to empty if the keyword does not work. */
+#cmakedefine volatile
+
+
+/* Define the macros needed if on a UnixWare 7.x system. */
+#if defined(__USLC__) && defined(__SCO_VERSION__)
+#define STRICT_SYSV_CURSES /* Don't use ncurses extensions */
+#endif
+
+#endif /*Py_PYCONFIG_H*/
+
--- /dev/null
+++ b/cmake/config_2.c.in
@@ -0,0 +1,56 @@
+#include "Python.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+// Init functions common to all platforms
+extern void init_ast(void);
+extern void init_codecs(void);
+extern void initerrno(void);
+extern void initgc(void);
+extern void initimp(void);
+extern void initsignal(void);
+extern void init_sre(void);
+extern void init_symtable(void);
+extern void init_weakref(void);
+extern void initxxsubtype(void);
+extern void initzipimport(void);
+extern void PyMarshal_Init(void);
+extern void _PyWarnings_Init(void);
+
+// Init functions for platform-specific extensions
+@config_inits@
+
+
+struct _inittab _PyImport_Inittab[] = {
+    // Entries common to all platforms
+    {"_ast", init_ast},
+    {"__builtin__", NULL},
+    {"_codecs", init_codecs},
+    {"errno", initerrno},
+    {"exceptions", NULL},
+    {"gc", initgc},
+    {"imp", initimp},
+    {"__main__", NULL},
+    {"marshal", PyMarshal_Init},
+    {"signal", initsignal},
+    {"_sre", init_sre},
+    {"_symtable", init_symtable},
+    {"sys", NULL},
+    {"_warnings", _PyWarnings_Init},
+    {"_weakref", init_weakref},
+    {"xxsubtype", initxxsubtype},
+    {"zipimport", initzipimport},
+
+    // Entries for platform-specific extensions
+@config_entries@
+
+    // Sentinel
+    {0, 0}
+};
+
+
+#ifdef __cplusplus
+}
+#endif
--- /dev/null
+++ b/cmake/config_3.c.in
@@ -0,0 +1,72 @@
+#include "Python.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+
+@config_inits@
+
+/* -- ADDMODULE MARKER 1 -- */
+
+extern PyObject* PyMarshal_Init(void);
+extern PyObject* PyInit_imp(void);
+extern PyObject* PyInit_gc(void);
+extern PyObject* PyInit__ast(void);
+extern PyObject* _PyWarnings_Init(void);
+extern PyObject* PyInit__string(void);
+
+extern PyObject* PyInit_errno(void);
+extern PyObject* PyInit__codecs(void);
+extern PyObject* PyInit__signal(void);
+extern PyObject* PyInit__sre(void);
+extern PyObject* PyInit__symtable(void);
+extern PyObject* PyInit__weakref(void);
+extern PyObject* PyInit_xxsubtype(void);
+extern PyObject* PyInit_zipimport(void);
+
+struct _inittab _PyImport_Inittab[] = {
+
+@config_entries@
+
+/* -- ADDMODULE MARKER 2 -- */
+
+    /* This module lives in marshal.c */
+    {"marshal", PyMarshal_Init},
+
+    /* This lives in import.c */
+    {"_imp", PyInit_imp},
+
+    /* This lives in Python/Python-ast.c */
+    {"_ast", PyInit__ast},
+
+    /* These entries are here for sys.builtin_module_names */
+    {"builtins", NULL},
+    {"sys", NULL},
+
+    /* This lives in gcmodule.c */
+    {"gc", PyInit_gc},
+
+    /* This lives in _warnings.c */
+    {"_warnings", _PyWarnings_Init},
+
+    /* This lives in Objects/unicodeobject.c */
+    {"_string", PyInit__string},
+
+    {"errno", PyInit_errno},
+    {"_codecs", PyInit__codecs},
+    {"_signal", PyInit__signal},
+    {"_sre", PyInit__sre},
+    {"_symtable", PyInit__symtable},
+    {"_weakref", PyInit__weakref},
+    {"xxsubtype", PyInit_xxsubtype},
+    {"zipimport", PyInit_zipimport},
+
+    /* Sentinel */
+    {0, 0}
+};
+
+
+#ifdef __cplusplus
+}
+#endif
--- /dev/null
+++ b/cmake/extensions/CMakeLists.txt
@@ -0,0 +1,705 @@
+# XXX Because of CMake issue #8170 disable ctypes support when using
+#     "Visual Studio 2008 Win64" generator.
+if("${MSVC_VERSION}" VERSION_EQUAL 1500 AND ${CMAKE_SIZEOF_VOID_P} EQUAL 8)
+    set(warn "Disable 'ctypes' and 'ctypes_test' extensions when using 'Visual Studio 2008 Win64' generator. See http://public.kitware.com/Bug/view.php?id=8170 for more details.")
+    if(NOT DEFINED ENABLE_CTYPES OR ENABLE_CTYPES OR NOT DEFINED ENABLE_CTYPES_TEST OR ENABLE_CTYPES_TEST)
+        message(WARNING ${warn})
+    endif()
+    set(ENABLE_CTYPES OFF CACHE BOOL "${warn}" FORCE)
+    set(ENABLE_CTYPES_TEST OFF CACHE BOOL "${warn}" FORCE)
+endif()
+# XXX Because of CMake issue #11536, disable ctypes support when using
+#     CMake < 2.8.12 with "Visual Studio 2010" and "Visual Studio 2010 Win64"
+#     generator.
+if(CMAKE_VERSION VERSION_LESS 2.8.12)
+    if("${MSVC_VERSION}" VERSION_EQUAL 1600)
+        set(warn "Disable 'ctypes' and 'ctypes_test' extensions when using CMake < 2.8.12 with any 'Visual Studio 2010' generators. See http://public.kitware.com/Bug/view.php?id=11536 for more details.")
+        if(NOT DEFINED ENABLE_CTYPES OR ENABLE_CTYPES OR NOT DEFINED ENABLE_CTYPES_TEST OR ENABLE_CTYPES_TEST)
+            message(WARNING ${warn})
+        endif()
+        set(ENABLE_CTYPES OFF CACHE BOOL "${warn}" FORCE)
+        set(ENABLE_CTYPES_TEST OFF CACHE BOOL "${warn}" FORCE)
+    endif()
+endif()
+
+set(WIN32_BUILTIN )
+if(WIN32)
+    set(WIN32_BUILTIN BUILTIN)
+endif()
+
+# XXX Following modules are missing:
+# lzma
+
+add_python_extension(array ${WIN32_BUILTIN} SOURCES arraymodule.c)
+add_python_extension(audioop ${WIN32_BUILTIN} SOURCES audioop.c)
+add_python_extension(_bisect ${WIN32_BUILTIN} SOURCES _bisectmodule.c)
+add_python_extension(cmath REQUIRES HAVE_LIBM ${WIN32_BUILTIN} SOURCES _math.c cmathmodule.c LIBRARIES ${M_LIBRARIES})
+add_python_extension(_codecs_cn ${WIN32_BUILTIN} SOURCES cjkcodecs/_codecs_cn.c)
+add_python_extension(_codecs_hk ${WIN32_BUILTIN} SOURCES cjkcodecs/_codecs_hk.c)
+add_python_extension(_codecs_iso2022 ${WIN32_BUILTIN} SOURCES cjkcodecs/_codecs_iso2022.c)
+add_python_extension(_codecs_jp ${WIN32_BUILTIN} SOURCES cjkcodecs/_codecs_jp.c)
+add_python_extension(_codecs_kr ${WIN32_BUILTIN} SOURCES cjkcodecs/_codecs_kr.c)
+add_python_extension(_codecs_tw ${WIN32_BUILTIN} SOURCES cjkcodecs/_codecs_tw.c)
+add_python_extension(_collections ALWAYS_BUILTIN SOURCES _collectionsmodule.c) # Container types
+add_python_extension(cPickle ${WIN32_BUILTIN} REQUIRES IS_PY2 SOURCES cPickle.c)
+set(crypt2_NAME crypt)
+set(crypt2_SOURCES cryptmodule.c)
+set(crypt3_NAME _crypt)
+set(crypt3_SOURCES _cryptmodule.c)
+add_python_extension(${crypt${PY_VERSION_MAJOR}_NAME} REQUIRES HAVE_LIBCRYPT SOURCES ${crypt${PY_VERSION_MAJOR}_SOURCES} LIBRARIES ${HAVE_LIBCRYPT})
+add_python_extension(cStringIO ${WIN32_BUILTIN} REQUIRES IS_PY2 SOURCES cStringIO.c)
+add_python_extension(_csv ${WIN32_BUILTIN} SOURCES _csv.c)
+add_python_extension(_ctypes_test SOURCES _ctypes/_ctypes_test.c)
+set(datetime2_NAME datetime)
+set(datetime2_SOURCES datetimemodule.c)
+set(datetime3_NAME _datetime)
+set(datetime3_SOURCES _datetimemodule.c)
+if(UNIX)
+  list(APPEND datetime${PY_VERSION_MAJOR}_SOURCES timemodule.c)
+endif()
+add_python_extension(${datetime${PY_VERSION_MAJOR}_NAME} ${WIN32_BUILTIN} REQUIRES HAVE_LIBM BUILTIN SOURCES ${datetime${PY_VERSION_MAJOR}_SOURCES} LIBRARIES ${M_LIBRARIES})
+#if(ENABLE_DATETIME AND CMAKE_C_COMPILER_ID MATCHES GNU)
+#    set_property(SOURCE ${SRC_DIR}/Modules/datetimemodule.c PROPERTY COMPILE_FLAGS -Wno-unused-value)
+#endif()
+add_python_extension(_functools ${WIN32_BUILTIN} SOURCES _functoolsmodule.c) # Tools for working with functions and callable objects
+add_python_extension(future_builtins ${WIN32_BUILTIN} REQUIRES IS_PY2 SOURCES future_builtins.c)
+add_python_extension(_heapq ${WIN32_BUILTIN} SOURCES _heapqmodule.c)
+add_python_extension(_hotshot ${WIN32_BUILTIN} REQUIRES IS_PY2 SOURCES _hotshot.c)
+
+set(_io_SOURCES
+    _io/_iomodule.c
+    _io/bufferedio.c
+    _io/bytesio.c
+    _io/fileio.c
+    _io/iobase.c
+    _io/stringio.c
+    _io/textio.c
+    )
+if(WIN32 AND EXISTS ${SRC_DIR}/Modules/_io/winconsoleio.c)
+    list(APPEND _io_SOURCES
+        ${SRC_DIR}/Modules/_io/winconsoleio.c
+        )
+endif()
+add_python_extension(_io BUILTIN SOURCES ${_io_SOURCES})
+
+add_python_extension(itertools ${WIN32_BUILTIN} SOURCES itertoolsmodule.c) # Functions creating iterators for efficient looping
+add_python_extension(_json ${WIN32_BUILTIN} SOURCES _json.c)
+add_python_extension(_locale ${WIN32_BUILTIN} SOURCES _localemodule.c) # access to ISO C locale support
+add_python_extension(_lsprof ${WIN32_BUILTIN} SOURCES _lsprof.c rotatingtree.c)
+add_python_extension(math ${WIN32_BUILTIN} SOURCES _math.c mathmodule.c)
+add_python_extension(mmap ${WIN32_BUILTIN} SOURCES mmapmodule.c)
+add_python_extension(_multibytecodec ${WIN32_BUILTIN} SOURCES cjkcodecs/multibytecodec.c)
+add_python_extension(operator ${WIN32_BUILTIN} REQUIRES IS_PY2 SOURCES operator.c)
+add_python_extension(parser ${WIN32_BUILTIN} SOURCES parsermodule.c)
+add_python_extension(_random ${WIN32_BUILTIN} SOURCES _randommodule.c)
+add_python_extension(strop ${WIN32_BUILTIN} REQUIRES IS_PY2 SOURCES stropmodule.c)
+add_python_extension(_struct ${WIN32_BUILTIN} SOURCES _struct.c)
+add_python_extension(_testcapi SOURCES _testcapimodule.c)
+set(thread2_NAME thread)
+set(thread3_NAME _thread)
+set(thread2_SOURCES ${SRC_DIR}/Modules/threadmodule.c)
+set(thread3_SOURCES ${SRC_DIR}/Modules/_threadmodule.c)
+add_python_extension(${thread${PY_VERSION_MAJOR}_NAME} BUILTIN REQUIRES WITH_THREAD SOURCES ${thread${PY_VERSION_MAJOR}_SOURCES})
+add_python_extension(time BUILTIN REQUIRES HAVE_LIBM SOURCES timemodule.c LIBRARIES ${M_LIBRARIES} ${TIMEMODULE_LIB})
+add_python_extension(unicodedata SOURCES unicodedata.c)
+
+# Python3
+add_python_extension(atexit BUILTIN REQUIRES IS_PY3 SOURCES atexitmodule.c) # Register functions to be run at interpreter-shutdown
+add_python_extension(_codecs BUILTIN REQUIRES IS_PY3 SOURCES _codecsmodule.c) # access to the builtin codecs and codec registry
+add_python_extension(faulthandler BUILTIN REQUIRES IS_PY3 SOURCES faulthandler.c)
+add_python_extension(_opcode BUILTIN REQUIRES IS_PY3 SOURCES _opcode.c)
+add_python_extension(_operator ${WIN32_BUILTIN} REQUIRES IS_PY3 SOURCES _operator.c)
+add_python_extension(_pickle BUILTIN REQUIRES IS_PY3 SOURCES _pickle.c)
+add_python_extension(_sre BUILTIN REQUIRES IS_PY3 SOURCES _sre.c) # Fredrik Lundh's new regular expressions
+add_python_extension(_stat BUILTIN REQUIRES IS_PY3 SOURCES _stat.c) # stat.h interface
+add_python_extension(_symtable BUILTIN REQUIRES IS_PY3 SOURCES symtablemodule.c)
+# Python PEP-3118 (buffer protocol) test module
+add_python_extension(_testbuffer REQUIRES IS_PY3 SOURCES _testbuffer.c)
+# Test loading multiple modules from one compiled file (http://bugs.python.org/issue16421)
+add_python_extension(_testimportmultiple REQUIRES IS_PY3 SOURCES _testimportmultiple.c)
+# Test multi-phase extension module init (PEP 489)
+add_python_extension(_testmultiphase REQUIRES IS_PY3 SOURCES _testmultiphase.c)
+# debug tool to trace memory blocks allocated by Python
+add_python_extension(_tracemalloc BUILTIN REQUIRES IS_PY3 SOURCES hashtable.c _tracemalloc.c)
+add_python_extension(_weakref BUILTIN REQUIRES IS_PY3 SOURCES _weakref.c)
+math(EXPR _limited_api_version "${PY_VERSION_MAJOR} * 100 + ${PY_VERSION_MINOR}")
+add_python_extension(xxlimited REQUIRES IS_PY3 BUILD_TESTING
+    SOURCES xxlimited.c
+    DEFINITIONS Py_LIMITED_API=0x${_limited_api_version}0000
+    NO_INSTALL
+)
+add_python_extension(xxsubtype BUILTIN REQUIRES IS_PY3 SOURCES xxsubtype.c)
+# The zipimport module is always imported at startup. Having it as a
+# builtin module avoids some bootstrapping problems and reduces overhead.
+add_python_extension(zipimport ALWAYS_BUILTIN REQUIRES IS_PY3 SOURCES zipimport.c)
+
+# UNIX-only extensions
+add_python_extension(fcntl REQUIRES UNIX SOURCES fcntlmodule.c)
+add_python_extension(grp REQUIRES UNIX SOURCES grpmodule.c)
+add_python_extension(nis REQUIRES UNIX HAVE_LIBNSL SOURCES nismodule.c LIBRARIES ${HAVE_LIBNSL})
+add_python_extension(posix REQUIRES UNIX BUILTIN SOURCES posixmodule.c)
+add_python_extension(pwd REQUIRES UNIX BUILTIN SOURCES pwdmodule.c) # this is needed to find out the user's home dir if $HOME is not set
+add_python_extension(resource REQUIRES UNIX SOURCES resource.c)
+add_python_extension(spwd REQUIRES UNIX HAVE_GETSPNAM HAVE_GETSPENT SOURCES spwdmodule.c)
+add_python_extension(syslog REQUIRES UNIX SOURCES syslogmodule.c)
+add_python_extension(termios REQUIRES UNIX SOURCES termios.c)
+
+# Python3: UNIX-only extensions
+add_python_extension(errno BUILTIN REQUIRES IS_PY3 UNIX SOURCES errnomodule.c)
+add_python_extension(_posixsubprocess BUILTIN REQUIRES IS_PY3 UNIX SOURCES _posixsubprocess.c)
+
+# MacOSX-only extensions
+set(_scproxy2_SOURCES ${SRC_DIR}/Mac/Modules/_scproxy.c)
+set(_scproxy3_SOURCES ${SRC_DIR}/Modules/_scproxy.c)
+add_python_extension(_scproxy
+    REQUIRES APPLE HAVE_LIBSYSTEMCONFIGURATION
+    SOURCES ${_scproxy${PY_VERSION_MAJOR}_SOURCES}
+    LIBRARIES ${HAVE_LIBSYSTEMCONFIGURATION}
+)
+
+# Linux-only extensions
+add_python_extension(linuxaudiodev REQUIRES LINUX IS_PY2 SOURCES linuxaudiodev.c)
+add_python_extension(ossaudiodev REQUIRES LINUX SOURCES ossaudiodev.c)
+
+# Windows-only extensions
+add_python_extension(_msi
+    REQUIRES WIN32
+    SOURCES ${SRC_DIR}/PC/_msi.c
+    LIBRARIES cabinet.lib msi.lib rpcrt4.lib
+)
+add_python_extension(msvcrt REQUIRES MSVC BUILTIN SOURCES ${SRC_DIR}/PC/msvcrtmodule.c)
+add_python_extension(nt REQUIRES WIN32 BUILTIN SOURCES posixmodule.c)
+add_python_extension(_subprocess REQUIRES WIN32 IS_PY2 BUILTIN SOURCES ${SRC_DIR}/PC/_subprocess.c)
+
+set(winreg2_NAME _winreg)
+set(winreg3_NAME winreg)
+add_python_extension(${winreg${PY_VERSION_MAJOR}_NAME} REQUIRES WIN32 BUILTIN SOURCES ${SRC_DIR}/PC/${winreg${PY_VERSION_MAJOR}_NAME}.c)
+
+# Python3: Windows-only extensions
+add_python_extension(_overlapped
+    REQUIRES WIN32 IS_PY3
+    SOURCES ${SRC_DIR}/Modules/overlapped.c
+    LIBRARIES ws2_32
+)
+add_python_extension(_winapi REQUIRES WIN32 IS_PY3 BUILTIN SOURCES ${SRC_DIR}/Modules/_winapi.c)
+
+# Multiprocessing is different on unix and windows
+if(UNIX)
+    set(_multiprocessing2_SOURCES
+        _multiprocessing/socket_connection.c
+    )
+    set(_multiprocessing3_SOURCES )
+    if(HAVE_SEM_OPEN AND NOT POSIX_SEMAPHORES_NOT_ENABLED)
+        list(APPEND _multiprocessing${PY_VERSION_MAJOR}_SOURCES
+            _multiprocessing/semaphore.c
+        )
+    endif()
+    add_python_extension(_multiprocessing
+        SOURCES _multiprocessing/multiprocessing.c
+                ${_multiprocessing${PY_VERSION_MAJOR}_SOURCES}
+        REQUIRES WITH_THREAD
+    )
+elseif(WIN32)
+    set(_multiprocessing2_SOURCES
+        _multiprocessing/pipe_connection.c
+        _multiprocessing/socket_connection.c
+        _multiprocessing/win32_functions.c
+    )
+    set(_multiprocessing3_SOURCES )
+    add_python_extension(_multiprocessing
+        SOURCES _multiprocessing/multiprocessing.c
+                _multiprocessing/semaphore.c
+                ${_multiprocessing${PY_VERSION_MAJOR}_SOURCES}
+        LIBRARIES ws2_32
+    )
+endif()
+
+# Select needs winsock on Windows
+if(WIN32)
+    add_python_extension(select SOURCES selectmodule.c LIBRARIES ws2_32)
+else()
+    add_python_extension(select SOURCES selectmodule.c)
+endif()
+
+# Socket is different on Windows
+set(_socket_SOURCES socketmodule.c)
+if(WIN32)
+    add_python_extension(_socket
+        REQUIRES HAVE_LIBM
+        SOURCES ${_socket_SOURCES}
+        DEFINITIONS EAI_ADDRFAMILY
+                    HAVE_SOCKADDR_STORAGE
+                    HAVE_ADDRINFO
+        LIBRARIES ws2_32 ${M_LIBRARIES}
+    )
+else()
+    list(APPEND _socket_SOURCES timemodule.c)
+    add_python_extension(_socket
+        REQUIRES HAVE_LIBM BUILTIN
+        SOURCES ${_socket_SOURCES}
+        LIBRARIES ${M_LIBRARIES}
+    )
+endif()
+
+set(_libffi_system_dir ${CMAKE_SYSTEM_PROCESSOR})
+if("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "i686")
+  set(_libffi_system_dir "x86")
+elseif("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64" OR "${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "amd64")
+  set(_libffi_system_dir "x86")
+elseif("${CMAKE_SYSTEM_PROCESSOR}" MATCHES "arm")
+  set(_libffi_system_dir "arm")
+endif()
+# Common ctypes sources
+set(ctypes_COMMON_SOURCES
+    _ctypes/_ctypes.c
+    _ctypes/callbacks.c
+    _ctypes/callproc.c
+    _ctypes/stgdict.c
+    _ctypes/cfield.c
+)
+# ctypes is different on Windows
+if(WIN32)
+    if(MINGW)
+      add_python_extension(_ctypes
+          SOURCES ${ctypes_COMMON_SOURCES}
+                  _ctypes/libffi_mingw/closures.c
+                  _ctypes/libffi_mingw/debug.c
+                  _ctypes/libffi_mingw/prep_cif.c
+                  _ctypes/libffi_mingw/raw_api.c
+                  _ctypes/libffi_mingw/${_libffi_system_dir}/ffi.c
+                  _ctypes/libffi_mingw/${_libffi_system_dir}/win32.S
+          INCLUDEDIRS ${SRC_DIR}/Modules/_ctypes/libffi/src/${_libffi_system_dir}
+                      ${SRC_DIR}/Modules/_ctypes/libffi/include
+          DEFINITIONS X86_WIN32
+        )
+    else() # Visual Studio
+      if(${CMAKE_SIZEOF_VOID_P} EQUAL 8)
+          enable_language(ASM_MASM)
+          set(_ctype_arch_impl win64.asm)
+      else()
+          set(_ctype_arch_impl win32.c)
+      endif()
+      add_python_extension(_ctypes
+          SOURCES ${ctypes_COMMON_SOURCES}
+                  _ctypes/malloc_closure.c
+                  _ctypes/libffi_msvc/prep_cif.c
+                  _ctypes/libffi_msvc/ffi.c
+                  _ctypes/libffi_msvc/${_ctype_arch_impl}
+          REQUIRES BUILD_LIBPYTHON_SHARED
+          INCLUDEDIRS ${SRC_DIR}/Modules/_ctypes/libffi_msvc
+        )
+    endif()
+else()
+    set(_libffi_system_extra_src)
+    if(APPLE)
+        add_python_extension(_ctypes
+            SOURCES ${ctypes_COMMON_SOURCES}
+                    _ctypes/malloc_closure.c
+                    _ctypes/darwin/dlfcn_simple.c
+                    _ctypes/libffi_osx/ffi.c
+                    _ctypes/libffi_osx/x86/darwin64.S
+                    _ctypes/libffi_osx/x86/x86-darwin.S
+                    _ctypes/libffi_osx/x86/x86-ffi_darwin.c
+                    _ctypes/libffi_osx/x86/x86-ffi64.c
+            INCLUDEDIRS ${SRC_DIR}/Modules/_ctypes/libffi_osx/include
+                        ${SRC_DIR}/Modules/_ctypes/darwin
+            DEFINITIONS MACOSX
+        )
+    else()
+        if("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64")
+          set(_libffi_system_extra_src
+                _ctypes/libffi/src/${_libffi_system_dir}/ffi64.c
+                _ctypes/libffi/src/${_libffi_system_dir}/unix64.S
+                )
+        elseif("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "i686")
+          set(_libffi_system_extra_src
+                _ctypes/libffi/src/${_libffi_system_dir}/win32.S
+                )
+        endif()
+        # To facilitate an eventual contribution of the configuration
+        # of fficonfig.h to the upstream project, corresponding tests
+        # in ConfigureChecks.cmake are labeled using this convention:
+        # * "libffi specific"
+        # * "libffi and cpython"
+        set(LIBFFI_VERSION "3.1")
+        configure_file(
+          ${PROJECT_SOURCE_DIR}/cmake/fficonfig.h.in
+          ${INCLUDE_BUILD_DIR}/fficonfig.h
+          )
+        add_python_extension(_ctypes
+            SOURCES ${ctypes_COMMON_SOURCES}
+                    _ctypes/libffi/src/closures.c
+                    _ctypes/libffi/src/prep_cif.c
+                    _ctypes/libffi/src/${_libffi_system_dir}/ffi.c
+                    _ctypes/libffi/src/${_libffi_system_dir}/sysv.S
+                    ${_libffi_system_extra_src}
+            INCLUDEDIRS ${SRC_DIR}/Modules/_ctypes/libffi/src/${_libffi_system_dir}
+                        ${SRC_DIR}/Modules/_ctypes/libffi/include
+                        ${INCLUDE_BUILD_DIR}      # For fficonfig.h
+                        ${PROJECT_SOURCE_DIR}/cmake # For ffi.h
+        )
+    endif()
+endif()
+
+# Python3: _decimal
+if(IS_PY3)
+
+set(libmpdec_config_x64          CONFIG_64 ASM)
+set(libmpdec_config_uint128      CONFIG_64 ANSI HAVE_UINT128_T)
+set(libmpdec_config_ansi64       CONFIG_64 ANSI)
+set(libmpdec_config_ppro         CONFIG_32 PPRO ASM)
+set(libmpdec_config_ansi32       CONFIG_32 PPRO) # XXX Is ANSI needed here ?
+set(libmpdec_config_ansi_legacy  CONFIG_32 ANSI LEGACY_COMPILER)
+set(libmpdec_config_universal    UNIVERSAL)
+
+if(USE_SYSTEM_LIBMPDEC)
+    set(_decimal_REQUIRES REQUIRES LIBMPDEC_LIBRARIES)
+    set(_decimal_EXTRA_SOURCES )
+    set(_decimal_INCLUDEDIRS )
+else()
+    set(_decimal_REQUIRES )
+    set(_decimal_EXTRA_SOURCES
+        _decimal/libmpdec/basearith.c
+        _decimal/libmpdec/constants.c
+        _decimal/libmpdec/context.c
+        _decimal/libmpdec/convolute.c
+        _decimal/libmpdec/crt.c
+        _decimal/libmpdec/difradix2.c
+        _decimal/libmpdec/fnt.c
+        _decimal/libmpdec/fourstep.c
+        _decimal/libmpdec/io.c
+        _decimal/libmpdec/memory.c
+        _decimal/libmpdec/mpdecimal.c
+        _decimal/libmpdec/numbertheory.c
+        _decimal/libmpdec/sixstep.c
+        _decimal/libmpdec/transpose.c
+    )
+    if(WIN32)
+        if(${CMAKE_SIZEOF_VOID_P} EQUAL 8)
+            enable_language(ASM_MASM)
+            list(APPEND _decimal_EXTRA_SOURCES
+                _decimal/libmpdec/vcdiv64.asm
+            )
+        endif()
+    endif()
+    set(_decimal_INCLUDEDIRS INCLUDEDIRS ${SRC_DIR}/Modules/_decimal/libmpdec)
+endif()
+set(libmpdec_config )
+set(_decimal_compile_flags )
+if(APPLE)
+    # Universal here means: build with the same options Python
+    # was built with.
+    set(libmpdec_config universal)
+elseif(${CMAKE_SIZEOF_VOID_P} EQUAL 8)
+    if(HAVE_GCC_ASM_FOR_X64)
+        set(libmpdec_config x64)
+    elseif(HAVE_GCC_UINT128_T)
+        set(libmpdec_config uint128)
+    else()
+        set(libmpdec_config ansi64)
+    endif()
+elseif(${CMAKE_SIZEOF_VOID_P} EQUAL 4)
+    if(HAVE_GCC_ASM_FOR_X87 AND
+        (CMAKE_C_COMPILER_ID MATCHES "GNU" OR CMAKE_C_COMPILER_ID MATCHES "Clang")
+        AND NOT CMAKE_SYSTEM MATCHES SunOS
+    )
+        # solaris: problems with register allocation.
+        # icc >= 11.0 works as well.
+        set(libmpdec_config ppro)
+        list(APPEND _decimal_compile_flags "-Wno-unknown-pragmas")
+    else()
+      set(libmpdec_config ansi32)
+    endif()
+else()
+    message(FATAL_ERROR "extension_decimal: unsupported architecture")
+endif()
+
+# Workarounds for toolchain bugs:
+if(HAVE_IPA_PURE_CONST_BUG)
+    # Some versions of gcc miscompile inline asm:
+    # http://gcc.gnu.org/bugzilla/show_bug.cgi?id=46491
+    # http://gcc.gnu.org/ml/gcc/2010-11/msg00366.html
+    list(APPEND _decimal_compile_flags "-fno-ipa-pure-const")
+endif()
+if(HAVE_GLIBC_MEMMOVE_BUG)
+    # _FORTIFY_SOURCE wrappers for memmove and bcopy are incorrect:
+    # http://sourceware.org/ml/libc-alpha/2010-12/msg00009.html
+    # XXX Implement missing logic
+#    undef_macros.append('_FORTIFY_SOURCE')
+endif()
+
+if(NOT WITH_THREAD)
+    # Faster version without thread local contexts:
+    list(APPEND libmpdec_config_${libmpdec_config}
+        WITHOUT_THREADS
+    )
+endif()
+
+if(WIN32)
+    list(APPEND libmpdec_config_${libmpdec_config}
+        _CRT_SECURE_NO_WARNINGS MASM
+    )
+endif()
+
+# Uncomment for extra functionality:
+#list(APPEND libmpdec_config_${libmpdec_config} EXTRA_FUNCTIONALITY)
+
+if(ENABLE_DECIMAL)
+    message(STATUS "extension_decimal: libmpdec_config [${libmpdec_config}]")
+endif()
+add_python_extension(_decimal
+    SOURCES
+        _decimal/_decimal.c
+        _decimal/docstrings.h
+        ${_decimal_EXTRA_SOURCES}
+    DEFINITIONS ${libmpdec_config_${libmpdec_config}}
+    ${_decimal_REQUIRES}
+    ${_decimal_LIBRARIES}
+    ${_decimal_INCLUDEDIRS}
+)
+if(_decimal_compile_flags AND NOT BUILTIN_DECIMAL)
+    set_target_properties(extension_decimal PROPERTIES COMPILE_FLAGS ${_decimal_compile_flags})
+endif()
+
+endif()
+
+# Build expat using the system expat if it's installed, otherwise use the
+# builtin version.
+if(EXPAT_LIBRARIES AND EXPAT_INCLUDE_DIRS)
+    add_python_extension(pyexpat
+        SOURCES pyexpat.c
+        LIBRARIES ${EXPAT_LIBRARIES}
+        INCLUDEDIRS ${EXPAT_INCLUDE_DIRS}
+    )
+    add_python_extension(_elementtree
+        SOURCES _elementtree.c
+        LIBRARIES ${EXPAT_LIBRARIES}
+        INCLUDEDIRS ${EXPAT_INCLUDE_DIRS}
+    )
+else()
+    set(_pyexpat_definitions XML_STATIC)
+    set(_pyexpat_SOURCES
+        pyexpat.c
+        expat/xmlparse.c
+        expat/xmlrole.c
+        expat/xmltok.c
+        )
+    if(UNIX)
+        list(APPEND _pyexpat_definitions HAVE_EXPAT_CONFIG_H)
+        # bpo-30947: Python uses best available entropy sources to
+        # call XML_SetHashSalt(), expat entropy sources are not needed
+        list(APPEND _pyexpat_definitions XML_POOR_ENTROPY)
+    elseif(WIN32)
+        list(APPEND _pyexpat_definitions COMPILED_FROM_DSP)
+        if(EXISTS "${SRC_DIR}/Modules/expat/loadlibrary.c")
+            list(APPEND _pyexpat_SOURCES "${SRC_DIR}/Modules/expat/loadlibrary.c")
+        endif()
+    endif()
+    add_python_extension(pyexpat
+        SOURCES ${_pyexpat_SOURCES}
+        DEFINITIONS ${_pyexpat_definitions}
+        INCLUDEDIRS ${SRC_DIR}/Modules/expat
+    )
+    set(_elementtree_definitions USE_PYEXPAT_CAPI)
+    if(WIN32)
+        list(APPEND _elementtree_definitions COMPILED_FROM_DSP)
+    endif()
+    add_python_extension(_elementtree
+        SOURCES _elementtree.c
+        DEFINITIONS ${_elementtree_definitions}
+        INCLUDEDIRS ${SRC_DIR}/Modules/expat
+    )
+endif()
+
+if(IS_PY2)
+
+# If openssl is NOT available then build some other hash implementations on UNIX
+set(HASH_NOT_AVAILABLE ON)
+if(NOT WIN32 AND OPENSSL_LIBRARIES)
+  set(HASH_NOT_AVAILABLE OFF)
+endif()
+
+add_python_extension(_md5 REQUIRES HASH_NOT_AVAILABLE ${WIN32_BUILTIN} SOURCES md5.c md5module.c)
+add_python_extension(_sha REQUIRES HASH_NOT_AVAILABLE ${WIN32_BUILTIN} SOURCES shamodule.c)
+add_python_extension(_sha256 REQUIRES HASH_NOT_AVAILABLE ${WIN32_BUILTIN} SOURCES sha256module.c)
+add_python_extension(_sha512 REQUIRES HASH_NOT_AVAILABLE ${WIN32_BUILTIN} SOURCES sha512module.c)
+
+else()
+
+# We always compile these even when OpenSSL is available (issue #14693).
+# It's harmless and the object code is tiny (40-50 KB per module,
+# only loaded when actually used).
+add_python_extension(_md5 ${WIN32_BUILTIN} SOURCES md5module.c)
+add_python_extension(_sha1 ${WIN32_BUILTIN} SOURCES sha1module.c)
+add_python_extension(_sha256 ${WIN32_BUILTIN} SOURCES sha256module.c)
+add_python_extension(_sha512 ${WIN32_BUILTIN} SOURCES sha512module.c)
+
+endif()
+
+
+# Extensions that depend on other libraries
+set(binascii_REQUIRES "")
+set(binascii_DEFINITIONS "")
+set(binascii_LIBRARIES "")
+set(binascii_INCLUDEDIRS "")
+if(ZLIB_LIBRARY)
+  list(APPEND binascii_REQUIRES ZLIB_INCLUDE_DIR)
+  list(APPEND binascii_DEFINITIONS USE_ZLIB_CRC32)
+  list(APPEND binascii_LIBRARIES ${ZLIB_LIBRARY})
+  list(APPEND binascii_INCLUDEDIRS ${ZLIB_INCLUDE_DIR})
+endif()
+add_python_extension(binascii
+    REQUIRES ${binascii_REQUIRES}
+    ${WIN32_BUILTIN}
+    SOURCES binascii.c
+    DEFINITIONS ${binascii_DEFINITIONS}
+    LIBRARIES ${binascii_LIBRARIES}
+    INCLUDEDIRS ${binascii_INCLUDEDIRS}
+)
+add_python_extension(_bsddb
+    REQUIRES DB_INCLUDE_PATH DB_LIBRARIES
+    SOURCES _bsddb.c
+    LIBRARIES ${DB_LIBRARIES}
+    INCLUDEDIRS ${DB_INCLUDE_PATH}
+)
+set(bz2_2_NAME bz2)
+set(bz2_3_NAME _bz2)
+add_python_extension(${bz2_${PY_VERSION_MAJOR}_NAME}
+    REQUIRES BZIP2_LIBRARIES BZIP2_INCLUDE_DIR
+    SOURCES ${bz2_${PY_VERSION_MAJOR}_NAME}module.c
+    LIBRARIES ${BZIP2_LIBRARIES}
+    INCLUDEDIRS ${BZIP2_INCLUDE_DIR}
+)
+set(curses_common_REQUIRES CURSES_LIBRARIES)
+set(curses_common_LIBRARIES ${CURSES_LIBRARIES})
+if(WITH_STATIC_DEPENDENCIES)
+    list(APPEND curses_common_REQUIRES TINFO_LIBRARY GPM_LIBRARY)
+    list(APPEND curses_common_LIBRARIES ${TINFO_LIBRARY} ${GPM_LIBRARY})
+endif()
+add_python_extension(_curses_panel
+    REQUIRES ${curses_common_REQUIRES} PANEL_LIBRARIES "HAVE_PANEL_H OR HAVE_NCURSES_PANEL_H"
+    SOURCES _curses_panel.c
+    LIBRARIES ${curses_common_LIBRARIES} ${PANEL_LIBRARIES}
+)
+add_python_extension(_curses
+    REQUIRES ${curses_common_REQUIRES}
+    SOURCES _cursesmodule.c
+    LIBRARIES ${curses_common_LIBRARIES}
+)
+set(dbm2_SOURCES dbmmodule.c)
+set(dbm3_SOURCES _dbmmodule.c)
+if(IS_PY3)
+  set(dbm_name _dbm)
+else()
+  set(dbm_name dbm)
+endif()
+add_python_extension(${dbm_name}
+    REQUIRES NDBM_TAG GDBM_LIBRARY GDBM_COMPAT_LIBRARY
+    SOURCES ${dbm${PY_VERSION_MAJOR}_SOURCES}
+    DEFINITIONS HAVE_${NDBM_TAG}_H
+    LIBRARIES ${GDBM_LIBRARY} ${GDBM_COMPAT_LIBRARY}
+    INCLUDEDIRS ${${NDBM_TAG}_INCLUDE_PATH}
+)
+set(gdbm2_SOURCES gdbmmodule.c)
+set(gdbm3_SOURCES _gdbmmodule.c)
+if(IS_PY3)
+  set(gdbm_name _gdbm)
+else()
+  set(gdbm_name gdbm)
+endif()
+add_python_extension(${gdbm_name}
+    REQUIRES GDBM_INCLUDE_PATH GDBM_LIBRARY GDBM_COMPAT_LIBRARY
+    SOURCES ${gdbm${PY_VERSION_MAJOR}_SOURCES}
+    DEFINITIONS HAVE_GDBM_DASH_NDBM_H
+    LIBRARIES ${GDBM_LIBRARY}
+    INCLUDEDIRS ${GDBM_INCLUDE_PATH}
+)
+add_python_extension(_hashlib
+    REQUIRES OPENSSL_INCLUDE_DIR OPENSSL_LIBRARIES
+    SOURCES _hashopenssl.c
+    LIBRARIES ${OPENSSL_LIBRARIES}
+    INCLUDEDIRS ${OPENSSL_INCLUDE_DIR}
+)
+if(ENABLE_HASHLIB AND CMAKE_C_COMPILER_ID MATCHES GNU)
+    set_property(SOURCE ${SRC_DIR}/Modules/_hashopenssl.c PROPERTY COMPILE_FLAGS -Wno-deprecated-declarations)
+endif()
+add_python_extension(readline
+    REQUIRES READLINE_INCLUDE_PATH READLINE_LIBRARY CURSES_LIBRARIES HAVE_READLINE_READLINE_H
+    SOURCES readline.c
+    LIBRARIES ${READLINE_LIBRARY} ${CURSES_LIBRARIES}
+    INCLUDEDIRS ${READLINE_INCLUDE_PATH}
+)
+add_python_extension(_sqlite3
+    REQUIRES SQLITE3_INCLUDE_PATH SQLITE3_LIBRARY
+    SOURCES _sqlite/cache.c
+            _sqlite/connection.c
+            _sqlite/cursor.c
+            _sqlite/microprotocols.c
+            _sqlite/module.c
+            _sqlite/prepare_protocol.c
+            _sqlite/row.c
+            _sqlite/statement.c
+            _sqlite/util.c
+    DEFINITIONS MODULE_NAME="sqlite3"
+    INCLUDEDIRS ${SQLITE3_INCLUDE_PATH}
+    LIBRARIES ${SQLITE3_LIBRARY}
+)
+if(ENABLE_SQLITE3 AND CMAKE_C_COMPILER_ID MATCHES GNU)
+    set_property(SOURCE ${SRC_DIR}/Modules/_sqlite/module.c PROPERTY COMPILE_FLAGS -Wno-deprecated-declarations)
+endif()
+set(_ssl_LIBRARIES ${OPENSSL_LIBRARIES})
+if(WIN32)
+    list(APPEND _ssl_LIBRARIES Crypt32 ws2_32)
+endif()
+add_python_extension(_ssl
+    REQUIRES OPENSSL_INCLUDE_DIR OPENSSL_LIBRARIES
+    SOURCES _ssl.c
+    LIBRARIES ${_ssl_LIBRARIES}
+    INCLUDEDIRS ${OPENSSL_INCLUDE_DIR}
+)
+set(_tkinter_REQUIRES TCL_LIBRARY TK_LIBRARY TCL_INCLUDE_PATH TK_INCLUDE_PATH)
+set(_tkinter_LIBRARIES ${TCL_LIBRARY} ${TK_LIBRARY})
+set(_tkinter_INCLUDEDIRS ${TCL_INCLUDE_PATH} ${TK_INCLUDE_PATH})
+if(UNIX)
+  list(APPEND _tkinter_REQUIRES X11_INCLUDE_DIR X11_LIBRARIES)
+  list(APPEND _tkinter_LIBRARIES ${X11_LIBRARIES})
+  list(APPEND _tkinter_INCLUDEDIRS ${X11_INCLUDE_DIR})
+endif()
+add_python_extension(_tkinter
+    REQUIRES ${_tkinter_REQUIRES}
+    SOURCES _tkinter.c tkappinit.c
+    DEFINITIONS WITH_APPINIT=1
+    LIBRARIES ${_tkinter_LIBRARIES}
+    INCLUDEDIRS ${_tkinter_INCLUDEDIRS}
+)
+if(NOT USE_BUILTIN_ZLIB)
+    add_python_extension(zlib
+        REQUIRES ZLIB_LIBRARY ZLIB_INCLUDE_DIR
+        SOURCES zlibmodule.c
+        LIBRARIES ${ZLIB_LIBRARY}
+        INCLUDEDIRS ${ZLIB_INCLUDE_DIR}
+    )
+else()
+    add_python_extension(zlib BUILTIN
+        REQUIRES
+        SOURCES
+            zlibmodule.c
+            zlib/adler32.c
+            zlib/compress.c
+            zlib/crc32.c
+            zlib/deflate.c
+            zlib/infback.c
+            zlib/inffast.c
+            zlib/inflate.c
+            zlib/inftrees.c
+            zlib/trees.c
+            zlib/uncompr.c
+            zlib/zutil.c
+        INCLUDEDIRS ${SRC_DIR}/Modules/zlib
+    )
+endif()
+
+if(USE_LIBEDIT AND NOT BUILTIN_READLINE)
+    set_target_properties(extension_readline PROPERTIES
+        COMPILE_DEFINITIONS "USE_LIBEDIT")
+endif()
--- /dev/null
+++ b/cmake/ffi.h
@@ -0,0 +1,402 @@
+/* -----------------------------------------------------------------*-C-*-
+   libffi 3.0.10rc0 - Copyright (c) 1996-2003, 2007, 2008  Red Hat, Inc.
+
+   Permission is hereby granted, free of charge, to any person obtaining
+   a copy of this software and associated documentation files (the
+   ``Software''), to deal in the Software without restriction, including
+   without limitation the rights to use, copy, modify, merge, publish,
+   distribute, sublicense, and/or sell copies of the Software, and to
+   permit persons to whom the Software is furnished to do so, subject to
+   the following conditions:
+
+   The above copyright notice and this permission notice shall be included
+   in all copies or substantial portions of the Software.
+
+   THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND,
+   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+   NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
+   HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
+   WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+   DEALINGS IN THE SOFTWARE.
+
+   ----------------------------------------------------------------------- */
+
+/* -------------------------------------------------------------------
+   The basic API is described in the README file.
+
+   The raw API is designed to bypass some of the argument packing
+   and unpacking on architectures for which it can be avoided.
+
+   The closure API allows interpreted functions to be packaged up
+   inside a C function pointer, so that they can be called as C functions,
+   with no understanding on the client side that they are interpreted.
+   It can also be used in other cases in which it is necessary to package
+   up a user specified parameter and a function pointer as a single
+   function pointer.
+
+   The closure API must be implemented in order to get its functionality,
+   e.g. for use by gij.  Routines are provided to emulate the raw API
+   if the underlying platform doesn't allow faster implementation.
+
+   More details on the raw and cloure API can be found in:
+
+   http://gcc.gnu.org/ml/java/1999-q3/msg00138.html
+
+   and
+
+   http://gcc.gnu.org/ml/java/1999-q3/msg00174.html
+   -------------------------------------------------------------------- */
+
+#ifndef LIBFFI_H
+#define LIBFFI_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/* Specify which architecture libffi is configured for. */
+#define X86_64
+
+/* ---- System configuration information --------------------------------- */
+
+#include <ffitarget.h>
+
+#ifndef LIBFFI_ASM
+
+#ifdef _MSC_VER
+#define __attribute__(X)
+#endif
+
+#include <stddef.h>
+#include <limits.h>
+
+/* LONG_LONG_MAX is not always defined (not if STRICT_ANSI, for example).
+   But we can find it either under the correct ANSI name, or under GNU
+   C's internal name.  */
+#ifdef LONG_LONG_MAX
+# define FFI_LONG_LONG_MAX LONG_LONG_MAX
+#else
+# ifdef LLONG_MAX
+#  define FFI_LONG_LONG_MAX LLONG_MAX
+# else
+#  ifdef __GNUC__
+#   define FFI_LONG_LONG_MAX __LONG_LONG_MAX__
+#  endif
+# endif
+#endif
+
+/* The closure code assumes that this works on pointers, i.e. a size_t	*/
+/* can hold a pointer.							*/
+
+typedef struct _ffi_type
+{
+  size_t size;
+  unsigned short alignment;
+  unsigned short type;
+  struct _ffi_type **elements;
+} ffi_type;
+
+#ifndef LIBFFI_HIDE_BASIC_TYPES
+#if SCHAR_MAX == 127
+# define ffi_type_uchar                ffi_type_uint8
+# define ffi_type_schar                ffi_type_sint8
+#else
+ #error "char size not supported"
+#endif
+
+#if SHRT_MAX == 32767
+# define ffi_type_ushort       ffi_type_uint16
+# define ffi_type_sshort       ffi_type_sint16
+#elif SHRT_MAX == 2147483647
+# define ffi_type_ushort       ffi_type_uint32
+# define ffi_type_sshort       ffi_type_sint32
+#else
+ #error "short size not supported"
+#endif
+
+#if INT_MAX == 32767
+# define ffi_type_uint         ffi_type_uint16
+# define ffi_type_sint         ffi_type_sint16
+#elif INT_MAX == 2147483647
+# define ffi_type_uint         ffi_type_uint32
+# define ffi_type_sint         ffi_type_sint32
+#elif INT_MAX == 9223372036854775807
+# define ffi_type_uint         ffi_type_uint64
+# define ffi_type_sint         ffi_type_sint64
+#else
+ #error "int size not supported"
+#endif
+
+#if LONG_MAX == 2147483647
+# if FFI_LONG_LONG_MAX != 9223372036854775807
+ #error "no 64-bit data type supported"
+# endif
+#elif LONG_MAX != 9223372036854775807
+ #error "long size not supported"
+#endif
+
+#if LONG_MAX == 2147483647
+# define ffi_type_ulong        ffi_type_uint32
+# define ffi_type_slong        ffi_type_sint32
+#elif LONG_MAX == 9223372036854775807
+# define ffi_type_ulong        ffi_type_uint64
+# define ffi_type_slong        ffi_type_sint64
+#else
+ #error "long size not supported"
+#endif
+
+/* These are defined in types.c */
+extern ffi_type ffi_type_void;
+extern ffi_type ffi_type_uint8;
+extern ffi_type ffi_type_sint8;
+extern ffi_type ffi_type_uint16;
+extern ffi_type ffi_type_sint16;
+extern ffi_type ffi_type_uint32;
+extern ffi_type ffi_type_sint32;
+extern ffi_type ffi_type_uint64;
+extern ffi_type ffi_type_sint64;
+extern ffi_type ffi_type_float;
+extern ffi_type ffi_type_double;
+extern ffi_type ffi_type_pointer;
+
+#if 1
+extern ffi_type ffi_type_longdouble;
+#else
+#define ffi_type_longdouble ffi_type_double
+#endif
+#endif /* LIBFFI_HIDE_BASIC_TYPES */
+
+typedef enum {
+  FFI_OK = 0,
+  FFI_BAD_TYPEDEF,
+  FFI_BAD_ABI
+} ffi_status;
+
+typedef unsigned FFI_TYPE;
+
+typedef struct {
+  ffi_abi abi;
+  unsigned nargs;
+  ffi_type **arg_types;
+  ffi_type *rtype;
+  unsigned bytes;
+  unsigned flags;
+#ifdef FFI_EXTRA_CIF_FIELDS
+  FFI_EXTRA_CIF_FIELDS;
+#endif
+} ffi_cif;
+
+/* ---- Definitions for the raw API -------------------------------------- */
+
+#ifndef FFI_SIZEOF_ARG
+# if LONG_MAX == 2147483647
+#  define FFI_SIZEOF_ARG        4
+# elif LONG_MAX == 9223372036854775807
+#  define FFI_SIZEOF_ARG        8
+# endif
+#endif
+
+#ifndef FFI_SIZEOF_JAVA_RAW
+#  define FFI_SIZEOF_JAVA_RAW FFI_SIZEOF_ARG
+#endif
+
+typedef union {
+  ffi_sarg  sint;
+  ffi_arg   uint;
+  float	    flt;
+  char      data[FFI_SIZEOF_ARG];
+  void*     ptr;
+} ffi_raw;
+
+#if FFI_SIZEOF_JAVA_RAW == 4 && FFI_SIZEOF_ARG == 8
+/* This is a special case for mips64/n32 ABI (and perhaps others) where
+   sizeof(void *) is 4 and FFI_SIZEOF_ARG is 8.  */
+typedef union {
+  signed int	sint;
+  unsigned int	uint;
+  float		flt;
+  char		data[FFI_SIZEOF_JAVA_RAW];
+  void*		ptr;
+} ffi_java_raw;
+#else
+typedef ffi_raw ffi_java_raw;
+#endif
+
+
+void ffi_raw_call (ffi_cif *cif,
+		   void (*fn)(void),
+		   void *rvalue,
+		   ffi_raw *avalue);
+
+void ffi_ptrarray_to_raw (ffi_cif *cif, void **args, ffi_raw *raw);
+void ffi_raw_to_ptrarray (ffi_cif *cif, ffi_raw *raw, void **args);
+size_t ffi_raw_size (ffi_cif *cif);
+
+/* This is analogous to the raw API, except it uses Java parameter	*/
+/* packing, even on 64-bit machines.  I.e. on 64-bit machines		*/
+/* longs and doubles are followed by an empty 64-bit word.		*/
+
+void ffi_java_raw_call (ffi_cif *cif,
+			void (*fn)(void),
+			void *rvalue,
+			ffi_java_raw *avalue);
+
+void ffi_java_ptrarray_to_raw (ffi_cif *cif, void **args, ffi_java_raw *raw);
+void ffi_java_raw_to_ptrarray (ffi_cif *cif, ffi_java_raw *raw, void **args);
+size_t ffi_java_raw_size (ffi_cif *cif);
+
+/* ---- Definitions for closures ----------------------------------------- */
+
+#if FFI_CLOSURES
+
+#ifdef _MSC_VER
+__declspec(align(8))
+#endif
+typedef struct {
+  char tramp[FFI_TRAMPOLINE_SIZE];
+  ffi_cif   *cif;
+  void     (*fun)(ffi_cif*,void*,void**,void*);
+  void      *user_data;
+#ifdef __GNUC__
+} ffi_closure __attribute__((aligned (8)));
+#else
+} ffi_closure;
+#endif
+
+void *ffi_closure_alloc (size_t size, void **code);
+void ffi_closure_free (void *);
+
+ffi_status
+ffi_prep_closure (ffi_closure*,
+		  ffi_cif *,
+		  void (*fun)(ffi_cif*,void*,void**,void*),
+		  void *user_data);
+
+ffi_status
+ffi_prep_closure_loc (ffi_closure*,
+		      ffi_cif *,
+		      void (*fun)(ffi_cif*,void*,void**,void*),
+		      void *user_data,
+		      void*codeloc);
+
+typedef struct {
+  char tramp[FFI_TRAMPOLINE_SIZE];
+
+  ffi_cif   *cif;
+
+#if !FFI_NATIVE_RAW_API
+
+  /* if this is enabled, then a raw closure has the same layout 
+     as a regular closure.  We use this to install an intermediate 
+     handler to do the transaltion, void** -> ffi_raw*. */
+
+  void     (*translate_args)(ffi_cif*,void*,void**,void*);
+  void      *this_closure;
+
+#endif
+
+  void     (*fun)(ffi_cif*,void*,ffi_raw*,void*);
+  void      *user_data;
+
+} ffi_raw_closure;
+
+typedef struct {
+  char tramp[FFI_TRAMPOLINE_SIZE];
+
+  ffi_cif   *cif;
+
+#if !FFI_NATIVE_RAW_API
+
+  /* if this is enabled, then a raw closure has the same layout 
+     as a regular closure.  We use this to install an intermediate 
+     handler to do the transaltion, void** -> ffi_raw*. */
+
+  void     (*translate_args)(ffi_cif*,void*,void**,void*);
+  void      *this_closure;
+
+#endif
+
+  void     (*fun)(ffi_cif*,void*,ffi_java_raw*,void*);
+  void      *user_data;
+
+} ffi_java_raw_closure;
+
+ffi_status
+ffi_prep_raw_closure (ffi_raw_closure*,
+		      ffi_cif *cif,
+		      void (*fun)(ffi_cif*,void*,ffi_raw*,void*),
+		      void *user_data);
+
+ffi_status
+ffi_prep_raw_closure_loc (ffi_raw_closure*,
+			  ffi_cif *cif,
+			  void (*fun)(ffi_cif*,void*,ffi_raw*,void*),
+			  void *user_data,
+			  void *codeloc);
+
+ffi_status
+ffi_prep_java_raw_closure (ffi_java_raw_closure*,
+		           ffi_cif *cif,
+		           void (*fun)(ffi_cif*,void*,ffi_java_raw*,void*),
+		           void *user_data);
+
+ffi_status
+ffi_prep_java_raw_closure_loc (ffi_java_raw_closure*,
+			       ffi_cif *cif,
+			       void (*fun)(ffi_cif*,void*,ffi_java_raw*,void*),
+			       void *user_data,
+			       void *codeloc);
+
+#endif /* FFI_CLOSURES */
+
+/* ---- Public interface definition -------------------------------------- */
+
+ffi_status ffi_prep_cif(ffi_cif *cif,
+			ffi_abi abi,
+			unsigned int nargs,
+			ffi_type *rtype,
+			ffi_type **atypes);
+
+void ffi_call(ffi_cif *cif,
+	      void (*fn)(void),
+	      void *rvalue,
+	      void **avalue);
+
+/* Useful for eliminating compiler warnings */
+#define FFI_FN(f) ((void (*)(void))f)
+
+/* ---- Definitions shared with assembly code ---------------------------- */
+
+#endif
+
+/* If these change, update src/mips/ffitarget.h. */
+#define FFI_TYPE_VOID       0    
+#define FFI_TYPE_INT        1
+#define FFI_TYPE_FLOAT      2    
+#define FFI_TYPE_DOUBLE     3
+#if 1
+#define FFI_TYPE_LONGDOUBLE 4
+#else
+#define FFI_TYPE_LONGDOUBLE FFI_TYPE_DOUBLE
+#endif
+#define FFI_TYPE_UINT8      5   
+#define FFI_TYPE_SINT8      6
+#define FFI_TYPE_UINT16     7 
+#define FFI_TYPE_SINT16     8
+#define FFI_TYPE_UINT32     9
+#define FFI_TYPE_SINT32     10
+#define FFI_TYPE_UINT64     11
+#define FFI_TYPE_SINT64     12
+#define FFI_TYPE_STRUCT     13
+#define FFI_TYPE_POINTER    14
+
+/* This should always refer to the last type code (for sanity checks) */
+#define FFI_TYPE_LAST       FFI_TYPE_POINTER
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
--- /dev/null
+++ b/cmake/fficonfig.h.in
@@ -0,0 +1,207 @@
+/* fficonfig.h.  Generated from fficonfig.h.in by configure.  */
+/* fficonfig.h.in.  Generated from configure.ac by autoheader.  */
+
+/* Define if building universal (internal helper macro) */
+/* #undef AC_APPLE_UNIVERSAL_BUILD */
+
+/* Define to one of `_getb67', `GETB67', `getb67' for Cray-2 and Cray-YMP
+   systems. This function is required for `alloca.c' support on those systems.
+   */
+/* #undef CRAY_STACKSEG_END */
+
+/* Define to 1 if using `alloca.c'. */
+/* #undef C_ALLOCA */
+
+/* Define to the flags needed for the .section .eh_frame directive. */
+#define EH_FRAME_FLAGS "aw"
+
+/* Define this if you want extra debugging. */
+/* #undef FFI_DEBUG */
+
+/* Cannot use PROT_EXEC on this target, so, we revert to alternative means */
+#cmakedefine FFI_EXEC_TRAMPOLINE_TABLE 1
+
+/* Define this if you want to enable pax emulated trampolines */
+#cmakedefine FFI_MMAP_EXEC_EMUTRAMP_PAX 1
+
+/* Cannot use malloc on this target, so, we revert to alternative means */
+/* #undef FFI_MMAP_EXEC_WRIT */
+
+/* Define this if you do not want support for the raw API. */
+/* #undef FFI_NO_RAW_API */
+
+/* Define this if you do not want support for aggregate types. */
+/* #undef FFI_NO_STRUCTS */
+
+/* Define to 1 if you have `alloca', as a function or macro. */
+#cmakedefine HAVE_ALLOCA 1
+
+/* Define to 1 if you have <alloca.h> and it should be used (not on Ultrix).
+   */
+#cmakedefine HAVE_ALLOCA_H 1
+
+/* Define if your assembler supports .ascii. */
+#cmakedefine HAVE_AS_ASCII_PSEUDO_OP 1
+
+/* Define if your assembler supports .cfi_* directives. */
+#cmakedefine HAVE_AS_CFI_PSEUDO_OP 1
+
+/* Define if your assembler supports .register. */
+/* #undef HAVE_AS_REGISTER_PSEUDO_OP */
+
+/* Define if your assembler and linker support unaligned PC relative relocs.
+   */
+/* #undef HAVE_AS_SPARC_UA_PCREL */
+
+/* Define if your assembler supports .string. */
+#cmakedefine HAVE_AS_STRING_PSEUDO_OP 1
+
+/* Define if your assembler supports unwind section type. */
+#cmakedefine HAVE_AS_X86_64_UNWIND_SECTION_TYPE 1
+
+/* Define if your assembler supports PC relative relocs. */
+#cmakedefine HAVE_AS_X86_PCREL 1
+
+/* Define to 1 if you have the <dlfcn.h> header file. */
+#cmakedefine HAVE_DLFCN_H 1
+
+/* Define if __attribute__((visibility("hidden"))) is supported. */
+#cmakedefine HAVE_HIDDEN_VISIBILITY_ATTRIBUTE 1
+
+/* Define to 1 if you have the <inttypes.h> header file. */
+#cmakedefine HAVE_INTTYPES_H 1
+
+/* Define if you have the long double type and it is bigger than a double */
+#cmakedefine HAVE_LONG_DOUBLE 1
+
+/* Define if you support more than one size of the long double type */
+#cmakedefine HAVE_LONG_DOUBLE_VARIANT 1
+
+/* Define to 1 if you have the `memcpy' function. */
+#cmakedefine HAVE_MEMCPY 1
+
+/* Define to 1 if you have the <memory.h> header file. */
+#cmakedefine HAVE_MEMORY_H 1
+
+/* Define to 1 if you have the `mmap' function. */
+#cmakedefine HAVE_MMAP 1
+
+/* Define if mmap with MAP_ANON(YMOUS) works. */
+#cmakedefine HAVE_MMAP_ANON 1
+
+/* Define if mmap of /dev/zero works. */
+#cmakedefine HAVE_MMAP_DEV_ZERO 1
+
+/* Define if read-only mmap of a plain file works. */
+#cmakedefine HAVE_MMAP_FILE 1
+
+/* Define if .eh_frame sections should be read-only. */
+#cmakedefine HAVE_RO_EH_FRAME 1
+
+/* Define to 1 if you have the <stdint.h> header file. */
+#cmakedefine HAVE_STDINT_H 1
+
+/* Define to 1 if you have the <stdlib.h> header file. */
+#cmakedefine HAVE_STDLIB_H 1
+
+/* Define to 1 if you have the <strings.h> header file. */
+#cmakedefine HAVE_STRINGS_H 1
+
+/* Define to 1 if you have the <string.h> header file. */
+#cmakedefine HAVE_STRING_H 1
+
+/* Define to 1 if you have the <sys/mman.h> header file. */
+#cmakedefine HAVE_SYS_MMAN_H 1
+
+/* Define to 1 if you have the <sys/stat.h> header file. */
+#cmakedefine HAVE_SYS_STAT_H 1
+
+/* Define to 1 if you have the <sys/types.h> header file. */
+#cmakedefine HAVE_SYS_TYPES_H 1
+
+/* Define to 1 if you have the <unistd.h> header file. */
+#cmakedefine HAVE_UNISTD_H 1
+
+/* Define to 1 if your C compiler doesn't accept -c and -o together. */
+/* #undef NO_MINUS_C_MINUS_O */
+
+/* Name of package */
+#define PACKAGE "libffi"
+
+/* Define to the address where bug reports for this package should be sent. */
+#define PACKAGE_BUGREPORT "http://github.com/atgreen/libffi/issues"
+
+/* Define to the full name of this package. */
+#define PACKAGE_NAME "libffi"
+
+/* Define to the full name and version of this package. */
+#define PACKAGE_STRING "libffi @LIBFFI_VERSION@"
+
+/* Define to the one symbol short name of this package. */
+#define PACKAGE_TARNAME "libffi"
+
+/* Define to the home page for this package. */
+#define PACKAGE_URL ""
+
+/* Define to the version of this package. */
+#define PACKAGE_VERSION "@LIBFFI_VERSION@"
+
+/* The size of `double', as computed by sizeof. */
+#cmakedefine SIZEOF_DOUBLE @SIZEOF_DOUBLE@
+
+/* The size of `long double', as computed by sizeof. */
+#cmakedefine SIZEOF_LONG_DOUBLE @SIZEOF_LONG_DOUBLE@
+
+/* The size of `size_t', as computed by sizeof. */
+#define SIZEOF_SIZE_T @SIZEOF_SIZE_T@
+
+/* If using the C implementation of alloca, define if you know the
+   direction of stack growth for your system; otherwise it will be
+   automatically deduced at runtime.
+	STACK_DIRECTION > 0 => grows toward higher addresses
+	STACK_DIRECTION < 0 => grows toward lower addresses
+	STACK_DIRECTION = 0 => direction of growth unknown */
+/* #undef STACK_DIRECTION */
+
+/* Define to 1 if you have the ANSI C header files. */
+#cmakedefine STDC_HEADERS 1
+
+/* Define if symbols are underscored. */
+#cmakedefine SYMBOL_UNDERSCORE 1
+
+/* Define this if you are using Purify and want to suppress spurious messages.
+   */
+/* #undef USING_PURIFY */
+
+/* Version number of package */
+#define VERSION "@LIBFFI_VERSION@"
+
+/* Define WORDS_BIGENDIAN to 1 if your processor stores words with the most
+   significant byte first (like Motorola and SPARC, unlike Intel). */
+#if defined AC_APPLE_UNIVERSAL_BUILD
+# if defined __BIG_ENDIAN__
+#  define WORDS_BIGENDIAN 1
+# endif
+#else
+# ifndef WORDS_BIGENDIAN
+/* #  undef WORDS_BIGENDIAN */
+# endif
+#endif
+
+/* Define to `unsigned int' if <sys/types.h> does not define. */
+/* #undef size_t */
+
+#ifdef HAVE_HIDDEN_VISIBILITY_ATTRIBUTE
+#ifdef LIBFFI_ASM
+#define FFI_HIDDEN(name) .hidden name
+#else
+#define FFI_HIDDEN __attribute__ ((visibility ("hidden")))
+#endif
+#else
+#ifdef LIBFFI_ASM
+#define FFI_HIDDEN(name)
+#else
+#define FFI_HIDDEN
+#endif
+#endif
+
--- /dev/null
+++ b/cmake/include/CMakeLists.txt
@@ -0,0 +1,14 @@
+# Install all the header files in Include/
+
+set(includedir ${INCLUDE_BUILD_DIR})
+file(GLOB_RECURSE hfiles RELATIVE ${includedir} "${includedir}/*")
+
+foreach(file ${hfiles})
+    get_filename_component(path ${file} PATH)
+    if(WIN32)
+        file(COPY ${includedir}/${file} DESTINATION ${PROJECT_BINARY_DIR}/${INCLUDE_INSTALL_DIR}/${path})
+    endif()
+    if(INSTALL_DEVELOPMENT)
+        install(FILES ${includedir}/${file} DESTINATION ${INCLUDE_INSTALL_DIR}/${path} COMPONENT Development)
+    endif()
+endforeach()
--- /dev/null
+++ b/cmake/lib/CMakeLists.txt
@@ -0,0 +1,62 @@
+# Install all the python module source from Lib/
+
+set(libdir ${SRC_DIR}/Lib)
+file(GLOB_RECURSE libfiles RELATIVE ${libdir} "${libdir}/*")
+
+if(UNIX)
+    set(plat_subdir "plat-linux2")
+endif()
+
+foreach(file ${libfiles})
+    # Don't install files for other platforms
+    string(REGEX MATCH "^plat-" is_platform_file "${file}")
+    if(plat_subdir)
+        string(REGEX MATCH "^${plat_subdir}" is_matching_platform_file "${file}")
+    endif()
+
+    # Exclude tests if BUILD_TESTING is OFF
+    string(REGEX MATCH "^test" is_test "${file}")
+    set(include_file 1)
+
+    if(is_test AND (NOT BUILD_TESTING OR NOT INSTALL_TEST))
+        set(include_file 0)
+    endif()
+
+    if(include_file AND (NOT is_platform_file OR is_matching_platform_file))
+        get_filename_component(path ${file} PATH)
+
+        # Copy lib files to build tree
+        file(MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/${PYTHONHOME}/${path})
+        file(COPY ${libdir}/${file} DESTINATION ${PROJECT_BINARY_DIR}/${PYTHONHOME}/${path})
+
+        # Install
+        install(FILES ${libdir}/${file} DESTINATION ${PYTHONHOME}/${path})
+
+    endif()
+endforeach()
+
+if(PY_VERSION VERSION_LESS "2.7.5")
+  # Setup landmark allowing to run the interpreter from a build tree. See 'getpath.c' for details.
+  file(MAKE_DIRECTORY ${BIN_BUILD_DIR}/Modules)
+  file(WRITE ${BIN_BUILD_DIR}/Modules/Setup "")
+endif()
+
+# Generate grammar tables in install directory
+# XXX Should a custom target be added to generate file at built time ?
+install(CODE "find_program(
+  PYTHON_EXECUTABLE python
+  HINTS \$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/${BIN_INSTALL_DIR}
+  NO_DEFAULT_PATH)
+set(wrapper)
+if(UNIX)
+  set(_envvar LD_LIBRARY_PATH)
+  if(APPLE)
+    set(_envvar DYLD_LIBRARY_PATH)
+  endif()
+  set(wrapper env \${_envvar}=\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/${LIBPYTHON_LIBDIR})
+endif()
+execute_process(COMMAND \${wrapper} \${PYTHON_EXECUTABLE} -m lib2to3.pgen2.driver
+  \$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/${PYTHONHOME}/lib2to3/Grammar.txt)
+execute_process(COMMAND \${wrapper} \${PYTHON_EXECUTABLE} -m lib2to3.pgen2.driver
+  \$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/${PYTHONHOME}/lib2to3/PatternGrammar.txt)
+")
--- /dev/null
+++ b/cmake/libpython/CMakeLists.txt
@@ -0,0 +1,606 @@
+add_definitions(-DPy_BUILD_CORE)
+add_definitions(-DNDEBUG)
+
+set(MODULE_SOURCES # Equivalent to MODULE_OBJS in Makefile.pre
+    ${PROJECT_BINARY_DIR}/CMakeFiles/config.c
+    ${SRC_DIR}/Modules/gcmodule.c
+    ${SRC_DIR}/Modules/main.c
+)
+if(UNIX)
+    list(APPEND MODULE_SOURCES
+        ${SRC_DIR}/Modules/getpath.c
+    )
+    set(PYTHONPATH "${EXTRA_PYTHONPATH}:lib-dynload:plat-${PY_PLATFORM}")
+    if(ENABLE_TKINTER)
+        set(PYTHONPATH "${PYTHONPATH}:lib-tk")
+    endif()
+    set_property(
+        SOURCE ${SRC_DIR}/Modules/getpath.c
+        PROPERTY COMPILE_DEFINITIONS
+            PREFIX="${CMAKE_INSTALL_PREFIX}"
+            EXEC_PREFIX="${CMAKE_INSTALL_PREFIX}"
+            VERSION="${PY_VERSION_MAJOR}.${PY_VERSION_MINOR}"
+            VPATH="."
+            PYTHONPATH="${PYTHONPATH}"
+      )
+elseif(WIN32)
+    list(APPEND MODULE_SOURCES
+        ${SRC_DIR}/PC/getpathp.c
+    )
+    # HACK To workaround limitation in escaping logic of CMake, the pythonpath
+    #      separator is conditionally set depending of the version of Visual Studio.
+    #      See http://cmake.org/Bug/view.php?id=14073
+    if( ("${MSVC_VERSION}" VERSION_GREATER "1599") AND ("${CMAKE_GENERATOR}" MATCHES "^Visual Studio") )
+        set(PATHSEP "%3B")
+    elseif( (${MSVC}) AND ("${CMAKE_GENERATOR}" MATCHES "^Ninja") )
+        set(PATHSEP "\;")
+    elseif( (${MSVC}) AND ("${CMAKE_GENERATOR}" MATCHES "^NMake") )
+        set(PATHSEP "\;")
+    elseif(MINGW)
+        set(PATHSEP "\;")
+    else()
+        set(PATHSEP ";")
+    endif()
+    string(REPLACE "/" "\\\\" PYTHONHOME_ESCAPED ${PYTHONHOME})
+    string(REPLACE "/" "\\\\" EXTENSION_INSTALL_DIR_ESCAPED ${EXTENSION_INSTALL_DIR})
+    set(PYTHONPATH "${EXTRA_PYTHONPATH}")
+    set(PYTHONPATH "${PYTHONPATH}${PATHSEP}.\\\\${PYTHONHOME_ESCAPED}")
+    set(PYTHONPATH "${PYTHONPATH}${PATHSEP}.\\\\${EXTENSION_INSTALL_DIR_ESCAPED}")
+    set(PYTHONPATH "${PYTHONPATH}${PATHSEP}.\\\\${EXTENSION_INSTALL_DIR_ESCAPED}\\\\${CMAKE_CFG_INTDIR}")
+    set(PYTHONPATH "${PYTHONPATH}${PATHSEP}.\\\\${PYTHONHOME_ESCAPED}\\\\plat-${PY_PLATFORM}")
+    if(ENABLE_TKINTER)
+        set(PYTHONPATH "${PYTHONPATH}${PATHSEP}.\\\\${PYTHONHOME_ESCAPED}\\\\lib-tk")
+    endif()
+
+    set(_wide_char_modifier)
+    if(IS_PY3)
+        set(_wide_char_modifier "L")
+    endif()
+
+    set_property(
+        SOURCE ${SRC_DIR}/PC/getpathp.c
+        PROPERTY COMPILE_DEFINITIONS
+            "LANDMARK=${_wide_char_modifier}\"${PYTHONHOME_ESCAPED}\\\\os.py\""
+            "PYTHONPATH=${_wide_char_modifier}\"${PYTHONPATH}\""
+    )
+endif()
+
+set(PARSER_COMMON_SOURCES # Equivalent to POBJS in Makefile.pre
+    ${SRC_DIR}/Parser/acceler.c
+    ${SRC_DIR}/Parser/bitset.c
+    ${SRC_DIR}/Parser/firstsets.c
+    ${SRC_DIR}/Parser/grammar1.c
+    ${SRC_DIR}/Parser/grammar.c
+    ${SRC_DIR}/Parser/listnode.c
+    ${SRC_DIR}/Parser/metagrammar.c
+    ${SRC_DIR}/Parser/node.c
+    ${SRC_DIR}/Parser/parser.c
+    ${SRC_DIR}/Parser/pgen.c
+)
+
+set(OBJECT2_SOURCES
+    ${SRC_DIR}/Objects/bufferobject.c
+    ${SRC_DIR}/Objects/cobject.c
+    ${SRC_DIR}/Objects/intobject.c
+    ${SRC_DIR}/Objects/stringobject.c
+)
+if(MSVC)
+    if(EXISTS ${SRC_DIR}/PC/invalid_parameter_handler.c)
+        list(APPEND OBJECT2_SOURCES
+            ${SRC_DIR}/PC/invalid_parameter_handler.c
+        )
+    endif()
+endif()
+
+set(OBJECT3_SOURCES
+    ${SRC_DIR}/Objects/accu.c
+    ${SRC_DIR}/Objects/bytesobject.c
+    ${SRC_DIR}/Objects/namespaceobject.c
+    ${SRC_DIR}/Objects/odictobject.c
+)
+if(MSVC)
+    list(APPEND OBJECT3_SOURCES
+        ${SRC_DIR}/PC/invalid_parameter_handler.c
+    )
+endif()
+
+set(OBJECT_COMMON_SOURCES # Equivalent to OBJECT_OBJS in Makefile.pre
+    ${OBJECT${PY_VERSION_MAJOR}_SOURCES}
+    ${SRC_DIR}/Objects/abstract.c
+    ${SRC_DIR}/Objects/boolobject.c
+    ${SRC_DIR}/Objects/bytearrayobject.c
+    ${SRC_DIR}/Objects/bytes_methods.c
+    ${SRC_DIR}/Objects/capsule.c
+    ${SRC_DIR}/Objects/cellobject.c
+    ${SRC_DIR}/Objects/classobject.c
+    ${SRC_DIR}/Objects/codeobject.c
+    ${SRC_DIR}/Objects/complexobject.c
+    ${SRC_DIR}/Objects/descrobject.c
+    ${SRC_DIR}/Objects/dictobject.c
+    ${SRC_DIR}/Objects/enumobject.c
+    ${SRC_DIR}/Objects/exceptions.c
+    ${SRC_DIR}/Objects/fileobject.c
+    ${SRC_DIR}/Objects/floatobject.c
+    ${SRC_DIR}/Objects/frameobject.c
+    ${SRC_DIR}/Objects/funcobject.c
+    ${SRC_DIR}/Objects/genobject.c
+    ${SRC_DIR}/Objects/iterobject.c
+    ${SRC_DIR}/Objects/listobject.c
+    ${SRC_DIR}/Objects/longobject.c
+    ${SRC_DIR}/Objects/memoryobject.c
+    ${SRC_DIR}/Objects/methodobject.c
+    ${SRC_DIR}/Objects/moduleobject.c
+    ${SRC_DIR}/Objects/object.c
+    ${SRC_DIR}/Objects/obmalloc.c
+    ${SRC_DIR}/Objects/rangeobject.c
+    ${SRC_DIR}/Objects/setobject.c
+    ${SRC_DIR}/Objects/sliceobject.c
+    ${SRC_DIR}/Objects/structseq.c
+    ${SRC_DIR}/Objects/tupleobject.c
+    ${SRC_DIR}/Objects/typeobject.c
+    ${SRC_DIR}/Objects/unicodectype.c
+    ${SRC_DIR}/Objects/unicodeobject.c
+    ${SRC_DIR}/Objects/weakrefobject.c
+)
+
+if(CMAKE_C_COMPILER_ID MATCHES GNU)
+    foreach(filename class complex float int method string type unicode weakref)
+        set_property(SOURCE ${SRC_DIR}/Objects/${filename}object.c PROPERTY COMPILE_FLAGS -Wno-unused-value)
+    endforeach()
+endif()
+
+set(DYNLOAD_SOURCES
+  )
+
+if(UNIX AND HAVE_DLOPEN)
+    list(APPEND DYNLOAD_SOURCES
+        ${SRC_DIR}/Python/dynload_shlib.c
+    )
+    if(IS_PY3)
+    set_property(
+        SOURCE ${SRC_DIR}/Python/dynload_shlib.c
+        PROPERTY COMPILE_DEFINITIONS
+            SOABI="${SOABI}"
+        )
+    endif()
+elseif(WIN32)
+    list(APPEND DYNLOAD_SOURCES
+        ${SRC_DIR}/PC/dl_nt.c
+        ${SRC_DIR}/Python/dynload_win.c
+        )
+    set(ms_dll_id "${PY_VERSION_MAJOR}.${PY_VERSION_MINOR}")
+    if(${CMAKE_SIZEOF_VOID_P} EQUAL 4)
+      set(ms_dll_id "${ms_dll_id}-32")
+    endif()
+    set_property(
+        SOURCE ${SRC_DIR}/PC/dl_nt.c
+        PROPERTY COMPILE_DEFINITIONS
+            Py_ENABLE_SHARED
+            MS_DLL_ID="${ms_dll_id}"
+        )
+endif()
+
+set(THREAD_SOURCES )
+if(WITH_THREAD)
+    list(APPEND THREAD_SOURCES
+        ${SRC_DIR}/Python/thread.c
+    )
+endif()
+
+set(PYTHON2_COMMON_SOURCES
+    ${SRC_DIR}/Python/formatter_string.c
+    ${SRC_DIR}/Python/pystrtod.c
+)
+if(WIN32)
+    list(APPEND PYTHON2_COMMON_SOURCES
+        ${SRC_DIR}/PC/import_nt.c
+    )
+endif()
+
+set(PYTHON3_COMMON_SOURCES
+    ${SRC_DIR}/Python/dynamic_annotations.c
+    ${SRC_DIR}/Python/fileutils.c
+    ${SRC_DIR}/Python/pyhash.c
+    ${SRC_DIR}/Python/pylifecycle.c
+    ${SRC_DIR}/Python/pystrhex.c
+    ${SRC_DIR}/Python/pystrtod.c
+    ${SRC_DIR}/Python/pytime.c
+)
+
+set(PYTHON_COMMON_SOURCES
+    ${DYNLOAD_SOURCES}
+    ${PYTHON${PY_VERSION_MAJOR}_COMMON_SOURCES}
+    ${THREAD_SOURCES}
+    ${SRC_DIR}/Python/asdl.c
+    ${SRC_DIR}/Python/ast.c
+    ${SRC_DIR}/Python/bltinmodule.c
+    ${SRC_DIR}/Python/ceval.c
+    ${SRC_DIR}/Python/codecs.c
+    ${SRC_DIR}/Python/compile.c
+    ${SRC_DIR}/Python/dtoa.c
+    ${SRC_DIR}/Python/errors.c
+    ${SRC_DIR}/Python/formatter_unicode.c
+    ${SRC_DIR}/Python/future.c
+    ${SRC_DIR}/Python/getargs.c
+    ${SRC_DIR}/Python/getcompiler.c
+    ${SRC_DIR}/Python/getcopyright.c
+    ${SRC_DIR}/Python/getopt.c
+    ${SRC_DIR}/Python/getplatform.c
+    ${SRC_DIR}/Python/getversion.c
+    ${SRC_DIR}/Python/graminit.c
+    ${SRC_DIR}/Python/import.c
+    ${SRC_DIR}/Python/importdl.c
+    ${SRC_DIR}/Python/marshal.c
+    ${SRC_DIR}/Python/modsupport.c
+    ${SRC_DIR}/Python/mysnprintf.c
+    ${SRC_DIR}/Python/mystrtoul.c
+    ${SRC_DIR}/Python/peephole.c
+    ${SRC_DIR}/Python/pyarena.c
+    ${SRC_DIR}/Python/pyctype.c
+    ${SRC_DIR}/Python/pyfpe.c
+    ${SRC_DIR}/Python/pymath.c
+    ${SRC_DIR}/Python/pystate.c
+    ${SRC_DIR}/Python/pystrcmp.c
+    ${SRC_DIR}/Python/Python-ast.c
+    ${SRC_DIR}/Python/pythonrun.c
+    ${SRC_DIR}/Python/random.c
+    ${SRC_DIR}/Python/structmember.c
+    ${SRC_DIR}/Python/symtable.c
+    ${SRC_DIR}/Python/sysmodule.c
+    ${SRC_DIR}/Python/traceback.c
+    ${SRC_DIR}/Python/_warnings.c
+)
+if(UNIX)
+    list(APPEND PYTHON_COMMON_SOURCES
+        ${SRC_DIR}/Python/frozenmain.c
+    )
+else()
+    list(APPEND PYTHON_COMMON_SOURCES
+        ${SRC_DIR}/Python/frozen.c
+    )
+endif()
+
+if(UNIX OR MINGW)
+    set_property(
+        SOURCE ${SRC_DIR}/Python/getplatform.c
+        PROPERTY COMPILE_DEFINITIONS
+            PLATFORM="${PY_PLATFORM}"
+    )
+    if(IS_PY3)
+    set_property(
+        SOURCE ${SRC_DIR}/Python/sysmodule.c
+        PROPERTY COMPILE_DEFINITIONS
+            ABIFLAGS="${ABIFLAGS}"
+        )
+    endif()
+endif()
+
+list(APPEND MODULE_SOURCES
+    ${SRC_DIR}/Modules/_codecsmodule.c
+    ${SRC_DIR}/Modules/errnomodule.c
+    ${SRC_DIR}/Modules/signalmodule.c
+    ${SRC_DIR}/Modules/_sre.c
+    ${SRC_DIR}/Modules/symtablemodule.c
+    ${SRC_DIR}/Modules/_weakref.c
+    ${SRC_DIR}/Modules/xxsubtype.c
+    ${SRC_DIR}/Modules/zipimport.c
+)
+
+set(LIBPYTHON_OMIT_FROZEN_SOURCES
+    ${SRC_DIR}/Modules/getbuildinfo.c
+    ${SRC_DIR}/Parser/myreadline.c
+    ${SRC_DIR}/Parser/parsetok.c
+    ${SRC_DIR}/Parser/tokenizer.c
+    ${MODULE_SOURCES}
+    ${OBJECT_COMMON_SOURCES}
+    ${PARSER_COMMON_SOURCES}
+    ${PYTHON_COMMON_SOURCES}
+)
+
+# List of builtin extensions
+get_property(builtin_extensions GLOBAL PROPERTY builtin_extensions)
+
+# Collect builtin extension sources
+set(builtin_extension_sources)
+foreach(name ${builtin_extensions})
+    get_property(extension_${name}_sources GLOBAL PROPERTY extension_${name}_sources)
+    list(APPEND builtin_extension_sources ${extension_${name}_sources})
+endforeach()
+
+# XXX Associate Py_NO_ENABLE_SHARED with "_ctypes/callbacks.c" if corresponding
+#     extension is builtin.
+if(WIN32)
+    foreach(src ${builtin_extension_sources})
+        get_filename_component(filename ${src} NAME)
+        if(${filename} STREQUAL "callbacks.c")
+            set_property(SOURCE ${src} APPEND PROPERTY COMPILE_DEFINITIONS Py_NO_ENABLE_SHARED)
+        endif()
+    endforeach()
+endif()
+list(APPEND LIBPYTHON_OMIT_FROZEN_SOURCES ${builtin_extension_sources})
+
+# Collect builtin extension link libraries
+set(builtin_link_libraries)
+foreach(name ${builtin_extensions})
+    get_property(extension_${name}_link_libraries GLOBAL PROPERTY extension_${name}_link_libraries)
+    list(APPEND builtin_link_libraries ${extension_${name}_link_libraries})
+endforeach()
+
+# Collect builtin extension includedirs
+set(builtin_includedirs)
+foreach(name ${builtin_extensions})
+    get_property(extension_${name}_includedirs GLOBAL PROPERTY extension_${name}_includedirs)
+    list(APPEND builtin_includedirs ${extension_${name}_includedirs})
+endforeach()
+
+# Collect builtin extension definitions
+set(builtin_compile_definitions_without_py_limited_api)
+foreach(name ${builtin_extensions})
+    get_property(extension_${name}_definitions GLOBAL PROPERTY extension_${name}_definitions)
+    if(extension_${name}_definitions)
+        set_property(SOURCE ${extension_${name}_sources}
+            APPEND PROPERTY COMPILE_DEFINITIONS ${extension_${name}_definitions})
+        if(NOT ${name} STREQUAL "xxlimited")
+            list(APPEND builtin_compile_definitions_without_py_limited_api ${extension_${name}_definitions})
+        endif()
+    endif()
+endforeach()
+
+include_directories(${builtin_includedirs})
+
+# Create the parts of config.c for platform-specific and user-controlled
+# builtin modules.
+set(init_return_type_2 "void")
+set(init_prefix_2 "init")
+
+set(init_return_type_3 "PyObject*")
+set(init_prefix_3 "PyInit_")
+
+set(config_inits "")
+set(config_entries "")
+foreach(ext ${builtin_extensions})
+    set(config_inits "${config_inits}extern ${init_return_type_${PY_VERSION_MAJOR}} ${init_prefix_${PY_VERSION_MAJOR}}${ext}(void);\n")
+    set(config_entries "${config_entries}    {\"${ext}\", ${init_prefix_${PY_VERSION_MAJOR}}${ext}},\n")
+endforeach()
+
+configure_file(
+    ${PROJECT_SOURCE_DIR}/cmake/config_${PY_VERSION_MAJOR}.c.in
+    ${PROJECT_BINARY_DIR}/CMakeFiles/config.c
+    )
+
+# Collect libpython target libraries
+set(LIBPYTHON_TARGET_LIBRARIES
+  ${builtin_link_libraries}
+  )
+if(HAVE_LIBDL)
+  list(APPEND LIBPYTHON_TARGET_LIBRARIES ${HAVE_LIBDL})
+endif()
+if(WITH_THREAD)
+    list(APPEND LIBPYTHON_TARGET_LIBRARIES ${CMAKE_THREAD_LIBS_INIT})
+endif()
+if(UNIX)
+    list(APPEND LIBPYTHON_TARGET_LIBRARIES ${LIBUTIL_LIBRARIES} ${M_LIBRARIES})
+endif()
+if(WIN32 AND IS_PY3)
+    list(APPEND LIBPYTHON_TARGET_LIBRARIES ws2_32) # Required by signalmodule
+    if(PYTHON_VERSION VERSION_EQUAL "3.5" OR PYTHON_VERSION VERSION_GREATER "3.5")
+        list(APPEND LIBPYTHON_TARGET_LIBRARIES version) # Required by sysmodule
+    endif()
+    if(PYTHON_VERSION VERSION_EQUAL "3.6" OR PYTHON_VERSION VERSION_GREATER "3.6")
+        list(APPEND LIBPYTHON_TARGET_LIBRARIES shlwapi) # Required by PC/getpathp
+    endif()
+endif()
+
+set(LIBPYTHON_FROZEN_SOURCES )
+if(IS_PY3)
+
+# Build _freeze_importlib executable
+add_executable(_freeze_importlib
+  ${SRC_DIR}/Programs/_freeze_importlib.c
+  ${LIBPYTHON_OMIT_FROZEN_SOURCES}
+  )
+target_link_libraries(_freeze_importlib ${LIBPYTHON_TARGET_LIBRARIES})
+if(builtin_compile_definitions_without_py_limited_api)
+  target_compile_definitions(_freeze_importlib PUBLIC ${builtin_compile_definitions_without_py_limited_api})
+endif()
+
+# Freeze modules
+set(LIBPYTHON_FROZEN_SOURCES
+  ${SRC_DIR}/Python/importlib_external.h
+  ${SRC_DIR}/Python/importlib.h
+)
+add_custom_command(
+  OUTPUT ${LIBPYTHON_FROZEN_SOURCES}
+  COMMAND
+    ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:_freeze_importlib>
+      ${SRC_DIR}/Lib/importlib/_bootstrap_external.py
+      ${SRC_DIR}/Python/importlib_external.h
+  COMMAND
+    ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:_freeze_importlib>
+      ${SRC_DIR}/Lib/importlib/_bootstrap.py
+      ${SRC_DIR}/Python/importlib.h
+  DEPENDS
+    _freeze_importlib
+    ${SRC_DIR}/Lib/importlib/_bootstrap_external.py
+    ${SRC_DIR}/Lib/importlib/_bootstrap.py
+)
+
+# This is a convenience target allowing to regenerate
+# the frozen sources.
+add_custom_target(freeze_modules DEPENDS ${LIBPYTHON_FROZEN_SOURCES})
+
+endif()
+
+# Build pgen executable
+set(PGEN2_SOURCES
+    ${SRC_DIR}/Parser/parsetok.c
+)
+set(PGEN3_SOURCES
+    ${SRC_DIR}/Python/dynamic_annotations.c
+    ${SRC_DIR}/Parser/parsetok_pgen.c
+)
+add_executable(pgen
+    ${PARSER_COMMON_SOURCES}
+    ${PGEN${PY_VERSION_MAJOR}_SOURCES}
+    ${SRC_DIR}/Objects/obmalloc.c
+    ${SRC_DIR}/Python/mysnprintf.c
+    ${SRC_DIR}/Python/pyctype.c
+    ${SRC_DIR}/Parser/tokenizer_pgen.c
+    ${SRC_DIR}/Parser/printgrammar.c
+    ${SRC_DIR}/Parser/pgenmain.c
+)
+if(builtin_compile_definitions_without_py_limited_api)
+  target_compile_definitions(pgen PUBLIC ${builtin_compile_definitions_without_py_limited_api})
+endif()
+
+# Collect libpython sources
+set(LIBPYTHON_SOURCES
+    ${LIBPYTHON_OMIT_FROZEN_SOURCES}
+    ${LIBPYTHON_FROZEN_SOURCES}
+)
+if(UNIX)
+    list(APPEND LIBPYTHON_SOURCES
+        ${SRC_DIR}/Python/frozen.c
+    )
+endif()
+
+# Build python libraries
+function(add_libpython name type install component)
+    add_library(${name} ${type} ${LIBPYTHON_SOURCES})
+    target_link_libraries(${name} ${LIBPYTHON_TARGET_LIBRARIES})
+
+    if(MSVC)
+        # Explicitly disable COMDAT folding. Note that this was not required
+        # in the original "pcbuild.sln" solution file because it was side effect
+        # of having "/Zi" flag set.
+        set_target_properties(${name} PROPERTIES LINK_FLAGS /OPT:NOICF)
+    endif()
+
+    set_target_properties(${name} PROPERTIES
+        OUTPUT_NAME ${LIBPYTHON}${ABIFLAGS}
+        LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/${LIBPYTHON_LIBDIR}
+        RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/${LIBPYTHON_LIBDIR}
+        INSTALL_NAME_DIR ${CMAKE_INSTALL_PREFIX}/${LIBPYTHON_LIBDIR}
+    )
+    if(HAVE_POSITION_INDEPENDENT_CODE)
+        set_target_properties(${name} PROPERTIES
+            POSITION_INDEPENDENT_CODE ON
+        )
+    endif()
+
+    # Export target
+    set_property(GLOBAL APPEND PROPERTY PYTHON_TARGETS ${name})
+
+    if(install)
+        install(TARGETS ${name} EXPORT PythonTargets
+            ARCHIVE DESTINATION ${LIBPYTHON_ARCHIVEDIR}
+            LIBRARY DESTINATION ${LIBPYTHON_LIBDIR}
+            RUNTIME DESTINATION ${LIBPYTHON_LIBDIR}
+            COMPONENT ${component}
+        )
+    endif()
+endfunction()
+
+if(BUILD_LIBPYTHON_SHARED)
+    add_libpython(libpython-shared SHARED 1 Runtime)
+    set_target_properties(libpython-shared PROPERTIES
+        ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/${LIBPYTHON_ARCHIVEDIR}
+    )
+    if(APPLE)
+        # HACK For python <= 2.7.3, this fix link error related to undefined _environ symbol and
+        #      is equivalent to solution implemented in commit http://hg.python.org/cpython/rev/864b983
+        #      The property is set here because source file properties can't be in one directory
+        #      and used to build a target in an other directory.
+        set_property(
+            SOURCE ${SRC_DIR}/Modules/posixmodule.c
+            APPEND PROPERTY COMPILE_DEFINITIONS WITH_NEXT_FRAMEWORK)
+    endif()
+
+    set(targetname "libpython3-shared")
+
+    if(IS_PY3 AND MSVC)
+        # XXX Add BuildPython3_dDef
+
+        # Generate 'python3stub.def'
+        set(pythonstub_def ${PROJECT_BINARY_DIR}/${LIBPYTHON_ARCHIVEDIR}/${CMAKE_CFG_INTDIR}/python3stub.def)
+        add_custom_command(
+            OUTPUT ${pythonstub_def}
+            COMMAND ${CMAKE_COMMAND}
+                -DINPUT_DEF_FILE:PATH=${SRC_DIR}/PC/python3.def
+                -DOUTPUT_DEF_FILE:PATH=${PROJECT_BINARY_DIR}/CMakeFiles/python3stub.def
+                -P ${CMAKE_CURRENT_SOURCE_DIR}/generate_libpythonstub_def.cmake
+            COMMAND ${CMAKE_COMMAND} -E copy_if_different
+                ${PROJECT_BINARY_DIR}/CMakeFiles/python3stub.def
+                ${pythonstub_def}
+        )
+        add_custom_target(generate_libpythonstub_def DEPENDS ${pythonstub_def})
+
+        # Build 'python3.dll'
+        add_library(${targetname} SHARED ${SRC_DIR}/PC/python3dll.c ${SRC_DIR}/PC/python3.def)
+        set_target_properties(${targetname} PROPERTIES
+            OUTPUT_NAME python3
+            LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/${LIBPYTHON_LIBDIR}
+            RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/${LIBPYTHON_LIBDIR}
+            INSTALL_NAME_DIR ${CMAKE_INSTALL_PREFIX}/${LIBPYTHON_LIBDIR}
+        )
+        add_dependencies(${targetname} generate_libpythonstub_def)
+
+        # Build 'python3stub.lib' before linking 'python3.dll'
+        set(python3stub_lib ${PROJECT_BINARY_DIR}/${LIBPYTHON_ARCHIVEDIR}/${CMAKE_CFG_INTDIR}/python3stub.lib)
+        set(machine X86)
+        if(${CMAKE_SIZEOF_VOID_P} EQUAL 8)
+            set(machine X64)
+        endif()
+        add_custom_command(
+            TARGET ${targetname} PRE_LINK
+            COMMAND lib /nologo /def:${pythonstub_def} /out:${python3stub_lib} /MACHINE:${machine}
+            COMMENT "Rebuilding python3stub.lib"
+            VERBATIM
+        )
+
+        target_link_libraries(${targetname} ${python3stub_lib})
+    endif()
+
+    if(IS_PY3 AND UNIX AND NOT APPLE)
+        add_library(${targetname} SHARED ${PROJECT_SOURCE_DIR}/cmake/empty.c)
+        set_target_properties(${targetname} PROPERTIES
+            LINK_FLAGS "-Wl,--no-as-needed"
+            OUTPUT_NAME python3
+            LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/${LIBPYTHON_LIBDIR}
+            RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/${LIBPYTHON_LIBDIR}
+            INSTALL_NAME_DIR ${CMAKE_INSTALL_PREFIX}/${LIBPYTHON_LIBDIR}
+        )
+        target_link_libraries(${targetname} libpython-shared)
+    endif()
+
+    # Export target
+    if(TARGET ${targetname})
+        set_property(GLOBAL APPEND PROPERTY PYTHON_TARGETS ${targetname})
+
+        install(TARGETS ${targetname} EXPORT PythonTargets
+            ARCHIVE DESTINATION ${LIBPYTHON_ARCHIVEDIR}
+            LIBRARY DESTINATION ${LIBPYTHON_LIBDIR}
+            RUNTIME DESTINATION ${LIBPYTHON_LIBDIR}
+        )
+    endif()
+
+endif()
+
+if(NOT BUILD_LIBPYTHON_SHARED)
+    add_libpython(libpython-static STATIC ${INSTALL_DEVELOPMENT} Development)
+    if(HAVE_TARGET_COMPILE_DEFINITIONS)
+        target_compile_definitions(libpython-static PUBLIC Py_NO_ENABLE_SHARED)
+    else()
+        set_target_properties(libpython-static PROPERTIES
+            COMPILE_DEFINITIONS Py_NO_ENABLE_SHARED
+        )
+    endif()
+    set_target_properties(libpython-static PROPERTIES
+        ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/${LIBPYTHON_STATIC_ARCHIVEDIR}
+    )
+    if(INSTALL_DEVELOPMENT)
+        install(TARGETS libpython-static
+            ARCHIVE DESTINATION ${PYTHONHOME}/config/
+            COMPONENT Development)
+    endif()
+endif()
--- /dev/null
+++ b/cmake/libpython/generate_libpythonstub_def.cmake
@@ -0,0 +1,16 @@
+# Sanity checks
+foreach(varname INPUT_DEF_FILE OUTPUT_DEF_FILE)
+  if(NOT DEFINED ${varname})
+    message(FATAL_ERROR "Variable '${varname}' is not defined.")
+  endif()
+endforeach()
+
+file(STRINGS ${INPUT_DEF_FILE} def_lines REGEX "^  (.+)=.+$")
+set(stub_def_lines "EXPORTS\n")
+foreach(line IN LISTS def_lines)
+  string(REGEX MATCH "^  (.+)=.+$" output ${line})
+  if(NOT "${output}" STREQUAL "")
+    set(stub_def_lines "${stub_def_lines}${CMAKE_MATCH_1}\n")
+  endif()
+endforeach()
+file(WRITE ${OUTPUT_DEF_FILE} "${stub_def_lines}")
--- /dev/null
+++ b/cmake/makefile-variables.in
@@ -0,0 +1,203 @@
+# === Variables set by makesetup ===
+
+MODOBJS=
+MODLIBS=
+
+# === Variables set by configure
+VERSION=    @LIBPYTHON_VERSION@
+srcdir=     @SRC_DIR@
+
+
+CC=		@CMAKE_C_COMPILER@ @CMAKE_C_COMPILER_ARG1@ -pthread
+CXX=		@CMAKE_CXX_COMPILER@ @CMAKE_CXX_COMPILER_ARG1@ -pthread
+MAINCC=		$(CC)
+LINKCC=		$(PURIFY) $(MAINCC)
+AR=		@CMAKE_AR@
+RANLIB=		@CMAKE_RANLIB@
+SOABI=		@SOABI@
+LDVERSION=	$(VERSION)$(ABIFLAGS)
+SVNVERSION=	svnversion $(srcdir)
+HGVERSION=
+HGTAG=
+HGBRANCH=
+
+GNULD=          yes
+
+# Shell used by make (some versions default to the login shell, which is bad)
+SHELL=      /bin/sh
+
+# Use this to make a link between python$(VERSION) and python in $(BINDIR)
+LN=         ln
+
+# Portable install script (configure doesn't always guess right)
+INSTALL=    /usr/bin/install -c
+INSTALL_PROGRAM=${INSTALL}
+INSTALL_SCRIPT= ${INSTALL}
+INSTALL_DATA=	${INSTALL} -m 644
+# Shared libraries must be installed with executable mode on some systems;
+# rather than figuring out exactly which, we always give them executable mode.
+# Also, making them read-only seems to be a good idea...
+INSTALL_SHARED= ${INSTALL} -m 555
+
+MAKESETUP=      $(srcdir)/Modules/makesetup
+
+# Compiler options
+OPT=            @CMAKE_C_FLAGS@ -DNDEBUG
+BASECFLAGS=	 -Wno-unused-result -Wsign-compare -Wunreachable-code
+CFLAGS=         @CMAKE_C_FLAGS@
+# Both CPPFLAGS and LDFLAGS need to contain the shell's value for setup.py to
+# be able to build extension modules using the directories specified in the
+# environment variables
+CPPFLAGS=       @CMAKE_CXX_FLAGS@
+LDFLAGS=
+LDLAST=
+SGI_ABI=
+CCSHARED=       -fPIC
+LINKFORSHARED=  -Xlinker -export-dynamic
+ARFLAGS=        rc
+# Extra C flags added for building the interpreter object files.
+CFLAGSFORSHARED=
+# C flags used for building the interpreter object files
+PY_CFLAGS=      @CMAKE_C_FLAGS@ -DPy_BUILD_CORE
+
+
+# Machine-dependent subdirectories
+MACHDEP=        @PY_PLATFORM@
+
+# Install prefix for architecture-independent files
+prefix=         @CMAKE_INSTALL_PREFIX@
+
+# Install prefix for architecture-dependent files
+exec_prefix=    ${prefix}
+
+# Install prefix for data files
+datarootdir=    ${prefix}/share
+
+# Expanded directories
+BINDIR=		${exec_prefix}/bin
+LIBDIR=		${exec_prefix}/lib
+MANDIR=		${datarootdir}/man
+INCLUDEDIR=	${prefix}/include
+CONFINCLUDEDIR=	$(exec_prefix)/include
+SCRIPTDIR=	$(prefix)/lib
+ABIFLAGS=	@ABIFLAGS@
+
+# Detailed destination directories
+BINLIBDEST=	$(LIBDIR)/python$(VERSION)
+LIBDEST=	$(SCRIPTDIR)/python$(VERSION)
+INCLUDEPY=	$(INCLUDEDIR)/python$(LDVERSION)
+CONFINCLUDEPY=	$(CONFINCLUDEDIR)/python$(LDVERSION)
+LIBP=		$(LIBDIR)/python$(VERSION)
+
+# Symbols used for using shared libraries
+SHLIB_SUFFIX=	.so
+EXT_SUFFIX=	.$(SOABI).so
+SO=		.so
+LDSHARED=	$(CC) @MAKEFILE_LDSHARED_FLAGS@ $(LDFLAGS)
+BLDSHARED=	$(CC) @MAKEFILE_LDSHARED_FLAGS@ $(LDFLAGS)
+LDCXXSHARED=	$(CXX) @MAKEFILE_LDSHARED_FLAGS@
+DESTSHARED=	$(BINLIBDEST)/lib-dynload
+
+# Executable suffix (.exe on Windows and Mac OS X)
+EXE=            @CMAKE_EXECUTABLE_SUFFIX@
+BUILDEXE=       @CMAKE_EXECUTABLE_SUFFIX@
+
+# Short name and location for Mac OS X Python framework
+UNIVERSALSDK=
+PYTHONFRAMEWORK=
+PYTHONFRAMEWORKDIR=    no-framework
+PYTHONFRAMEWORKPREFIX=
+PYTHONFRAMEWORKINSTALLDIR=
+# Deployment target selected during configure, to be checked
+# by distutils. The export statement is needed to ensure that the
+# deployment target is active during build.
+MACOSX_DEPLOYMENT_TARGET=@CMAKE_OSX_DEPLOYMENT_TARGET@
+#export MACOSX_DEPLOYMENT_TARGET
+
+# Environment to run shared python without installed libraries
+RUNSHARED=
+
+# Modes for directories, executables and data files created by the
+# install process.  Default to user-only-writable for all file types.
+DIRMODE=    755
+EXEMODE=    755
+FILEMODE=    644
+
+# configure script arguments
+CONFIG_ARGS=	 '--prefix' '@CMAKE_INSTALL_PREFIX@'
+
+# Subdirectories with code
+SRCDIRS= 	Parser Grammar Objects Python Modules Mac
+
+# Other subdirectories
+SUBDIRSTOO=	Include Lib Misc Demo
+
+# Files and directories to be distributed
+CONFIGFILES=	configure configure.in acconfig.h pyconfig.h.in Makefile.pre.in
+DISTFILES=	README ChangeLog $(CONFIGFILES)
+DISTDIRS=	$(SUBDIRS) $(SUBDIRSTOO) Ext-dummy
+DIST=		$(DISTFILES) $(DISTDIRS)
+
+LIBRARY=	libpython$(VERSION)$(ABIFLAGS).a
+LDLIBRARY=      libpython$(VERSION)$(ABIFLAGS).a
+BLDLIBRARY=     $(LDLIBRARY)
+DLLLIBRARY=
+LDLIBRARYDIR=
+INSTSONAME=	$(LDLIBRARY)
+
+
+LIBS=		-lpthread -ldl  -lutil
+LIBM=		-lm
+LIBC=
+SYSLIBS=	$(LIBM) $(LIBC)
+SHLIBS=		$(LIBS)
+
+PYTHON=		python$(EXE)
+BUILDPYTHON=	python$(BUILDEXE)
+
+PYTHON_FOR_BUILD=./$(BUILDPYTHON) -E
+_PYTHON_HOST_PLATFORM=
+BUILD_GNU_TYPE=	x86_64-unknown-linux-gnu
+HOST_GNU_TYPE=	x86_64-unknown-linux-gnu
+
+# === Definitions added by makesetup ===
+
+LOCALMODLIBS=
+BASEMODLIBS=
+GLHACK=-Dclear=__GLclear
+PYTHONPATH=$(COREPYTHONPATH)
+COREPYTHONPATH=$(DESTPATH)$(SITEPATH)$(TESTPATH)$(MACHDEPPATH)$(EXTRAMACHDEPPATH)$(TKPATH)$(OLDPATH)
+OLDPATH=:lib-old
+TKPATH=:lib-tk
+EXTRAMACHDEPPATH=
+MACHDEPPATH=:plat-$(MACHDEP)
+TESTPATH=
+SITEPATH=
+DESTPATH=
+MACHDESTLIB=$(BINLIBDEST)
+DESTLIB=$(LIBDEST)
+
+
+LIBFFI_INCLUDEDIR=
+
+
+#########################################################################
+# Rules
+
+# This rule is here for OPENSTEP/Rhapsody/MacOSX. It builds a temporary
+# minimal framework (not including the Lib directory and such) in the current
+# directory.
+RESSRCDIR=Mac/Resources/framework
+
+# Install the library
+PLATDIR=	plat-$(MACHDEP)
+EXTRAPLATDIR=
+EXTRAMACHDEPPATH=
+
+# Install the library and miscellaneous stuff needed for extending/embedding
+# This goes into $(exec_prefix)
+LIBPL=		$(LIBP)/config
+
+# pkgconfig directory
+LIBPC=		$(LIBDIR)/pkgconfig
+
--- /dev/null
+++ b/cmake/platform.c
@@ -0,0 +1,125 @@
+// Based on code in Python's `configure` script (see conftest.c)
+
+#include <stdio.h>
+
+#undef bfin
+#undef cris
+#undef fr30
+#undef linux
+#undef hppa
+#undef hpux
+#undef i386
+#undef mips
+#undef powerpc
+#undef sparc
+#undef unix
+
+char *PLATFORM_TRIPLET =
+
+#if defined(__linux__)
+# if defined(__x86_64__) && defined(__LP64__)
+        "x86_64-linux-gnu"
+# elif defined(__x86_64__) && defined(__ILP32__)
+        "x86_64-linux-gnux32"
+# elif defined(__i386__)
+        "i386-linux-gnu"
+# elif defined(__aarch64__) && defined(__AARCH64EL__)
+#  if defined(__ILP32__)
+        "aarch64_ilp32-linux-gnu"
+#  else
+        "aarch64-linux-gnu"
+#  endif
+# elif defined(__aarch64__) && defined(__AARCH64EB__)
+#  if defined(__ILP32__)
+        "aarch64_be_ilp32-linux-gnu"
+#  else
+        "aarch64_be-linux-gnu"
+#  endif
+# elif defined(__alpha__)
+        "alpha-linux-gnu"
+# elif defined(__ARM_EABI__) && defined(__ARM_PCS_VFP)
+#  if defined(__ARMEL__)
+        "arm-linux-gnueabihf"
+#  else
+        "armeb-linux-gnueabihf"
+#  endif
+# elif defined(__ARM_EABI__) && !defined(__ARM_PCS_VFP)
+#  if defined(__ARMEL__)
+        "arm-linux-gnueabi"
+#  else
+        "armeb-linux-gnueabi"
+#  endif
+# elif defined(__hppa__)
+        "hppa-linux-gnu"
+# elif defined(__ia64__)
+        "ia64-linux-gnu"
+# elif defined(__m68k__) && !defined(__mcoldfire__)
+        "m68k-linux-gnu"
+# elif defined(__mips_hard_float) && defined(_MIPSEL)
+#  if _MIPS_SIM == _ABIO32
+        "mipsel-linux-gnu"
+#  elif _MIPS_SIM == _ABIN32
+        "mips64el-linux-gnuabin32"
+#  elif _MIPS_SIM == _ABI64
+        "mips64el-linux-gnuabi64"
+#  else
+#       "unknown platform triplet"
+#  endif
+# elif defined(__mips_hard_float)
+#  if _MIPS_SIM == _ABIO32
+        "mips-linux-gnu"
+#  elif _MIPS_SIM == _ABIN32
+        "mips64-linux-gnuabin32"
+#  elif _MIPS_SIM == _ABI64
+        "mips64-linux-gnuabi64"
+#  else
+#       "unknown platform triplet"
+#  endif
+# elif defined(__or1k__)
+        "or1k-linux-gnu"
+# elif defined(__powerpc__) && defined(__SPE__)
+        "powerpc-linux-gnuspe"
+# elif defined(__powerpc64__)
+#  if defined(__LITTLE_ENDIAN__)
+        "powerpc64le-linux-gnu"
+#  else
+        "powerpc64-linux-gnu"
+#  endif
+# elif defined(__powerpc__)
+        "powerpc-linux-gnu"
+# elif defined(__s390x__)
+        "s390x-linux-gnu"
+# elif defined(__s390__)
+        "s390-linux-gnu"
+# elif defined(__sh__) && defined(__LITTLE_ENDIAN__)
+        "sh4-linux-gnu"
+# elif defined(__sparc__) && defined(__arch64__)
+        "sparc64-linux-gnu"
+# elif defined(__sparc__)
+        "sparc-linux-gnu"
+# else
+#       "unknown platform triplet"
+# endif
+#elif defined(__FreeBSD_kernel__)
+# if defined(__LP64__)
+        "x86_64-kfreebsd-gnu"
+# elif defined(__i386__)
+        "i386-kfreebsd-gnu"
+# else
+#       "unknown platform triplet"
+# endif
+#elif defined(__gnu_hurd__)
+        "i386-gnu"
+#elif defined(__APPLE__)
+        "darwin"
+#else
+#       "unknown platform triplet"
+#endif
+                                  ;
+
+int main()
+{
+    printf("%s", PLATFORM_TRIPLET);
+
+    return 0;
+}
--- /dev/null
+++ b/cmake/python.pc.in
@@ -0,0 +1,12 @@
+prefix=@CMAKE_INSTALL_PREFIX@
+exec_prefix=${prefix}
+libdir=${exec_prefix}/lib
+includedir=${prefix}/include
+
+Name: Python
+Description: Python library
+Requires:
+Version: @LIBPYTHON_VERSION@
+Libs.private: -lpthread -ldl  -lutil
+Libs: -L${libdir} -l@LIBPYTHON@
+Cflags: -I${includedir}/@LIBPYTHON@
--- /dev/null
+++ b/cmake/python/CMakeLists.txt
@@ -0,0 +1,108 @@
+set(subdir_2  Modules)
+set(subdir_3  Programs)
+
+set(PYTHON_SOURCES
+    ${SRC_DIR}/${subdir_${PY_VERSION_MAJOR}}/python.c
+)
+
+add_executable(python ${PYTHON_SOURCES})
+set_property(
+    TARGET python
+    PROPERTY RUNTIME_OUTPUT_DIRECTORY ${BIN_BUILD_DIR}
+    )
+
+# Link against the shared libpython if it was built, otherwise use the static
+# version.
+if(BUILD_LIBPYTHON_SHARED)
+    target_link_libraries(python libpython-shared)
+else()
+    target_link_libraries(python libpython-static)
+    set_target_properties(python PROPERTIES
+        COMPILE_DEFINITIONS Py_NO_ENABLE_SHARED
+        ENABLE_EXPORTS ON
+    )
+endif()
+
+if(MSVC)
+    set_target_properties(python PROPERTIES LINK_FLAGS /STACK:2000000)
+endif()
+
+# Export target
+set_property(GLOBAL APPEND PROPERTY PYTHON_TARGETS python)
+
+install(TARGETS python EXPORT PythonTargets RUNTIME DESTINATION ${BIN_INSTALL_DIR} COMPONENT Runtime)
+
+# See "is_python_build()" in sysconfig.py
+add_custom_command(TARGET python PRE_BUILD
+    COMMAND ${CMAKE_COMMAND} -E make_directory ${BIN_BUILD_DIR}/${CMAKE_CFG_INTDIR}/Modules
+    COMMAND ${CMAKE_COMMAND} -E touch ${BIN_BUILD_DIR}/${CMAKE_CFG_INTDIR}/Modules/Setup.local
+    COMMENT "Creating '${BIN_INSTALL_DIR}/${CMAKE_CFG_INTDIR}/Modules/Setup.local'"
+    )
+
+if(WIN32)
+    # See "get_config_h_filename()" in sysconfig.py
+    add_custom_command(TARGET python POST_BUILD
+        COMMAND ${CMAKE_COMMAND} -E make_directory ${BIN_BUILD_DIR}/${CMAKE_CFG_INTDIR}/PC
+        COMMAND ${CMAKE_COMMAND} -E copy_if_different ${SRC_DIR}/PC/pyconfig.h ${BIN_BUILD_DIR}/${CMAKE_CFG_INTDIR}/PC/pyconfig.h
+        COMMENT "Copying 'pyconfig.h' to '${BIN_INSTALL_DIR}/${CMAKE_CFG_INTDIR}/PC'"
+        )
+endif()
+
+if(UNIX AND PY_VERSION VERSION_GREATER "2.7.4")
+    # Setup landmark allowing to run the interpreter from a build tree. See 'getpath.c' for details.
+    set(_sysconfigdata_py "_sysconfigdata.py")
+    if("${PY_VERSION}" VERSION_EQUAL "3.6.0" OR "${PY_VERSION}" VERSION_GREATER "3.6.0")
+        # XXX Add support for _PYTHON_SYSCONFIGDATA_NAME env. variable
+        set(MULTIARCH "")
+        set(_sysconfigdata_py "_sysconfigdata_${ABIFLAGS}_${PY_PLATFORM}_${MULTIARCH}.py")
+    endif()
+    add_custom_command(
+        OUTPUT ${BIN_BUILD_DIR}/pybuilddir.txt ${EXTENSION_BUILD_DIR}/${_sysconfigdata_py}
+        COMMAND ${PYTHON_WRAPPER_COMMAND}
+          ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:python> -E -S -m sysconfig --generate-posix-vars
+        COMMAND ${CMAKE_COMMAND}
+          -DBIN_BUILD_DIR:PATH=${BIN_BUILD_DIR}
+          -DSYSCONFIGDATA_PY:STRING=${_sysconfigdata_py}
+          -DPYTHON_BINARY_DIR:PATH=${PROJECT_BINARY_DIR}
+          -DEXTENSION_INSTALL_DIR:PATH=${EXTENSION_INSTALL_DIR}
+          -P ${PROJECT_SOURCE_DIR}/cmake/UpdateSysconfig.cmake
+        COMMENT "Relocate ${_sysconfigdata_py} and update pybuilddir.txt"
+        WORKING_DIRECTORY ${BIN_BUILD_DIR}
+        DEPENDS python
+        )
+    add_custom_target(update_sysconfig ALL
+        DEPENDS ${BIN_BUILD_DIR}/pybuilddir.txt ${EXTENSION_BUILD_DIR}/${_sysconfigdata_py}
+        )
+    install(FILES ${EXTENSION_BUILD_DIR}/${_sysconfigdata_py}
+        DESTINATION ${PYTHONHOME}/)
+endif()
+
+if(UNIX AND NOT CMAKE_CROSSCOMPILING)
+  install(CODE
+"message(STATUS \"Creating Python executable symlinks...\")
+execute_process(
+  COMMAND \${CMAKE_COMMAND} -E create_symlink python
+    python${PY_VERSION_MAJOR}
+  COMMAND \${CMAKE_COMMAND} -E create_symlink python
+    python${PY_VERSION_MAJOR}.${PY_VERSION_MINOR}
+  WORKING_DIRECTORY
+    \$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/${BIN_INSTALL_DIR}
+  )"
+)
+endif()
+
+# Copy up the gdb python hooks into a position where they can be automatically
+# loaded by gdb during Lib/test/test_gdb.py
+#
+# Distributors are likely to want to install this somewhere else e.g. relative
+# to the stripped DWARF data for the shared library.
+
+set(SRC_GDB_HOOKS ${SRC_DIR}/Tools/gdb/libpython.py)
+configure_file(
+    ${SRC_GDB_HOOKS}
+    ${BIN_BUILD_DIR}/python-gdb.py
+    COPYONLY
+)
+if(INSTALL_DEVELOPMENT)
+    install(FILES ${SRC_GDB_HOOKS} DESTINATION ${BIN_INSTALL_DIR} COMPONENT Development)
+endif()
